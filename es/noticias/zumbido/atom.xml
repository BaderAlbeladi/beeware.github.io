<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>El Zumbido</title><link href="http://beeware.org/zh_TW/news/buzz/" rel="alternate"></link><link href="http://beeware.org/es/noticias/zumbido/atom.xml" rel="self"></link><id>urn:uuid:0f18b85e-c1d4-3086-935d-f801edebea16</id><updated>2023-12-31T00:00:00Z</updated><author><name></name></author><subtitle>BeeWare's official blog</subtitle><entry><title>December 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/december-2023-status-update/" rel="alternate"></link><updated>2023-12-31T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:b5114579-d374-3753-af9d-02b7e5e0b29f</id><content type="html">&lt;p&gt;December has been a short month due to end-of-year holidays, but BeeWare has still made some important progress.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://peps.python.org/pep-0730/"&gt;PEP730&lt;/a&gt;, formalizing the introduction of iOS as a Tier 3 platform in CPython, has been &lt;a class="reference external" href="https://github.com/python/steering-council/issues/218#issuecomment-1839333665"&gt;ratified by the CPython Steering Council&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/python/cpython/pull/112738"&gt;first patch to CPython that explicitly mentions iOS&lt;/a&gt; has been merged. This is a relatively minor change that is required for building cross-platform binary modules; we'll start submitting more substantial patches in the new year.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://peps.python.org/pep-0738/"&gt;PEP738&lt;/a&gt;, formalizing the introduction of Android as a Tier 3 platform in CPython, has been drafted, and is &lt;a class="reference external" href="https://discuss.python.org/t/pep-738-adding-android-as-a-supported-platform/40975"&gt;currently under discussion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chaquo.com/chaquopy/chaquopy-version-15-0-1/"&gt;Chaquopy 15 was released&lt;/a&gt;, adding support for Python 3.12 on Android. This release also improves compatibility with Android Studio's transition away from Groovy, towards Kotlin for configuration.&lt;/li&gt;
&lt;li&gt;An &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2259"&gt;implementation of OptionContainer was added for iOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A number of improvements were made to image handling, including &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2263"&gt;optimizations when creating images from internal APIs&lt;/a&gt;, and a &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2276"&gt;correction to flexible image resizing behavior&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2291"&gt;long standing bug that would cause macOS tables to crash&lt;/a&gt; was resolved.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2260"&gt;ability to define platform-specific icons&lt;/a&gt; was added to Toga.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.org/project/toga/0.4.1/"&gt;Toga 0.4.1 was released&lt;/a&gt;, incorporating the features and bug fixes from the last 2 months.&lt;/li&gt;
&lt;li&gt;Work has begun on a &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2266"&gt;cross-platform Camera API&lt;/a&gt; . This currently works on iOS, with a draft implementation on macOS. Before this work can land, we need to &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/547"&gt;add support in Briefcase for declaring permissions&lt;/a&gt;; a design for this has been proposed, and will be implemented early in the new year.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;When we return from the end-of-year break, we'll be back into developing Toga. In the near future, you should see an OptionContainer on Android, and permission support in Briefcase; once that work is wrapped, we'll start looking at more more hardware APIs and missing widgets. You should also start to see more patches land in CPython to support iOS, and the finalisation of &lt;a class="reference external" href="https://peps.python.org/pep-0738/"&gt;PEP 738&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/2301"&gt;Add an API to replace a child of a widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/2305"&gt;Add an API to entirely replace the style of a widget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/2307"&gt;Add the ability to define content when creating a window&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>November 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/november-2023-status-update/" rel="alternate"></link><updated>2023-12-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:830b2374-c2e9-375c-83e9-015b21f3a1f7</id><content type="html">&lt;p&gt;November has been a month of focus on the code that enables us to run Python on iOS and Android - but there has still been some other high profile developments in other parts of BeeWare.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://peps.python.org/pep-0730/"&gt;PEP730&lt;/a&gt;, formalizing the introduction of iOS as a Tier 3 platform in CPython, has been &lt;a class="reference external" href="https://github.com/python/steering-council/issues/218"&gt;submitted to the Python Steering Council for ratification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;One of the major topics covered by the &lt;a class="reference external" href="https://discuss.python.org/t/pep-730-adding-ios-as-a-supported-platform/35854"&gt;discussion about PEP730&lt;/a&gt; was the use of a deprecated compiler argument. This led to some re-examination of how CPython could be delivered on iOS without using that argument. As a result of that discussion, modifications to &lt;a class="reference external" href="https://github.com/beeware/Python-Apple-support/pull/191"&gt;use CPython as a dynamically loaded framework&lt;/a&gt; have been prepared. Although the original focus of this work was iOS, the same change will be also used for macOS - which means BeeWare no longer needs to compile a macOS support package (although we will still be lightly re-packaging the official CPython installer).&lt;/li&gt;
&lt;li&gt;We modified Toga's Image APIs so that &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2231"&gt;Pillow images can be used as source data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2230"&gt;switched CI testing of Android apps to use a Linux machine&lt;/a&gt;. This wasn't previously possible, because Github didn't expose the necessary permissions in their Linux images; however, now that &lt;em&gt;is&lt;/em&gt; possible, our Android tests run up to 5 times faster, and are less likely to be held up in CI because of availability of macOS testing machines.&lt;/li&gt;
&lt;li&gt;We corrected an issue on macOS where an OS-level setting controlling the use of tabs could &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2218"&gt;cause test failures in the Toga test suite&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There have been some extended discussions and draft PRs related to Toga's &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2244"&gt;Application base class&lt;/a&gt;, and the addition of support for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2238"&gt;status icons&lt;/a&gt;. These PRs are still in active development, but they will open up some interesting possibilities for Toga apps when they are completed.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1550"&gt;Briefcase&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2229"&gt;Toga&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/387"&gt;Rubicon ObjC&lt;/a&gt; were all modified to use PEP621 metadata, removing the need for &lt;tt class="docutils literal"&gt;setup.cfg&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;MANIFEST.in&lt;/tt&gt; files. As part of this change, we wrote a new &lt;a class="reference external" href="https://github.com/beeware/setuptools_dynamic_dependencies"&gt;setuptools plugin&lt;/a&gt; to allow for dependencies to be dynamically defined.&lt;/li&gt;
&lt;li&gt;We modified Briefcase so that &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1552"&gt;answers to the new project wizard&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1542"&gt;values for configuration settings when running commands&lt;/a&gt; can be overridden at the command line. This is mostly useful for testing purposes - it's now possible to generate a project and build it against a local template or support package build without needing to modify a &lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt; file or override input handling.&lt;/li&gt;
&lt;li&gt;We refactored the new project wizard so that &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1524"&gt;support for GUI toolkits is generated by an extensible plugin&lt;/a&gt;. Although we still ship with support for Toga, PySide, Pygame and PPB, this support is provided through a public interface, allowing other GUI toolkits to provide Briefcase with toolkit-specific modifications to the new project.&lt;/li&gt;
&lt;li&gt;We switched the default Android skin used by Briefcase from the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1554"&gt;Pixel 3a device skin to the Pixel 7 skin&lt;/a&gt;. This is an entirely cosmetic change, but it does mean that screenshots will use a device that looks a little more modern.&lt;/li&gt;
&lt;li&gt;We've made significant progress on the &lt;a class="reference external" href="https://github.com/chaquo/chaquopy/milestone/3"&gt;modifications to Chaquopy to support CPython 3.12&lt;/a&gt;. This support will hopefully be released at the same time as the upcoming Android Studio &amp;quot;Hedgehog&amp;quot; release.&lt;/li&gt;
&lt;li&gt;We've made significant progress on running CPython's unit test suite on iOS in a CI configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We won't see as much progress as normal in December as a result of the end-of-year holidays. However, before we sign off for the year, we're hoping to start looking at OptionContainer on mobile platforms, and possibly start looking at Camera API support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/2251"&gt;Update the Toga testbed test suite to use Pixel 7 Pro device sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new emulators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1472"&gt;Print notarisation log failures when building macOS apps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>October 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/october-2023-status-update/" rel="alternate"></link><updated>2023-11-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:95b88748-d1ca-3d2f-b288-d494408b264c</id><content type="html">&lt;p&gt;In October, we've (finally!) reached a major milestone - but there's still lots of work to be done!&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;We finally finished the Toga audit!!&lt;/em&gt;. We now have 100% test coverage of all Toga code on macOS, Windows, Linux/GTK, iOS and Android, with a consistent and fully documented API across all widgets. This has been a truly mammoth project, resolving countless bugs, adding dozens of new features, and improving platform support (especially on Windows and Android). Once we've finalised a couple of housekeeping issues, we will release Toga 0.4 incorporating all these changes. This will hopefully occur later this week.&lt;/li&gt;
&lt;li&gt;We attended the &lt;a class="reference external" href="https://discuss.python.org/t/2023-core-dev-sprint-in-brno-october-9-14/22868/21"&gt;Python Core Team Sprint&lt;/a&gt; at the RedHat offices in Brno, Czechia. As a result of this attendance, we produced a draft of &lt;a class="reference external" href="https://discuss.python.org/t/pep-730-adding-ios-as-a-supported-platform/35854"&gt;PEP 730&lt;/a&gt;, which is the first step towards formalizing support for iOS in CPython. An analogous Android PEP will be drafted once we've sorted out the process around the iOS PEP (as this is the first time a platform has gone through a formal process to be added to PEP 11's Tier 3 list).&lt;/li&gt;
&lt;li&gt;We reworked the build system for Apple support packages to &lt;a class="reference external" href="https://github.com/beeware/cpython-apple-source-deps"&gt;separate the compilation of dependencies&lt;/a&gt; (like BZip2 and OpenSSL) from the compilation of Python itself. These libraries are updated infrequently, and on a completely different cadence to CPython itself, so treating them as re-usable resources rather than something that needs to be compiled at the same time as Python will significantly improve CPython build times.&lt;/li&gt;
&lt;li&gt;We released &lt;a class="reference external" href="https://pypi.org/project/briefcase/0.3.16/"&gt;Briefcase 0.3.16&lt;/a&gt;, formalizing our support for Python 3.12, and adding the new support for dynamic libraries on iOS. This release also formally downgrades our support for AppImage, following extended problems in supporting AppImage as an output format.&lt;/li&gt;
&lt;li&gt;We released &lt;a class="reference external" href="https://pypi.org/project/rubicon-objc/0.4.7/"&gt;Rubicon ObjC 0.4.7&lt;/a&gt;, formalising our support for Python 3.12.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to ensure that &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1475"&gt;macOS apps are universal by default&lt;/a&gt;, with an &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1482"&gt;option to request a single-architecture build&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1470"&gt;deep debug logging level&lt;/a&gt; to Briefcase, and &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1503"&gt;simplified the output of many other commands to ensure that important warnings aren't lost&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2151"&gt;added support for Undo and Redo operations on macOS text widgets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1399"&gt;added support for user-registered fonts on iOS and macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made some modifications to &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2066"&gt;improve Toga's memory management when creating and destroying windows&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Now that we've &lt;em&gt;finally&lt;/em&gt; finished the widget audit, we can finally release Toga 0.4, and start using the foundation that we've spent the last 12 months building.&lt;/p&gt;
&lt;p&gt;In November, we'll start the work of upstreaming iOS patches to CPython core. The PEP we've drafted is nearing a form where it can be submitted to the Steering Council for approval, but the drafting process has raised a couple of technical issues that need to be investigated. However, while we wait for formal acceptance of the PEP, we will continue working on building continuous integration for our iOS CPython builds, and begin preparing patches that can be merged into CPython.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new emulators&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2023Q4 Roadmap</title><link href="http://beeware.org/es/noticias/zumbido/2023q4-roadmap/" rel="alternate"></link><updated>2023-10-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0d2d2d1d-5d6f-3a5b-964d-149f3cfd8ccc</id><content type="html">&lt;p&gt;As 2023 rolls to a close, BeeWare is more stable than ever, and is progressing well. However, there's still lots of work to be done. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;div class="section" id="q3-progress"&gt;
&lt;h2&gt;Q3 progress&lt;/h2&gt;
&lt;p&gt;During Q3, Toga testing continued to be a major focus area. We've completed testing on macOS, GTK and Linux; and testing on Windows and Android is nearing completion. Along the way, we've resolved dozens of bugs, discovered (and resolved) dozens more, and we've been able to eliminate a bunch of inconsistencies in naming and usage between widgets. We've also substantially improved the API documentation for widgets.&lt;/p&gt;
&lt;p&gt;As noted in our monthly status reports, progress has been slower than expected because of the large number of edge cases and platform inconsistencies that we've found along the way. We're still a couple of weeks away from completing this work; but once it's all completed, we'll be able to publish a new version of Toga.&lt;/p&gt;
&lt;p&gt;This quarter, we've also resolved a major known limitation on iOS - binary module packaging. We are now able to confirm that BeeWare is able to produce apps with dynamically loaded binary modules that the iOS App Store will accept through their review process. In the process of resolving this limitation, we've started developing a Forge for mobile packages, significantly improving the tooling for building binary wheels for iOS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q4-priorities"&gt;
&lt;h2&gt;Q4 priorities&lt;/h2&gt;
&lt;p&gt;Our Q4 goals are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Finalize Toga's test suite&lt;/strong&gt;. For real this time - we'll have 100% branch coverage on every line of Toga's core, and on the macOS, Windows, GTK, Android and iOS backends. Once we've released a version of Toga that includes all these fixes, we'll be able to publish a plan for the road to 1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python 3.12 support&lt;/strong&gt;. We're expecting Python 3.12.0 to drop any day. We've already done some preliminary work on Python 3.12 support, but we'll need to finalise that work once the final release is available.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start upstreaming iOS and Android support to CPython&lt;/strong&gt;. This quarter, we'll begin the process of upstreaming the patches for iOS and Android support that we've been maintaining to CPython core, and developing the CI infrastructure to run CPython's full test suite on iOS and Android. The eventual goal is for iOS and Android to be Tier 3 supported platforms in Python 3.13. This will take a while to finalise, but we've got around 8 months until the feature freeze for Python 3.13, so we're confident we can make this happen. We're attending the CPython Core Team sprint this month to kick start this effort.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OptionContainer widget for iOS and Android&lt;/strong&gt;. One of the big gaps identified during the Toga audit was the lack of content navigation widgets on iOS and Android. This quarter, we're going to start addressing this gap, adding an OptionContainer widget. This widget already exists for macOS, GTK and Windows, so we have an API design - we just need to find a way to make this API work on mobile platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image Capture&lt;/strong&gt;. We're finally going to start addressing device hardware capabilities. We're going to start with image capture - the ability to select an image from either the photo library, or take an image with the camera, and have that image available to Python code. As well as implementing this API, we're going to need to tackle permission handling in Briefcase so that apps can declare that they need access to the camera in a cross-platform way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="longer-term-goals"&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Over the last 18 months, a major focus has been ensuring that the tools we have are stable, tested, and fit for purpose. Looking forward, we'll be able to build on this foundation, adding more widgets (especially for app content navigation), and filling out notable gaps in widget platform support (such as Tree and Table widgets on mobile). We'll also start building out hardware support APIs (such as geolocation and accelerometers).&lt;/p&gt;
&lt;p&gt;However, in addition to adding new features, we're going to start drawing attention to the features we already have. The Toga audit has enabled us to revise our API documentation, but API documentation is only a small part of the overall documentation story. Now that we have a stable base to work with, we're going to start improving our tutorials and HowTo documentation, lowering the barrier to entry for new developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Toga and Briefcase are more stable than ever, and we've addressed all the major technical challenges that existed when full-time work on BeeWare started early last year. Now we can begin the work of building on the foundation that we've established, ensuring that everyone in the Python community can build native applications for their devices.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>September 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/september-2023-status-update/" rel="alternate"></link><updated>2023-09-30T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:162f6d11-3acf-37d5-923b-480e11f3c256</id><content type="html">&lt;p&gt;September has been a month of slow, but significant progress.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've resolved the issues around the iOS App Store rejecting BeeWare apps - and, by way of proof, we've updated our demo app, &lt;a class="reference external" href="https://apps.apple.com/au/app/travel-tips/id1336372310#?platform=iphone"&gt;Travel Tips&lt;/a&gt;. We've also updated the &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.keith_magee.traveltips"&gt;Android version of the app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've completely reworked the tooling for building binary packages for iOS. &lt;a class="reference external" href="https://github.com/beeware/mobile-forge"&gt;Mobile Forge&lt;/a&gt; is our new project for maintaining iOS binary builds. It provides a much more robust environment for performing cross-compilation, making use of &lt;a class="reference external" href="https://github.com/benfogle/crossenv"&gt;crossenv&lt;/a&gt;, rather than bespoke site package overrides. Getting crossenv working has also required us to do a deep audit of the various ways that Python reflects describes the platform it is running on, from the obvious ones like the &lt;tt class="docutils literal"&gt;platform&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;sys&lt;/tt&gt; modules, down to &lt;tt class="docutils literal"&gt;sysconfig&lt;/tt&gt; and the tags that are used by &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; to determine wheel compatibility.&lt;/li&gt;
&lt;li&gt;We've completed an &lt;a class="reference external" href="https://github.com/beeware/Python-Apple-support"&gt;initial port of the iOS patches to Python 3.12.0rc3&lt;/a&gt;. We're still hunting some edge cases, but initial signs are promising that we'll be in a position to do a near &amp;quot;zero day&amp;quot; release of Python 3.12 support for iOS.&lt;/li&gt;
&lt;li&gt;For Android, we've re-enabled &lt;a class="reference external" href="https://github.com/chaquo/chaquopy/pull/937"&gt;Fortran support&lt;/a&gt; in the package build system, and used it to &lt;a class="reference external" href="https://github.com/chaquo/chaquopy/pull/949"&gt;upgrade SciPy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We were anticipating that would would complete the Toga Audit this month; however, that unfortunately hasn't happened. We've hit a bunch of complications with getting fonts and canvas support working on Windows and Android, and the process of getting those platforms working has revealed some inconsistencies in macOS, iOS and GTK font handling. However, we have completed the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2019"&gt;DetailedList&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1903"&gt;Font&lt;/a&gt;, and the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2029"&gt;Canvas&lt;/a&gt; is &lt;em&gt;almost&lt;/em&gt; complete.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2112"&gt;decoupled the Winforms event loop from the main form in a Toga app&lt;/a&gt;. This doesn't have any immediate impact on existing Toga apps - but it means we're now in a position to have windowless apps, such as system tray apps.&lt;/li&gt;
&lt;li&gt;We completed the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1290"&gt;fixes needed to support Briefcase on Python 3.12&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made some &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1425"&gt;significant improvements to subprocess encoding handling&lt;/a&gt;. This should significantly improve the user experience of Windows users, and users from non-English speaking countries.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1449"&gt;formally downgraded our support for AppImage to &amp;quot;Best effort&amp;quot;&lt;/a&gt;. AppImage has proven increasingly difficult to work with as a format; now that we have native system packages and Flatpak as options, the effort needed to maintain AppImage support is better spent elsewhere. We'll still merge fixes to AppImage support if a PR is provided, but we're no longer actively fixing bugs, or running AppImage configurations in CI.&lt;/li&gt;
&lt;li&gt;We added &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1468"&gt;filters to Xcode output to hide ignorable warnings&lt;/a&gt;. Xcode builds have always been a little noisy; the new Xcode 15 release added even more noise. The filter means that these warnings will no longer distract from successful build output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Unfortunately, we didn't complete the Toga audit in September as we anticipated. As mentioned, we hit a number of complications and inconsistencies in font handling, especially in the Canvas widget, which slowed progress. We'll keep working on this audit in October; and once we're done, we'll make a release a new version of Toga. This release will include a number of backwards-incompatible changes identified as part of the audit, so be prepared for a bumpier-than-usual upgrade process.&lt;/p&gt;
&lt;p&gt;Once the audit is complete, we'll also be looking at a technical limitation that the widget audit has revealed on Android. A number of Toga's Android widgets aren't as fully featured as they could be, due to the fact that accessing the full API would require subclassing a Java base class. This is an area where Chaquopy has some limitations; so we're going to try and address these limitations.&lt;/p&gt;
&lt;p&gt;We'll also begin the work of upstreaming patches to CPython core. We've been invited to attend the CPython Core Team Sprint this month, which will be great opportunity to lay out the roadmap for formal iOS and Android support in CPython 3.13. This will also involve working on improving the CI infrastructure for building Android and iOS packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/394"&gt;Correctly handle incomplete project deletions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/737"&gt;Add an option to select the Android base image when creating new emulators&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>August 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/august-2023-status-update/" rel="alternate"></link><updated>2023-09-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:1fde782a-6bba-3811-95a7-1bc27e83a424</id><content type="html">&lt;p&gt;August has seen an important milestone reached in our Toga work, and some exciting new features.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We attended &lt;a class="reference external" href="http://2023.pycon.org.au"&gt;PyCon AU 2023&lt;/a&gt;, and presented a new talk about the fundamentals of building GUI apps in Python; the video of this presentation is &lt;a class="reference external" href="https://www.youtube.com/watch?v=DH6rkImiZtc"&gt;already online&lt;/a&gt;. At the sprints, 8 new contributors earned their challenge coins, for a range of small and large fixes.&lt;/li&gt;
&lt;li&gt;The Toga Audit is complete on macOS, iOS and GTK! The last pieces were the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2058"&gt;Window&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2075"&gt;App&lt;/a&gt;; with those PRs (and some others that are outstanding), we have 100% code coverage for Toga's codebase. Windows and Android are catching up rapidly - we've completed the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1996"&gt;OptionContainer&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2011"&gt;Table&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2017"&gt;Tree&lt;/a&gt;, as well as a major revamp of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2020"&gt;how layouts are calculated&lt;/a&gt;, which ensures that minimum window sizes are enforced, and layouts on High DPI displays are correct.&lt;/li&gt;
&lt;li&gt;We added a &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2065"&gt;Texual backend for Toga&lt;/a&gt;. This means the same Toga application will now run on 3 desktop platforms, 2 mobile platforms, as a single page web app, and in a terminal window. As with the web backend, there's still a lot of work to fill out all the widgets, but we've got enough in place to run the BeeWare tutorial app and the first 2 Toga tutorial steps.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1360"&gt;improved the architecture and word size checks that Briefcase performs when building apps&lt;/a&gt;. This effectively adds support for 32-bit x86 and ARM platforms; we're limited in our ability to perform automatic tests to verify these platforms work as advertised, and upstream tooling isn't always up to the task (for example, Linuxdeploy doesn't support ARM at any word size) - but Briefcase now performs much more robust checks, and will make a best effort when support &lt;em&gt;should&lt;/em&gt; exist.&lt;/li&gt;
&lt;li&gt;We added &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1417"&gt;support for openSUSE (and other SUSE-derived distributions)&lt;/a&gt; to Briefcase.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1397"&gt;updated the version of the Android command line tools that Briefcase uses&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We resolved a long standing issue with the use of &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/357"&gt;Objective C blocks on M1 hardware&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Based on current progress, it seems highly likely that the Toga audit will be complete on Windows and Android by the end of September. This will bring the Toga audit to completion, providing a very stable foundation for future work on Toga. It also means you can expect a new Toga release in the coming month, incorporating the myriad bug fixes and improvements that the audit has revealed. This release will include a number of backwards-incompatible changes identified as part of the audit, so be prepared for a bumpier-than-usual upgrade process.&lt;/p&gt;
&lt;p&gt;So - what comes after the audit? Firstly, we'll be looking into iOS App Store submission - we've been made aware that although Briefcase apps work fine on both device and simulator, the App Store has been rejecting apps because of an internal layout issue. We have already begun work on this, and thanks to a contribution from the community, we have a very strong foundation for this work. We'll also start looking at Python 3.12 support, and making preparations for upstreaming our iOS patches into CPython core.&lt;/p&gt;
&lt;p&gt;We'll also be looking at a technical limitation that the widget audit has revealed on Android. A number of Toga's Android widgets aren't as fully featured as they could be, due to the fact that accessing the full API would require subclassing a Java base class. This is an area where Chaquopy has some limitations; so we're going to try and address these limitations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/1980"&gt;Switch Toga's Android backend to use native Chaquopy syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>July 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/july-2023-status-update/" rel="alternate"></link><updated>2023-08-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:2820a89b-0faa-378f-b3a0-4f91ca8d71c5</id><content type="html">&lt;p&gt;The year rolls on, and so does progress on BeeWare!&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We attended &lt;a class="reference external" href="http://europython.eu"&gt;EuroPython 2023&lt;/a&gt;, presenting on Briefcase, attending the WASM summit, and running a very successful 2 day sprint.&lt;/li&gt;
&lt;li&gt;We've completed the audit of all Toga widgets on macOS, iOS and GTK! We've also completed the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1969"&gt;ScrollContainer&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1984"&gt;SplitContainer&lt;/a&gt; on Windows and Android.&lt;/li&gt;
&lt;li&gt;We've added support for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1331"&gt;Docker Desktop and rootless Docker on Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added the ability to get &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1389"&gt;detailed logs from the tools used by Briefcase to build apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've corrected some &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1375"&gt;warnings generated by pip when installing Python packages on Linux&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added support for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1377"&gt;generating APKs as an output format for Android&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've improved error reporting when &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1378"&gt;an application can't start on Android due to the device being too old&lt;/a&gt;, or &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1356"&gt;the Android device clock isn't in sync with the developer's laptop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added &lt;tt class="docutils literal"&gt;__repr__&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__str__&lt;/tt&gt; implementations for Objective C structures like &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/340"&gt;NSRect, NSRange, NSPoint and more&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2027"&gt;formally dropped support for Python 3.7 in Toga&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We improved error handling when &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2047"&gt;an app doesn't define a main window as part of it's startup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Type annotations in Toga &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2044"&gt;have been significantly improved&lt;/a&gt;. We've been adding type annotations as part of the widget audit, but some types (such as callbacks) weren't as specific as they could have been. We're now using Protocols to define some of the more complex types in Toga.&lt;/li&gt;
&lt;li&gt;We added an &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2050"&gt;ActivityIndicator&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2051"&gt;Divider&lt;/a&gt; widget implementation in the Web backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;The widget testing audit is now complete on macOS, iOS and GTK. An audit of App and Window functionality is all that stands in the way of 100% test coverage on those three platforms; it seems likely we'll get there by the end of this month. Android and Windows coverage is close behind, but might take a little longer.&lt;/p&gt;
&lt;p&gt;Part of the reason for this delay is that we need to address an important change in the most recent release of Android Studio. Over the last few years, the Android ecosystem has been in the process of migrating its build system from Groovy to Kotlin; Android Studio Giraffe makes Kotlin the default for new projects, so we need to make sure we're compatible with that change. The widget audit has also highlighted that we need to improve our handling of subclass inheritance in Java; we're hoping to make some changes that will enable us to fill in a few more gaps in widget API coverage on Android.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a class="reference external" href="https://2023.pycon.org.au"&gt;PyCon AU 2023&lt;/a&gt; from August 18-22. We're presenting on Saturday; and we'll be there for the full duration of the sprints. See you in Tarntanya/Adelaide!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1270"&gt;Add support for custom PyPI repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1393"&gt;Document how to debug an application in popular IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/1979"&gt;Switch Toga's Winforms backend to use native Winforms imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/1980"&gt;Switch Toga's Android backend to use native Chaquopy syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2023Q3 Roadmap</title><link href="http://beeware.org/es/noticias/zumbido/2023q3-roadmap/" rel="alternate"></link><updated>2023-07-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:6d790618-618f-36cf-b885-9ac46f13830d</id><content type="html">&lt;p&gt;2023 is halfway done, and BeeWare continues to make steady progress. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;div class="section" id="q2-progress"&gt;
&lt;h2&gt;Q2 progress&lt;/h2&gt;
&lt;p&gt;As with Q1, our focus in Q2 was on Toga testing. This has been a mammoth project; but it's finally nearing completion. All but 2 widgets (Canvas and DetailedList) have 100% branch coverage on macOS, iOS and GTK, while Android and Windows are only 5 more widgets behind (ScrollContainer, SplitContainer, OptionContainer, Table and Tree). Along the way, we've identified and resolved lots of inconsistencies in widget APIs, and resolved countless bugs. We've also fully documented every widget, ported the test suite to Pytest, and added type annotations in the code (mostly for documentation purposes, rather than formal validation). We've also completed testing and coverage of a lot of the non-widget functionality that wasn’t strictly planned for this quarter - features like Images, Icons, Validators, application paths, and colors; plus a lot of tests (and bugfixes) in the core widget layout. We've also got the start of some tooling that can be used to test the Web backend.&lt;/p&gt;
&lt;p&gt;Unfortunately, we haven't been able to do any substantial Toga planning. Once Toga's code is at 100% testing coverage, we'll be in a much better place to develop those plans. We also haven't been able to add any native cross-platform hardware support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q3-priorities"&gt;
&lt;h2&gt;Q3 priorities&lt;/h2&gt;
&lt;p&gt;Our Q3 goals are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Finalize Toga's test suite&lt;/strong&gt;. By the end of Q3, we should have 100% branch coverage on every line of Toga's core, and on the macOS, Windows, GTK, Android and iOS backends.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iOS Binary packaging&lt;/strong&gt; We've been made aware that Apple is rejecting Briefcase packaged iOS apps from the iOS App Store because of a package layout issue associated with binary modules. This is a very high priority to fix.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kotlin upgrades&lt;/strong&gt; The upcoming Android Studio release is switching to Kotlin as its preferred language for new Gradle configuration files; we need to upgrade Chaquopy's tooling to support this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add full support for Java inheritance&lt;/strong&gt; In the process of building Toga's test suite, it's become clear that a number of features can only be implemented by subclassing Java base classes. Chaquopy's ability to subclass is currently limited; to unlock all the features of Android, we need to resolve this limitation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="longer-term-goals"&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Our longer term goals are also &lt;a class="reference external" href="../2022q4-roadmap"&gt;largely unchanged&lt;/a&gt;. Toga 1.0 remains an important goal; once we're at 100% test coverage, we will be in much better place to provide estimates about Toga 1.0. Upstreaming is an area where we have some good news - as a result of discussions at Pycon US, we've received support for raising iOS and Android to the status of Tier 3 supported platforms in CPython, with the initial goal of having this in place for Python 3.13. You should expect to see movement on upstreaming towards the end of this year, and early next year. A forge for mobile packages is also remains an important goal; the completion of upstreaming work will make the goal of building a forge much more viable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;At the end of Q2 2023, Toga's testing journey is nearing completion... but there's still lots of work to be done. However, the groundwork that we've been doing over the last 6 months has put us in a very strong position to develop Toga and the rest of the BeeWare ecosystem going forward.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>June 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/june-2023-status-update/" rel="alternate"></link><updated>2023-06-30T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:448ce00b-e367-3af2-8e80-0def6a7249b2</id><content type="html">&lt;p&gt;We're half way through the year! Work on the widget audit is almost complete; but that's not all we've been working on.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've completed the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1946"&gt;NumberInput&lt;/a&gt;,  &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1949"&gt;WebView&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1951"&gt;DateInput, TimeInput&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1956"&gt;ImageView&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1955"&gt;Selection&lt;/a&gt; on all platforms; and we've completed the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1969"&gt;ScrollContainer&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1984"&gt;SplitContainer&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1996"&gt;OptionContainer&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2011"&gt;Table&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2017"&gt;Tree&lt;/a&gt; on macOS, iOS and GTK.&lt;/li&gt;
&lt;li&gt;We've identified and resolved some &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1958"&gt;edge cases in the Pack layout algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1964"&gt;improved the implementation of application paths, and audited the paths being returned on all platforms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/2008"&gt;corrected some issues in the Web backend caused by the most recent PyScript and Pyodide releases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1992"&gt;improved the error message that is returned when a widget isn't implemented on a platform&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've updated Briefcase to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1271"&gt;use Java 17 when building Android projects&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added support for the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1307"&gt;ANDROID_HOME environment variable&lt;/a&gt; when building Android projects with a pre-existing copy of Android Studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;The widget testing audit has been a mammoth project, but the end is very nearly in sight. There's only 2 widgets (Canvas and DetailedList) that haven't seen any testing to date; plus there's some non-widget features (like dialogs, fonts, windows, and basic App functionality) that still require testing. Once those tests are complete, we'll be moving on to dealing with some iOS and Android deployment issues that have been accumulating while we focused on Toga.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a class="reference external" href="http://europython.eu"&gt;EuroPython 2023&lt;/a&gt; from July 17-23. We're presenting on Thursday; and we'll be there for the full duration of the sprints. See you in Prague!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1157"&gt;Detect a failure when trying to install on an Android device that is too old&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1146"&gt;Use the on-device clock to filter Android device logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1136"&gt;Add an APK packaging target for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>May 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/may-2023-status-update/" rel="alternate"></link><updated>2023-06-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:638e2178-7506-3813-a89f-5b0d86970182</id><content type="html">&lt;p&gt;May has been another month of steady progress - mostly on widget testing, but also in some other key areas of the project.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've completed the audit of the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1944"&gt;TextInput, PasswordInput,&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1938"&gt;MultilineTextInput&lt;/a&gt; widgets; we've completed the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1946"&gt;NumberInput&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1949"&gt;WebView&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1951"&gt;DateInput, TimeInput&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1955"&gt;Selection&lt;/a&gt; on macOS, iOS and GTK; and we've begun the audit of &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1956"&gt;ImageView&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added documentation and tests for the input validation API as part of the TextInput audit.&lt;/li&gt;
&lt;li&gt;We've added documentation and tests for ListSource as part of the Selection audit, and modified the implementation of Selection to use a ListSource.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1948"&gt;refactored the implementation of Dialog&lt;/a&gt; so that it is architecturally consistent with the rest of Toga; this will hopefully also lead to an easier testing story.&lt;/li&gt;
&lt;li&gt;We made &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1903"&gt;significant progress in supporting custom fonts on GTK&lt;/a&gt;, including adding a GUI test of this capability.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1093"&gt;completed a refactor of Briefcase's tool integrations&lt;/a&gt;. This introduces a consistent API for all tools that Briefcase uses, as well as introducing type annotations for a lot more of the codebase.&lt;/li&gt;
&lt;li&gt;We've introduced &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1262"&gt;conditional coverage to the Briefcase codebase&lt;/a&gt;. This means developers who only have access to a single testing platform can get a 100% coverage report on their work before submitting to CI for cross-platform confirmation.&lt;/li&gt;
&lt;li&gt;We've helped triage a number of bugs in the Python 3.12.0b1 release (revealed by our testing for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1290"&gt;Briefcase&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/issues/313"&gt;Rubicon-ObjC&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;We've modified Briefcase's Flatpak backend to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1272"&gt;require an explicit runtime&lt;/a&gt;, rather than falling back to a default runtime that is no longer supported.&lt;/li&gt;
&lt;li&gt;We developed a &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1285"&gt;draft implementation of a Briefcase test runner for the Web backend&lt;/a&gt;. This is an important first step to being able to unit test Toga's Web backend; however, there's still a couple of technical challenges outstanding before we can complete that work.&lt;/li&gt;
&lt;li&gt;We've begun the process of &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1271"&gt;upgrading Briefcase's Java support from Java 8 to Java 17&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;June will be another month with a focus on GUI test coverage. We're still hoping that this work will be complete by the end of June - we're averaging 1-2 widgets a week, and we have 8 widgets remaining; however, every widget is throwing up unique challenges (and revealing deep bugs - sometimes in the underlying GUI frameworks), so it's possible the audit work may need to continue into July.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1157"&gt;Detect a failure when trying to install on an Android device that is too old&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1146"&gt;Use the on-device clock to filter Android device logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1136"&gt;Add an APK packaging target for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>April 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/april-2023-status-update/" rel="alternate"></link><updated>2023-05-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:e8cf5546-50aa-3bce-8cc2-fe144d2d6107</id><content type="html">&lt;p&gt;April was dominated by preparation and attendance at PyCon US 2023 - but we've seen some good progress over the month.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;PyCon US saw a lot of BeeWare activity:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We presented 2 talks at PyCon US - one on &lt;a class="reference external" href="https://us.pycon.org/2023/schedule/presentation/20/"&gt;Briefcase&lt;/a&gt;, and one on the &lt;a class="reference external" href="https://us.pycon.org/2023/schedule/presentation/145/"&gt;state of Android support on Python&lt;/a&gt;. Videos of these talks should appear on the &lt;a class="reference external" href="https://www.youtube.com/pyconus"&gt;PyCon US Youtube channel&lt;/a&gt; in the near future.&lt;/li&gt;
&lt;li&gt;We presented at the &lt;a class="reference external" href="https://us.pycon.org/2023/events/language-summit/"&gt;Language Summit&lt;/a&gt;, where we received provisional approval to push for iOS and Android to become Tier 3 supported platforms in CPython 3.13.&lt;/li&gt;
&lt;li&gt;We presented at the &lt;a class="reference external" href="https://us.pycon.org/2023/events/packaging-summit/"&gt;Packaging Summit&lt;/a&gt;, providing the needs of packaging from a mobile perspective.&lt;/li&gt;
&lt;li&gt;We had a booth in the community section of the conference show floor.&lt;/li&gt;
&lt;li&gt;We ran a successful sprint where we handed out over a dozen Challenge Coins. Many of the improvements listed in this status update come from community contributions, and we have a backlog of other PRs we're still working on.&lt;/li&gt;
&lt;li&gt;We donated an &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;beeware/110245889923864511"&gt;leather Briefcase to the PyLadies Auction, raising US$800!&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In non-PyCon activity:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added the ability to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/890"&gt;code sign Windows release artefacts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added a new distribution format for Windows apps - &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1183"&gt;simple ZIP archives&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1219"&gt;support PEP621 metadata standards&lt;/a&gt;. Briefcase predates the definition of PEP621, but there's a lot of overlap in what PEP621 defines and what Briefcase defines, so it makes sense for Briefcase to adhere to the common standard. In future, we expect to see more convergence with PEP621 standards.&lt;/li&gt;
&lt;li&gt;We landed major updates to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1132"&gt;Briefcase's AppImage and Flatpak backends&lt;/a&gt;. They now use Indygreg's &lt;a class="reference external" href="https://github.com/indygreg/python-build-standalone"&gt;Standalone Python&lt;/a&gt;;  this significantly speeds up Flatpak builds, should be more stable on AppImage, allows us to switch to &lt;a class="reference external" href="http://github.com/pypa/manylinux"&gt;manylinux&lt;/a&gt; base images - and it reduces the number of projects that BeeWare is responsible for maintaining.&lt;/li&gt;
&lt;li&gt;We got 2 more widgets to 100% GUI test coverage. One of these is the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1834"&gt;base widget&lt;/a&gt;, so we're now able to guarantee basic functionality across all widgets.&lt;/li&gt;
&lt;li&gt;We migrated Toga's web backend to use the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1838"&gt;Shoelace web components framework&lt;/a&gt;. This is a much better match for Toga than Bootstrap was, as it is primarily focussed on rendering &lt;em&gt;widgets&lt;/em&gt;, rather than HTML layout. We only have a handful of widgets ported over at this point - but the process of implementing widgets is relatively straightforward, so if you have web skills and are looking for a way to contribute, this would be a great place to get involved.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1894"&gt;cursor visibility&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1863"&gt;full screen mode&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1871"&gt;determining the current window&lt;/a&gt; on Windows.&lt;/li&gt;
&lt;li&gt;We added an API for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1880"&gt;catching a 'confirm' action on TextInput widgets&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1836"&gt;FreeBSD in Toga&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We made a number of significant improvements to the Tox configurations to improve reliability, work around a bugs in the release of pip 23.1, speed up and parallelise test execution, enforce spelling and external linking in documentation, and to make easier to obtain coverage reports.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In May, we'll be continuing our push for GUI test coverage. Our current aim is to have complete widget coverage by the end of June.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1157"&gt;Detect a failure when trying to install on an Android device that is too old&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1146"&gt;Use the on-device clock to filter Android device logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1136"&gt;Add an APK packaging target for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1115"&gt;Provide an option to override app settings from the command line&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2023Q2 Roadmap</title><link href="http://beeware.org/es/noticias/zumbido/2023q2-roadmap/" rel="alternate"></link><updated>2023-04-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:8c6f21df-0fed-3554-a131-c5a8d8e90687</id><content type="html">&lt;p&gt;It doesn't feel like it's been three months since our last roadmap update... but here we are, in April 2023. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;div class="section" id="q1-progress"&gt;
&lt;h2&gt;Q1 progress&lt;/h2&gt;
&lt;p&gt;Our focus this quarter has been on testing; however as with our last report, our progress has not been as significant as we hoped it would be. Getting the first tests in place has proved to be much more complex than we anticipated. In order to test widgets &lt;em&gt;at all&lt;/em&gt;, we've had to set up all the infrastructure that will be necessary to test every other widget, such as defining the probes to inspect colors and fonts, and to ensure that the GUI framework has finished applying changes before performing a test assertion. The process of building the first tests has exposed a number of problems deeply embedded in the core of Toga - problems that either aren't observable or are easily masked when you're writing an application as a user, but can't be avoided when you're writing a test suite that will run fast and needs to have repeatable behavior. We're also testing the limits of the features exposed by each platform - and everything we do needs to be repeated on 5 GUI toolkits with 5 completely different views of the world.&lt;/p&gt;
&lt;p&gt;The good news is that as of the end of Q1, we're finally getting traction on the problem. We're about a quarter of the way through the widgets by count. Admittedly, we've been tackling the simpler widgets first - but the lessons learned (and bugs fixed) making those simple widgets work should make testing the more complex widgets easier. There's also some commonality in the more complex widgets - for example, TextInput, PasswordInput and NumberInput are all essentially the same widget, so once tests are built for one of them, the other 2 should fall out reasonably easily.&lt;/p&gt;
&lt;p&gt;We have also been able to release Toga v0.3.0. This release was almost 5 years in the making.&lt;/p&gt;
&lt;p&gt;Q1 saw some unexpected improvements to Briefcase. We've had persistent problems supporting AppImage and Flatpak as packaging formats; during Q1, we couldn't avoid these problems any longer, so we introduced a System packaging backend, and made this the new default for Linux apps. We're now able to produce native system packages for Briefcase apps, supporting almost every Debian, Red Hat or Arch derived distribution. These packages are already proving more stable: we had no major issues during a recent tutorial at Everything Open 2023, despite a wide variety of Linux distributions in the room - something that we've never been able to say about AppImage.&lt;/p&gt;
&lt;p&gt;However, once again, that means there's a lot left on the Q1 TODO list. Toga documentation is being slowly updated as we audit each widget; however, we haven't made any changes to the example apps; we haven't been able to do any substantial Toga planning; and we haven't been able to add any native cross-platform hardware support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2-priorities"&gt;
&lt;h2&gt;Q2 priorities&lt;/h2&gt;
&lt;p&gt;Our short term goals are, therefore, largely unchanged from last quarter:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Completing the Toga GUI testing suite will again be our primary focus for the quarter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; - Once we've got the test harness in place, we'll be in a much better position to evaluate what work remains to get to v1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - The process of systematically building a test suite also gives us an opportunity to update the API documentation for each widget as we go. There's still lots of documentation required on top of the API guide, but complete API documentation will be a big start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform hardware&lt;/strong&gt; - Cross-platform support for device hardware (especially mobile) is one of the banner features that makes mobile device support worthwhile. Providing proof that this hardware support is easy to use will be a key demonstrator for BeeWare as a platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="longer-term-goals"&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Our longer term goals are also &lt;a class="reference external" href="../2022q4-roadmap"&gt;largely unchanged&lt;/a&gt;. Upstreaming, Toga 1.0, and a forge for mobile packages are all important goals for the BeeWare ecosystem. However, we don't expect to make any significant progress on most of these goals until we have solidified Toga's testing story. We should, however, see at least the first signs of progress on upstreaming BeeWare's work on mobile as a result of PyCon US, where we'll have a chance to raise issues directly with the Python core team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Providing a robust GUI testing framework for Toga has definitely proven to be a lot more complicated than we originally thought. The good news is that as of the end of Q1 2023, we're finally starting to make good progress on testing. We hope that by the time of our next status update, we're able to report that we're nearing the end of our testing journey, and we can turn our focus to other areas of interest.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>March 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/march-2023-status-update/" rel="alternate"></link><updated>2023-04-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:23ae8ba6-73bd-31f2-b7d1-4d1a97df2e0b</id><content type="html">&lt;p&gt;March has been a month of slow but steady progress for BeeWare.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Progress on GUI testing in Toga is continuing. We now have 7 widgets fully tested, with another 2 in progress. As with last month's update, getting these tests passing has required wrestling a lot of fundamentals, in particular around the simulation of events such as mouse clicks. We're also discovering (and fixing) lots of corner cases in widget implementations that only surface when you're doing rigorous and repeatable testing.&lt;/li&gt;
&lt;li&gt;We've made some &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1794"&gt;major changes to the way GTK widgets are rendered&lt;/a&gt;. This change significantly reduces the amount of re-rendering that is performed by GTK, as well as resolving a number of long standing issues related to resizing widgets.&lt;/li&gt;
&lt;li&gt;Thanks to some community contributions, we were were able to add support for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1817"&gt;focus events and text alignment&lt;/a&gt; on GTK's TextInput widget, and support for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1821"&gt;text alignment and fonts&lt;/a&gt; on GTK's NumberInput widget.&lt;/li&gt;
&lt;li&gt;We landed the implementation of a &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1106"&gt;Linux system package backend&lt;/a&gt; for Briefcase, which can output DEB and RPM packages. Thanks to a community contribution, we were also able to add support for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1143"&gt;Arch packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We modified the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1107"&gt;locations where Briefcase outputs build artefacts&lt;/a&gt;. This removes some sources of bugs associated with tools not supporting spaces in filenames, and makes Briefcase's output consistent with other tools in the Python ecosystem.&lt;/li&gt;
&lt;li&gt;We made significant progress on &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1132"&gt;modifying Briefcase's AppImage and Flatpak backends&lt;/a&gt; to use Indygreg's &lt;a class="reference external" href="https://github.com/indygreg/python-build-standalone"&gt;Standalone Python&lt;/a&gt;, rather than BeeWare's Linux support package. Standalone Python is becoming a de facto standard for pre-compiled Python builds (especially on Linux), so it makes sense for BeeWare to converge on this common standard. This change will also significantly speed up Flatpak builds, should be more stable on AppImage, allows us to switch to &lt;a class="reference external" href="http://github.com/pypa/manylinux"&gt;manylinux&lt;/a&gt; base images - and it reduces the number of projects that BeeWare is responsible for maintaining. We're currently waiting on a &lt;a class="reference external" href="https://github.com/linuxdeploy/linuxdeploy-plugin-gtk/pull/45"&gt;fix to the linuxdeploy GTK plugin&lt;/a&gt; to be merged before we can land this change.&lt;/li&gt;
&lt;li&gt;Thanks to a community contribution, we added support for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1125"&gt;PyGame&lt;/a&gt; to Briefcase.&lt;/li&gt;
&lt;li&gt;We migrated BeeWare's CI to &lt;a class="reference external" href="https://github.com/beeware/.github/pull/14"&gt;use the new System packaging backend&lt;/a&gt; on Linux. This means that CI is significantly faster, as building system packages requires a lot less processing than an AppImage.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://pypi.org/project/travertino/"&gt;released Travertino 0.2.0&lt;/a&gt;. Travertino is the library that underpins Toga's Pack layout algorithm. It's been several years since we last did a Travertino release, but some recent bug fixes warranted an update.&lt;/li&gt;
&lt;li&gt;We presented a tutorial at &lt;a class="reference external" href="https://2023.everythingopen.au"&gt;Everything Open 2023&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also made a big change to our social media strategy: we started a Mastodon account. We've wound down our Twitter usage at the end of last year; going forward, you can get your bite size BeeWare updates from &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;beeware"&gt;&amp;#64;beeware&amp;#64;fosstodon.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In terms of technical goals, April will continue our push for GUI test coverage. However, we're expecting progress to be a little slower, because of one big event - &lt;a class="reference external" href="https://pycon.us/2023"&gt;PyCon US&lt;/a&gt;. We'll have a booth in the community section of the conference floor; the core team are presenting 2 talks; we're presenting at the Language Summit; and we'll be at the sprints for the first 3 days. Preparing for these talks will take up a lot of our time in April, as will the event itself - so progress is likely to be a little slower than normal. If you're going to be there, come by the booth and say hi! If you'd like to help us to staff the booth - get in touch &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;on Discord&lt;/a&gt;, &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;beeware"&gt;on Mastodon&lt;/a&gt;, &lt;a class="reference external" href="mailto:contact&amp;#64;beeware.org"&gt;or email&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1011"&gt;Improve validation of project names in the Briefcase wizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1090"&gt;Correct the capture of log messages on the web backend&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="https://beeware.org/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>February 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/february-2023-status-update/" rel="alternate"></link><updated>2023-03-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:7b98925b-4a8b-3442-93e7-2e963d950b5e</id><content type="html">&lt;p&gt;Although there haven't been a lot of new BeeWare features developed in February, the work that has been completed represents some important progress against our overall project goals.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The biggest milestone is that we have achieved 100% test coverage for our first widget - &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1761"&gt;Button&lt;/a&gt;! This may sound a little underwhelming - after all, Toga has had a Button widget for a long time, and has been fairly reliable. However, getting to this point has required a lot of smaller (seemingly unrelated) problems to be solved. It has also required setting up all the infrastructure that will be necessary to test every other widget, such as defining the probes to inspect colors and fonts, and to ensure that the GUI framework has finished applying changes before performing a test assertion). We've also taken this opportunity to start migrating the Toga unit tests to &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;, which promises to significantly improve our testing capabilities.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1778"&gt;formalised the relationship between Toga's Pack layout model and CSS&lt;/a&gt;. This should make it a lot easier to determine what &amp;quot;correct&amp;quot; layout behavior should be.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1794"&gt;identified a low level issue with the way that layout is performed on GTK, and possibly with other platforms&lt;/a&gt;. We're still working through the consequences of this change, but it has indirectly resolved a number of issues we have seen reported with widget layouts, especially on GTK.&lt;/li&gt;
&lt;li&gt;We've added the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1078"&gt;ability to pass command line arguments to running apps&lt;/a&gt; from the &lt;tt class="docutils literal"&gt;briefcase dev&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;briefcase run&lt;/tt&gt; interface. This was primarily done to make it easier to run unit test suites; but it can be used for any other reason you might want to use a command line argument.&lt;/li&gt;
&lt;li&gt;We have a &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1106"&gt;draft implementation of a Linux system packaging backend&lt;/a&gt; for Briefcase. We've had consistent problems with both AppImage and Flatpak, most of which can be traced back to resolving links to system packages. We're not going to remove these backends - when AppImage and Flatpak work, they're great options - but we're going to change the default packaging backend on Linux to be system packages (i.e., DEB/RPM etc). This makes the simple case of building a package for your own system much easier, while retaining the ability to build packages for other distributions as required. We're hoping to land this PR in the coming month.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1102"&gt;corrected an issue with threading modes&lt;/a&gt; that prevented some Windows apps (especially PySide/Qt apps) from displaying dialogs.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1113"&gt;corrected an issue with the Briefcase Web backend&lt;/a&gt; that would cause intermittent errors when loading a web app.&lt;/li&gt;
&lt;li&gt;We updated our CI infrastructure to make better use of shared task definitions. BeeWare has a lot of Github repositories, and a lot of common tasks (such as rolling out an app across multiple Python and operating system versions). Previously, each Github repository had an independent set of CI task definitions; we've now got a central collection of task definitions that is used by all repositories.&lt;/li&gt;
&lt;li&gt;We cleaned up the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1762"&gt;table in Toga's documentation describing the state of support of each widget&lt;/a&gt;.  This allows us to differentiate between widgets that we've fully tested, and widgets that exist, but haven't been tested.&lt;/li&gt;
&lt;li&gt;Thanks to a community contribution, we've been able to &lt;a class="reference external" href="https://github.com/freakboy3742/chaquopy/pull/4"&gt;publish a backlog of iOS binary packages for Python 3.8-3.11&lt;/a&gt;. For the packages we currently support (including Numpy, Pandas, Pillow and more), we're now able to offer an iOS binary wheel for every published version for which there is a corresponding macOS wheel, going back to 2019.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In March, we'll be continuing to improve GUI test coverage. Now that we've got one widget to 100% coverage, we know we have all the core testing infrastructure in place, so it should be much easier to implement tests for the future widgets. By the end of March, we should have a lot more widgets at 100% coverage.&lt;/p&gt;
&lt;p&gt;We'll also be presenting at &lt;a class="reference external" href="https://2023.everythingopen.au"&gt;Everything Open 2023&lt;/a&gt;. If you're attending, come say hi!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1053"&gt;Add a template branch option when creating a new project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1011"&gt;Improve validation of project names in the Briefcase wizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1099"&gt;Rationalise the application of adhoc signing on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1090"&gt;Correct the capture of log messages on the web backend&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>January 2023 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/january-2023-status-update/" rel="alternate"></link><updated>2023-02-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:ecabb394-0c83-37d0-bf60-d898e05e12b1</id><content type="html">&lt;p&gt;BeeWare has had an exciting start to the new year, with a couple of significant releases&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;We had two big releases in January.&lt;/p&gt;
&lt;p&gt;Firstly, we released Briefcase 0.3.12. This is the first Briefcase release in 3 months, so it includes a lot of improvements, but the most notable improvements are the new &amp;quot;Testing mode&amp;quot;, a major improvement to the Android build process, and a huge number of bug fixes and improvements - especially on Windows.&lt;/p&gt;
&lt;p&gt;Secondly - and more importantly - we released Toga 0.3.0! No more dev releases or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--pre&lt;/span&gt;&lt;/tt&gt; flags for &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; - the stable release of Toga on PyPI is now closely tracking actual development. It's been over 5 years since we last released an official stable Toga version, even though we've been recommending the dev releases for most of that time. However, as a result of a number of changes that landed this month, we're finally committing to the 0.3.0 branch properly.&lt;/p&gt;
&lt;p&gt;These releases incorporate changes going back months (and years); but we made some very specific progress during January:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chaquopy &lt;a class="reference external" href="https://chaquo.com/chaquopy/chaquopy-version-14-0-2/"&gt;had a new release.&lt;/a&gt;, significantly improving build times on Android, improving the rendering of &lt;tt class="docutils literal"&gt;stdout&lt;/tt&gt; content in the Android logs, adding some features that make it easier to expose the original project source code in the running app bundle, and enabling PEP517 builds of project dependencies.&lt;/li&gt;
&lt;li&gt;Briefcase is now able to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1058"&gt;reference local source packages when building Linux AppImage binaries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some errors caused by the way the Windows Store version of Python handles local application data &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1054"&gt;have been corrected&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Briefcase's help text now &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1005"&gt;shows the list of platforms and output formats&lt;/a&gt;, rather than requiring an additional help call to retrieve that information.&lt;/li&gt;
&lt;li&gt;Some issues with thread and asyncio safety in Rubicon ObjC were &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/246"&gt;identified and resolved&lt;/a&gt;, along with an issue associated with the way some Objective C classes (such as NSWindow) are &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/258"&gt;renamed at runtime&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Initial GUI testing backends for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1707"&gt;macOS&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1749"&gt;iOS&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1755"&gt;GTK&lt;/a&gt; were added.&lt;/li&gt;
&lt;li&gt;A long standing issue with the &lt;a class="reference external" href="https://github.com/beeware/toga/issues/1439"&gt;replacement of root window content&lt;/a&gt; on GTK and iOS has been resolved.&lt;/li&gt;
&lt;li&gt;Coverage testing was &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1747"&gt;added to the Toga Android GUI test backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;An API was added to &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1728"&gt;allow scrolling MultilineTextInput widgets&lt;/a&gt; to the top and bottom of the widget content.&lt;/li&gt;
&lt;li&gt;The work &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1675"&gt;moving Toga to use Setuptools-SCM&lt;/a&gt; was completed. Development versions of Toga will now report a specific version control commit; release versions have their version determined by the git tag used to produce the release.&lt;/li&gt;
&lt;li&gt;We completed a major review of the way we're using Github issue labels, and modified those labels to be consistent across all repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Much of the last 3 months have been spent getting a GUI testing framework in place for Toga. That work is now in place, so now we'll be working full time on writing GUI tests for Toga, with the aim of getting Toga to 100% coverage. Along the way, we'll discover all the edge cases, bugs, and partially missing implementations that are lurking in the individual Toga widgets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/986"&gt;Purge cache folders when installing app code in Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1053"&gt;Add a template branch option when creating a new project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/1011"&gt;Improve validation of project names in the Briefcase wizard&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2023Q1 Roadmap</title><link href="http://beeware.org/es/noticias/zumbido/2023q1-roadmap/" rel="alternate"></link><updated>2023-01-11T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:4108ae51-a5a7-3c55-976f-b9c970b4fe79</id><content type="html">&lt;p&gt;Welcome to a new year! 2022 saw some amazing progress for BeeWare; and we've got some big plans for 2023. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;div class="section" id="q4-progress"&gt;
&lt;h2&gt;Q4 progress&lt;/h2&gt;
&lt;p&gt;Progress in Q4 was not as significant as we originally planned. A combination of conference travel and holiday leave meant the quarter was shorter than most; but even then, our goals for the quarter were extremely optimistic.&lt;/p&gt;
&lt;p&gt;We were able to hit our goal for &lt;strong&gt;Web deployment&lt;/strong&gt;. We've restored the Toga web backend to a working state, and we've added a Web deployment backend to Briefcase. There's still a lot of work required before Web deployment is a viable as a production solution, but the initial pieces are now in place.&lt;/p&gt;
&lt;p&gt;We were also able to hit our goals on &lt;strong&gt;housekeeping&lt;/strong&gt;. We've made a lot of improvements to the base infrastructure of repositories, enabling Black, pre-commit, and towncrier in Toga, and improving coverage reporting (including getting to 100% branch coverage in Briefcase's test suite).&lt;/p&gt;
&lt;p&gt;We've made significant progress on improving the &lt;strong&gt;testing&lt;/strong&gt; story for BeeWare apps. We've added the ability for Briefcase projects to run normal Python test suites inside a packaged app, and we've demonstrated that we can use this capability to run CI for iOS and Android apps (as well as desktop platforms). This feature will be included in the next Briefcase release.&lt;/p&gt;
&lt;p&gt;Using this new testing capability, we've started building a GUI test suite for Toga. This is a critical part of ensuring the quality of Toga going forward; but getting this testing framework in place has revealed lots of complications and bugs. We're making progress, but there's still a lot of work to be done.&lt;/p&gt;
&lt;p&gt;Our plans to release Toga v0.3 final have also been delayed. The process of adding SCM-based versioning to the repository (part of the housekeeping task) revealed a bug that prevented code running on Android; fixing that bug became a blocker on the release of Toga v0.3. We've now resolved that problem, so we should be able to release Toga v0.3 final as soon as the fix has been released into the BeeWare's Android tooling.&lt;/p&gt;
&lt;p&gt;Unfortunately, that leaves a lot on the Q4 TODO list. We haven't made any changes to the example apps; Toga documentation is mostly unchanged; we haven't been able to do any substantial Toga planning; and we haven't been able to add any native cross-platform hardware support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q1-priorities"&gt;
&lt;h2&gt;Q1 priorities&lt;/h2&gt;
&lt;p&gt;It's probably unsurprising that Q1 2023 will be picking up on items we didn't get around to in Q4 2022.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Completing the Toga GUI testing suite will be our primary focus for the quarter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; - Once we've got the test harness in place, we'll be in a much better position to evaluate what work remains to get to v1.0.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - The process of systematically building a test suite also gives us an opportunity to update the API documentation for each widget as we go. There's still lots of documentation required on top of the API guide, but complete API documentation will be a big start.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform hardware&lt;/strong&gt; - Cross-platform support for device hardware (especially mobile) is one of the banner features that makes mobile device support worthwhile. Providing proof that this hardware support is easy to use will be a key demonstrator for BeeWare as a platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="longer-term-goals"&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Our longer term goals are largely &lt;a class="reference external" href="../2022q4-roadmap"&gt;unchanged from Q4 2022&lt;/a&gt;. Upstreaming, Toga 1.0, and a forge for mobile packages are all important goals for the BeeWare ecosystem. However, we don't expect to make any significant progress on these goals until we have solidified Toga's testing story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The seeming lack of progress made in Q4 was definitely disappointing; but the work hasn't been wasted. Progress has been slow specifically because the problems we're trying to solve are hard, and reveal every gnarled edge case that platforms have to offer. We &lt;em&gt;are&lt;/em&gt; making progress, though; and once we've got the Toga testing framework stabilized, we'll be in a much stronger position to make predictions for future work on Toga.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>December 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/december-2022-status-update/" rel="alternate"></link><updated>2022-12-17T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:d4b8c10c-21d5-31f5-bc8c-9219d14d755d</id><content type="html">&lt;p&gt;This status update is a little earlier than our usual end-of-month report because the team will be taking a well-earned break to spend time with family and friends over the holiday and new year period. As a result, we've got less to report than in past months; however, some significant progress and improvements have been made.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During December:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We continued to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1002"&gt;fine tune Briefcase's recently added test mode&lt;/a&gt;. This reflects issues that have been discovered as we continue to build Toga's GUI test suite.&lt;/li&gt;
&lt;li&gt;We updated Briefcase's Web backend to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/1006"&gt;support changes made in the 2022.12.1 release of PyScript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We fixed a &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/993"&gt;bug preventing the use of local file references in requirements when building Linux AppImages&lt;/a&gt;. As a side effect, this change also makes it much easier to get a debug session inside the Docker container used to build AppImages.&lt;/li&gt;
&lt;li&gt;We merged the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1687"&gt;first draft of the Toga GUI testbed&lt;/a&gt;. There is still a lot of work to be done on this testbed, but it provides a solid foundation on which we can build tests of Toga's cross-platform GUI behavior.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1710"&gt;mouse events on the Canvas on GTK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We corrected a bug on Windows where local date formats would cause the DateInput widget to crash.&lt;/li&gt;
&lt;li&gt;We fixed &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/238"&gt;a bug in Rubicon that would cause background threads to stall on iOS&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;There won't be much more progress from the core team for the rest of this year. We'll still be around to handle critical problems, answer questions and do code reviews for contributors; but our response times might be a little slower than normal. We'll publish our Q1 2023 roadmap when we return in January - but we'll be largely picking up where this year has left off - improving the testing story for Toga.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here are some open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/986"&gt;Purge cache folders when installing app code in Briefcase&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>November 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/november-2022-status-update/" rel="alternate"></link><updated>2022-12-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:55638425-ec4b-3d08-9602-518cf72c6d5e</id><content type="html">&lt;p&gt;November has brought some very important improvements to BeeWare. Although these changes don't have an immediate impact for users, they're going to form a vital part of our work going forward.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During November:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/962"&gt;added a test mode to Briefcase&lt;/a&gt;. This is a &lt;em&gt;huge&lt;/em&gt; step forward, as it means we are now able to run automated tests for iOS and Android, as well as validation tests for packaged app behaviors. As a proof of concept, we've already begun porting our &lt;a class="reference external" href="https://github.com/beeware/Python-support-testbed/pull/6"&gt;support package validation app&lt;/a&gt; - this is an app that we've historically needed to run manually.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/954"&gt;added the ability for an AppImage to customise the Dockerfile used to build the project&lt;/a&gt;. This was required to support the use of Rust-based dependencies (such as &lt;a class="reference external" href="https://cryptography.io/"&gt;cryptography&lt;/a&gt;) in AppImages; however, the approach we've taken should allow for any other customisation that may be required, without the need to maintain a fork of the AppImage project template.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/974"&gt;added the ability for users to add customisations to the Android Gradle file for their projects&lt;/a&gt;. As with the Dockerfile changes, this allows for small customisations without the need to use a completely forked template.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/956"&gt;improved the resilience of Briefcase on flaky network connections&lt;/a&gt;. Previously, an interrupted download of a support package could leave Briefcase in a broken state; this should no longer be possible.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/964"&gt;improved type hinting in the Briefcase codebase&lt;/a&gt;, especially relating to the ToolCache class.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/966"&gt;improved the handling of Android apps that fail immediately on app startup&lt;/a&gt;. Previously, if your app crashed due to something like a Python syntax error, it was possible for Briefcase to hang in a way that made it look like the issue was due to Briefcase being unable to start the app, rather than a user code problem.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/970"&gt;corrected a problem on Windows that was preventing app output from being captured in the Briefcase log&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We completed the process of modernising the layout and tooling of the Toga repository, including the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1639"&gt;introduction of Black&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1638"&gt;Towncrier&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1675"&gt;setuptools_scm&lt;/a&gt;, and a &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1669"&gt;large reorganisation of the code structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1687"&gt;begun building the first automated test of Toga's GUI behavior&lt;/a&gt;. This is still in the early stages, but it will form the a core part of our testing infrastructure in the near future.&lt;/li&gt;
&lt;li&gt;We've added preliminary support for Python 3.12 to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/965"&gt;Briefcase&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1677"&gt;Toga&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/231"&gt;Rubicon ObjC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/230"&gt;updated the codebase of Rubicon-ObjC to use Black&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;December will be a slow month due to the Christmas and New Year break; however, until then, we'll continue to focus will continue to be on testing. We'll continue to build out the testing tools that we've worked on this month, and start building tests using those tools. We also hope to begin work on a firm 1.0 roadmap for Toga.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here's 8 open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/907"&gt;Add a command summary to briefcase --help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/906"&gt;Add an option to display the platforms supported by a command&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>October 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/october-2022-status-update/" rel="alternate"></link><updated>2022-11-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0ee1a39e-89fa-385a-bffc-116d811c4ad1</id><content type="html">&lt;p&gt;How time flies! Progress in October was a little slower than in past months; preparing for and attending DjangoCon US, plus some well-earned holiday leave reduced the amount of time we had to work on new features. However, we were able to make a number of significant improvements.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During October:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We restored the &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1475"&gt;web backend for Toga&lt;/a&gt;! Web deployment has always been part of the BeeWare story, but we hit some technological challenges with the approach that we were taking in the Toga 0.2 branch. However, with the addition of WASM as an officially supported platform in CPython 3.11, and the release of PyScript, we have a new way of getting Python in the browser. We have been able to use these tools to build a much improved Toga web backend.&lt;/li&gt;
&lt;li&gt;We added support for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/898"&gt;deploying Briefcase apps as static web sites&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We released official support for Python 3.11 on macOS, iOS and Linux - on the day that Python 3.11 was released!. Python 3.11 support for Android and Windows is ready to go, and should be published in a day or two.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/911"&gt;write its logs into subdirectory&lt;/a&gt;, instead of littering them in the project directory.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://2022.djangocon.us/talks/how-to-turn-your-website-into-an-app-and/"&gt;presented a talk at DjangoCon US 2022&lt;/a&gt;. The video for this talk should be up in around a month. A major feature of this talk was a demo of an Electron-style &amp;quot;web site as an app&amp;quot;, built entirely in Python. This demo (called Positron) has been &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1612"&gt;included in the Toga repository as an example&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We attended the DjangoCon US 2022 sprints, and handed out 4 &lt;a class="reference external" href="https://beeware.org/contributing/challenge-coins/"&gt;challenge coins&lt;/a&gt; to new contributors!&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1599"&gt;retrieve widgets by ID&lt;/a&gt; to the Toga API.&lt;/li&gt;
&lt;li&gt;We made a big change to the way that &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1534"&gt;Toga backends are discovered&lt;/a&gt;. This new approach has two major advantages - firstly, it means third-parties can register their own backends; but more importantly, it means that code no longer needs to explicitly provide a backend. This simplifies the creation of test cases - but it also means that icons, images and fonts no longer need to be &amp;quot;late bound&amp;quot;. This is an internal detail, but it significantly simplifies the code using those data types.&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1588"&gt;create Image objects from raw data&lt;/a&gt;, rather than an image file.&lt;/li&gt;
&lt;li&gt;We started the process of modernising the layout and tooling of the Toga repository. Some of these changes have already landed; more will come in the coming days. This ensures that we have a stable foundation for future work on Toga.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;During November, we continuing to focus on Toga, with a particular focus on testing. A particular focus will be working out how to test graphical features of Toga - an area that has historically been managed entirely with manual testing. Having strong automated testing of graphical features will be a key milestone in ensuring Toga remains stable in the long term.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here's 8 open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/753"&gt;Improve protection against corrupted or incomplete downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/882"&gt;Silence an warning that is displayed when an Android emulator has no skin defined&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2022Q4 Roadmap</title><link href="http://beeware.org/es/noticias/zumbido/2022q4-roadmap/" rel="alternate"></link><updated>2022-10-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:9b71e18d-eb1a-34aa-8bf9-589dd3532e1a</id><content type="html">&lt;p&gt;With Q3 completed, it's time to provide an update on the long term goals and priorities of the BeeWare project. As always, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;div class="section" id="q3-progress"&gt;
&lt;h2&gt;Q3 progress&lt;/h2&gt;
&lt;p&gt;We were able to hit our biggest Q3 goals:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Linux packaging&lt;/strong&gt; - We've investigated and addressed all the known issues with Linux packaging. There's &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/886"&gt;one pending enhancement&lt;/a&gt; that would expand the range of third-party binary packages that can be included in Briefcase projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows packaging&lt;/strong&gt; - We've introduced a stub binary for Windows apps (as well as a Visual Studio target for Windows projects). This allowed us to significantly improve log capture, so when a Windows app crashes it's a lot easier to obtain diagnostic information. This change also corrected &lt;em&gt;most&lt;/em&gt; of the issues with the way Windows apps were using the site module; however, there is still &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/381"&gt;one issue related to the handling of packages that have complex post-installation processes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary modules&lt;/strong&gt; - By far the biggest achievement of Q3. With the release of Briefcase 0.3.10, we now support binary modules on iOS and Android. We have also published 40 of the most popular binary modules, compiled for iOS and Android.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, we didn't hit all our goals:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Testing support has improved substantially. We have a much more thorough CI configuration on Briefcase that verifies that templates generate valid projects. We also have &lt;a class="reference external" href="https://github.com/beeware/Python-support-testbed"&gt;a testbed project&lt;/a&gt; that we can use to check that support packages are behaving correctly. However, we are not yet able to run this test project in CI, so we don't have automated validation of PRs against the support packages. We also made very little progress in GUI testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conda integration&lt;/strong&gt; - We began initial discussions around Conda integration, on two fronts: firstly, to investigate the possibility of using Conda as a base for package management in apps; and secondly, about using conda-forge as a framework for managing community contributions. Both of these conversations are ongoing; it will likely take some time before these efforts bear fruit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="q4-priorities"&gt;
&lt;h2&gt;Q4 priorities&lt;/h2&gt;
&lt;p&gt;In Q4, we're planning to focus on:&lt;/p&gt;
&lt;div class="section" id="toga"&gt;
&lt;h3&gt;Toga&lt;/h3&gt;
&lt;p&gt;The primary focus for Q4 will be Toga. There are a number of pieces of work involved with this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Housekeeping&lt;/strong&gt; - Basic repository maintenance tasks, like enabling &lt;cite&gt;black&lt;/cite&gt;, introducing pre-commit hooks, towncrier, and automating release infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Example consolidation&lt;/strong&gt; - Toga's examples folder has become a sprawling collection of code that is part documentation, part testbed. We need to start consolidating these examples into 2 apps - one that is a user-facing demonstrator of Toga features, and one that can be used as a functional test of Toga features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - Modernising and cleaning up the existing test suite, and working out how to automate GUI tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - Toga's documentation has lagged behind an acceptable standard for a long time,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; - Developing a clear plan for what will be in Toga 1.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform hardware&lt;/strong&gt; - While it has always been &lt;em&gt;technically&lt;/em&gt; possible to support the APIs needed to access device hardware, there hasn't been a cross-platform API for this work. In Q4, we hope to demonstrate at least 1 interesting piece of mobile device hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although we won't get to Toga v1.0 in Q4, we &lt;em&gt;will&lt;/em&gt; land a v0.3 final, after several years of maintaining dev pre-releases as the main way to use Toga.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-support"&gt;
&lt;h3&gt;Web support&lt;/h3&gt;
&lt;p&gt;Toga has historically had support for the Web as a platform; however, that effort was put on hold because the approach we were taking wasn't proving viable. However, with the release of Python 3.11, WASM becomes an officially supported CPython platform. We've also seen the release of &lt;a class="reference external" href="https://pyscript.net"&gt;PyScript&lt;/a&gt;, demonstrating that client-side Python in the browser is an extremely viable proposition. The time has come to resurrect BeeWare's support for the web as a deployment platform. This will involve getting Toga's web backend into a working state, and adding a web deployment backend for Briefcase.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="longer-term-goals"&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Looking into next year, the big items on the horizon are:&lt;/p&gt;
&lt;div class="section" id="upstreaming"&gt;
&lt;h3&gt;Upstreaming&lt;/h3&gt;
&lt;p&gt;With binary modules now being supported on both iOS and Android, and the introduction of a &lt;a class="reference external" href="https://peps.python.org/pep-0011/"&gt;Tier 3 support level in PEP11&lt;/a&gt;,  the prospect of elevating iOS and Android to official supported platforms is seeming increasingly plausible. Our hope is to go to PyCon US next year in a position to make a concrete proposal to the CPython core team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="toga-1-0"&gt;
&lt;h3&gt;Toga 1.0&lt;/h3&gt;
&lt;p&gt;The broad goal for &amp;quot;Toga 1.0&amp;quot; could be considered &amp;quot;Tkinter, but with some additional bells to show off&amp;quot;. We want to deliver a core widget set of the &amp;quot;essentials&amp;quot;, plus some nice features to show off, like WebViews and camera or GPS integration. We hope to establish the feature list for Toga 1.0 in Q4; once that plan is in place, we'll have a better idea of when we will be able to deliver on that plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-forge-for-mobile-packages"&gt;
&lt;h3&gt;A Forge for mobile packages&lt;/h3&gt;
&lt;p&gt;As of today, all binary modules for mobile platforms are being maintained by the BeeWare team. This isn't a viable solution long term; we need to move to an environment where the community can manage binary packages for mobile platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;For the last 6 months, the focus of BeeWare has been on Briefcase and the support packages - ensuring that we have a feature complete, robust set of tools for deploying apps on any platform. In Q4, our focus is shifting to the tools we need to build apps &lt;em&gt;on&lt;/em&gt; those platforms, and ensuring we have a stable foundation for future development. It's taken a long time for BeeWare to get this far - but we're getting very close to unlocking the remarkable potential of the Python ecosystem on mobile devices.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>September 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/september-2022-status-update/" rel="alternate"></link><updated>2022-10-03T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:ba264dae-dc08-37e9-80f7-9d610f61b2fa</id><content type="html">&lt;p&gt;September has been a big month for the BeeWare team. There have been lots of small updates - but there's one very large, eagerly anticipated update that has taken several months to complete.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During September:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We added support for binary packages on mobile platforms! There's more detail related to this than can fit in a bullet point; more details below.&lt;/li&gt;
&lt;li&gt;We added the ability to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/854"&gt;remove files from a templated app&lt;/a&gt;. This can be used to trim down a project, removing parts of the Python interpreter that you don't need (such as standard library modules that you don't need)&lt;/li&gt;
&lt;li&gt;We've changed the way we use templates, switching to using &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/862"&gt;branches based on the Briefcase release, rather than the Python release&lt;/a&gt;. This enables us to make development changes to templates without affecting the published stable release.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/801"&gt;reworked the way Briefcase manages integrations with the tools needed to build apps&lt;/a&gt;. This was a mammoth project, but as a result the process of verifying tools is faster, and a number of bugs related to having stale builds have been resolved.&lt;/li&gt;
&lt;li&gt;We've made a number of improvements to console handling of log messages, especially on Windows&lt;/li&gt;
&lt;li&gt;We improved error handling in Toga when &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1589"&gt;TLS1.2 or TLS1.3 isn't supported by Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We started conversations with the teams at Anaconda responsible for conda about using Conda as a base for Briefcase apps, and on using Conde-forge style infrastructure to support binary packaging. Nothing concrete has come from these conversations yet; these conversations are ongoing.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="binary-package-support-you-say"&gt;
&lt;h3&gt;Binary package support you say?&lt;/h3&gt;
&lt;p&gt;All the new binary packaging support is contained in &lt;a class="reference external" href="https://pypi.org/project/briefcase/0.3.10/"&gt;Briefcase 0.3.10&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Android, binary module support was achieved by moving to &lt;a class="reference external" href="https://chaquo.com"&gt;Chaquopy&lt;/a&gt; as a base for Android projects. Along with support for binary modules, this change has the added benefit of faster startup times, and less bugs at runtime. This means you'll need to re-generate any Android project - the Python source code should work as-is, but there's no simple way to convert the Android Gradle project from the older Rubicon base to the newer Chaquopy base.&lt;/p&gt;
&lt;p&gt;On iOS, we've &lt;a class="reference external" href="https://github.com/beeware/Python-Apple-support/pull/161"&gt;reworked how the support packages are constructed&lt;/a&gt;, and &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/849"&gt;added support for installing binary modules from a Beeware-specific package repository that includes builds of iOS binary wheels&lt;/a&gt;. We've also added asset signing to the iOS Xcode project - and applied the same changes to the macOS backends. Of course, this also means you'll need to re-generate any iOS project to take advantage of these changes.&lt;/p&gt;
&lt;p&gt;While we are now able to support binary packages on mobile platforms, this doesn't mean that &lt;em&gt;every&lt;/em&gt; binary package is automatically supported. Binary wheels need to be compiled for mobile platforms, and compiling for mobile platforms can be complicated. However, we've compiled ~40 of them most popular packages with binary components (including numpy, pandas, cryptography, pillow and matplotlib), and made them available as dependencies. In order to get working builds, some of these packages are slightly older versions (e.g., cryptography is a version from before the introduction of the rust dependency); however, we've endeavoured to provide the most recent versions possible.&lt;/p&gt;
&lt;p&gt;A full list of supported packages can be found &lt;a class="reference external" href="https://chaquo.com/pypi-7.0/"&gt;on the Chaquopy package repository for Android&lt;/a&gt;, and the &lt;a class="reference external" href="https://anaconda.org/beeware/repo"&gt;BeeWare repository for iOS&lt;/a&gt;. If your project uses one of these packages, you only need to add them to the &lt;cite&gt;requires&lt;/cite&gt; definition in your &lt;cite&gt;pyproject.toml&lt;/cite&gt;, then update and re-build your project, and you're done.&lt;/p&gt;
&lt;p&gt;If there’s a package you want that isn't on this list, you'll need to request a binary wheel. For Android, &lt;a class="reference external" href="https://github.com/chaquo/chaquopy/issues"&gt;open a ticket on the Chaquopy repository&lt;/a&gt;. For iOS, &lt;a class="reference external" href="https://github.com/freakboy3742/chaquopy"&gt;open a ticket on this repository&lt;/a&gt;. If you're adventurous, you can also try building wheels yourself. The issue trackers are on a project that has as &amp;quot;forge-like&amp;quot; tool for building wheels, in the &lt;cite&gt;server/pypi&lt;/cite&gt; folder; there are tools and documentation describing how to build a package. The use of these projects is a short-term measure; in the longer term, we want to move to an actual “forge”-style community-managed model for managing binary packages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;For the last few months, the focus of the BeeWare team has been on Briefcase and the support packages. In October (and the rest of Q4), we'll be shifting our focus to Toga. The initial focus will be on improving the foundation of the project - testing and build infrastructure; but once those pieces are in place, we'll start adding new features.&lt;/p&gt;
&lt;p&gt;We'll also be at &lt;a class="reference external" href="https://2022.djangocon.us"&gt;DjangoCon US&lt;/a&gt; in San Diego - and there will be some web-related updates related to the presentation that will be given at that conference. We hope we'll see you there!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-get-involved"&gt;
&lt;h2&gt;Want to get involved?&lt;/h2&gt;
&lt;p&gt;Want to get involved? Here's 10 open issues that would be a great place to get started with contributing to a BeeWare project. They're all relatively minor changes, but would provide a big improvement to the lives of BeeWare users:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/883"&gt;Write Briefcase logs into a subdirectory, instead of the project folder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/753"&gt;Improve protection against corrupted or incomplete downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/865"&gt;Modify the handling of app signing options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/880"&gt;Modify the Briefcase new project wizard to show which repository and branch it's using&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/780"&gt;Filter out a message generated after Xcode updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/856"&gt;Add the ability to refresh the support package in a project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/853"&gt;Provide protection against creating projects with &amp;quot;semi-reserved&amp;quot; names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/808"&gt;Add the ability to configure the ABIs built by an Android project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/463"&gt;Add support for the ANDROID_HOME environment variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/882"&gt;Silence an warning that is displayed when an Android emulator has no skin defined&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pick one of these tickets, drop a comment on the ticket to let others know you're looking at it, and try your hand at a PR! We have a &lt;a class="reference external" href="https://briefcase.readthedocs.io/en/latest/how-to/contribute-code.html"&gt;guide on setting up a Briefcase development environment&lt;/a&gt;; but if you need any additional assistance or guidance, you can ask on the ticket, or join us on the &lt;a class="reference external" href="/bee/chat/"&gt;BeeWare Discord server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>August 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/august-2022-status-update/" rel="alternate"></link><updated>2022-09-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0c8eda3d-9e36-376a-b4ef-77269864a32c</id><content type="html">&lt;p&gt;The main focus of the BeeWare team during August was binary module support on mobile platforms. Although we haven't got the final results of this work yet, we have significant progress to report for both iOS and Android. We've also had a number of other improvements land over the course of the month.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During August:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We have continued to work on the changes needed to migrate Android support to Chaquopy. This has included some &lt;a class="reference external" href="https://github.com/beeware/briefcase-android-gradle-template/pull/52"&gt;major changes to the Android Gradle template&lt;/a&gt;, and developing a Rubicon Java compatibility layer. Eventually, Toga will migrate to use the Chaquopy APIs directly, but in the interim, the Rubicon APIs will continue to work.&lt;/li&gt;
&lt;li&gt;We have started updating Chaquopy to support multiple Python versions. Historically, Chaquopy has only supported a single Python3 version (3.8); for compatibility with Briefcase, we are adding support for Python 3.9 and 3.10, as well as preparing the ground for a 3.11 release when Python 3.11 is finalised.&lt;/li&gt;
&lt;li&gt;We have modified the Python Apple support packages to &lt;a class="reference external" href="https://github.com/beeware/Python-Apple-support/pull/161"&gt;provide the binary portions of the Python standard library as dynamically loaded binary modules&lt;/a&gt;, and modified the &lt;a class="reference external" href="https://github.com/beeware/briefcase-iOS-Xcode-template/pull/7"&gt;iOS&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/briefcase-macOS-Xcode-template/pull/10"&gt;macOS&lt;/a&gt; templates to use and sign these binary modules. These changes haven't landed yet, but they have been tested on simulators and physical devices. Along the way, we've also updated the support packages to use OpenSSL 3.&lt;/li&gt;
&lt;li&gt;We have modified Briefcase to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/805"&gt;make the Python support package optional&lt;/a&gt;, at the discretion of the project template. This was needed because Chaquopy provides the Python library using a Gradle plugin, rather than requiring a project to source a pre-compiled support package.&lt;/li&gt;
&lt;li&gt;We have addressed an issue with the way Briefcase handles &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/816"&gt;requirements references when they are relative file references&lt;/a&gt;. Although this was added to allow rapid debugging of changes to Toga on Android, it also affected the recently added Linuxdeploy backend.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/846"&gt;added an &amp;quot;open&amp;quot; subcommand to Briefcase&lt;/a&gt;, making it easier to open project-based templates in their respective IDEs.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/821"&gt;improved Android log handling&lt;/a&gt;, ensuring that more app-specific logs are displayed to the user.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/844"&gt;dramatically improved our CI testing of Briefcase&lt;/a&gt;. We now build an app on every platform we support, using every backend.&lt;/li&gt;
&lt;li&gt;We've addressed a number of bugs in the Pack layout algorithm.&lt;/li&gt;
&lt;li&gt;We've continued the process of making Toga widget APIs naming internally consistent.&lt;/li&gt;
&lt;li&gt;We've fixed some canvas bugs that were causing problems on Windowns with our native Matplotlib rendering backend, &lt;a class="reference external" href="https://github.com/beeware/toga-chart"&gt;toga-chart&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've addressed some bugs associated with &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1572"&gt;changing the main content of a Toga window&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We added an &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1574"&gt;initial implementation of a DetailedList widget on Windows&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In September, we hope to wrap up the work on binary dependencies. On Android, this is mostly a matter of completing the work to support multiple Python versions. On iOS, we need to develop the tools to manage the compilation of third-party binary libraries. We have an initial proof of concept of this; we need to finish these tools, and develop the infrastructure to distribute. We're also hoping to start conversations with the Anaconda team about Conda integration with Briefcase, and start improving GUI testing in Toga.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>July 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/july-2022-status-update/" rel="alternate"></link><updated>2022-08-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:de3ac9af-8a78-3b2c-a96c-bb051abf9f8f</id><content type="html">&lt;p&gt;Another month of important updates to the BeeWare project! This month, our focus was on packaging improvements on Linux and Windows.&lt;/p&gt;
&lt;p&gt;In addition the technical progress, we welcomed &lt;a class="reference external" href="https://github.com/mhsmith"&gt;Malcolm Smith (&amp;#64;mhsmith on Github)&lt;/a&gt; to the Anaconda BeeWare team! Malcolm brings his considerable experience developing and maintaining &lt;a class="reference external" href="https://github.com/chaquo"&gt;Chaquopy&lt;/a&gt;, a set of tools and libraries for building Android applications that use Python. Chaquopy tackles the &amp;quot;Python on Android&amp;quot; problem from the perspective of adding Python to an existing Android Studio project rather than writing apps entirely with Python; as a result, it features much tighter integration with native Android Studio tooling. One particularly interesting feature of Chaquopy is that it supports binary dependencies on Android - a key feature that BeeWare's Android tooling currently lacks. Historically, Chaquopy was a closed source tool with licenses available for open source projects; however, as a result of joining Anaconda, Malcolm has &lt;a class="reference external" href="https://chaquo.com/chaquopy/chaquopy-is-now-open-source/"&gt;released Chaquopy as an Open Source project&lt;/a&gt;!&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During July:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/756"&gt;added support for Linuxdeploy plugins&lt;/a&gt; for Linux AppImages. These plugins are an important part of making AppImages self-contained, as many libraries need to provide the Linuxdeploy tooling hints to help find all the resources needed at runtime. Adding support for these plugins should address most of the issues we've been seeing with moving AppImages between Linux versions.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/802"&gt;added a Flatpak backend for Linux packaging&lt;/a&gt;. Flatpak is an alternative packaging format to AppImage which has the support of a number of large Linux distributions. For now, AppImage continues to be the default Linux packaging format, but we may change this default in the future.&lt;/li&gt;
&lt;li&gt;We &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/782"&gt;improved the packaging of Windows apps by adding a stub binary&lt;/a&gt;. We're still hunting some bugs in this stub binary, but when those are resolved, the Windows apps generated by Briefcase will present to the operating system with consistent app naming and icons. The stub binary also enables us to catch runtime problems with the app in a way that makes diagnosing app problems much easier.&lt;/li&gt;
&lt;li&gt;We presented a webinar about native application development. If you weren't able to attend the webinar live, a recording is available; &lt;a class="reference external" href="https://event.on24.com/wcc/r/3766379/B50F020E006CF935D87609BF3E247ED7?partnerref=anaconda.com"&gt;register here to watch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We got an initial proof of concept of a Toga app running on Android using Chaquopy as a base, accessing a binary library (matplotlib), deployed with Briefcase. Over the coming weeks, we're hoping this proof of concept will evolve into major improvement to BeeWare's Android tooling.&lt;/li&gt;
&lt;li&gt;We modified Briefcase to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/777"&gt;use OS-appropriate directories for caching&lt;/a&gt;. While the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.briefcase&lt;/span&gt;&lt;/tt&gt; location has served us well, it isn't a location that adheres to platform-native conventions for storing app resources, so we've moved Briefcase's cache of downloads, tools and templates to a platform-appropriate location.&lt;/li&gt;
&lt;li&gt;We addressed an issue with the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/803"&gt;current working directory leaking into the runtime path&lt;/a&gt;. This was especially common with Linux apps, but it could potentially be an issue with other platforms as well.&lt;/li&gt;
&lt;li&gt;We've started the process of making Toga widget APIs internally consistent. While we've aimed to keep naming of widgets' attributes and handlers consistent, there are a couple of annoying inconsistencies. We've started the process of cleaning up these inconsistencies.&lt;/li&gt;
&lt;li&gt;We've started looking into binary dependencies on iOS apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In August, our major focus will be binary dependencies on mobile. This is one of the biggest missing pieces of the BeeWare story at present. Being able to utilize Chaquopy as a base gives us a huge head start on Android, so it seems likely we'll have a working solution for Android in the near future. However, on iOS, we're still at the &amp;quot;we don't know what we don't know&amp;quot; stage. It's unclear if we'll have a fully working solution by the end of the month, but we should have at least some progress to report.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>June 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/june-2022-status-update/" rel="alternate"></link><updated>2022-07-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:393adcf6-a291-34ee-aafa-06fd4b016e4d</id><content type="html">&lt;p&gt;It's been another busy month at the hive! This month, we've had a couple of high profile improvements, and some slow progress towards longer term goals. These improvements have been primarily in Briefcase and app packaging, but there have been some minor Toga improvements as well.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During June:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We significantly improved the UI of Briefcase by &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/740"&gt;adding Rich&lt;/a&gt; to implement terminal output. This allows us to have &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/755"&gt;vastly improved progress bars&lt;/a&gt;, as well as the ability to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/760"&gt;save a full debug log when a problem occurs&lt;/a&gt;.  These improvements (and several others) are the result of contributions from community member &lt;a class="reference external" href="https://github.com/rmartin16"&gt;Russell Martin&lt;/a&gt; - thanks Russell!&lt;/li&gt;
&lt;li&gt;We added support for &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/757"&gt;macOS app notarization&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We improved the way the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/766"&gt;Briefcase manages Android system images&lt;/a&gt;. This corrects a bug we were seeing that was causing the Android emulator to be installed twice, and could lead to situations where emulators could be discovered, but not started.&lt;/li&gt;
&lt;li&gt;We've explored the source of the &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/718"&gt;Linux packaging problems&lt;/a&gt; we've been seeing. We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/761"&gt;documented a workaround for one of those problems&lt;/a&gt;; and we're working on 2 fixes (&lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/756"&gt;supporting Linuxdeploy plugins&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/754"&gt;adding Flatpak support&lt;/a&gt;) that will hopefully address the remaining Linux packaging issues.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/775"&gt;improved Windows MSI installers&lt;/a&gt; so that it will use the right &lt;cite&gt;Program Files&lt;/cite&gt; directory, as well as providing an install-time option for system vs user installs of a package.&lt;/li&gt;
&lt;li&gt;We made some small improvements that &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/769"&gt;improve support for non-ASCII project names and descriptions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've made some &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1504"&gt;more improvements to Toga Webviews&lt;/a&gt;, ensuring that the current URL is accessible through the Python API.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1514"&gt;addressed a long standing bug&lt;/a&gt; that would cause Toga apps to be unable to find their local resource folders, depending on how the app was invoked. More importantly, this change has been accompanied by additions to the test suite. This is the start of being able to test runtime behavior of apps, which will be an increasinging important feature moving forward.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1513"&gt;added a stack trace dialog for Windows&lt;/a&gt;. A version of this dialog will be integrated into future improvements in Windows packaging.&lt;/li&gt;
&lt;li&gt;Finally, we published our &lt;a class="reference external" href="https://beeware.org/news/buzz/2022q3-roadmap/"&gt;Q3 roadmap&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In July, we'll be focussing on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Completing the work on Linux and Windows application packaging.&lt;/li&gt;
&lt;li&gt;Presenting a webinar about native application development. If you'd like to attend, &lt;a class="reference external" href="https://event.on24.com/wcc/r/3766379/B50F020E006CF935D87609BF3E247ED7?partnerref=anaconda.com"&gt;registration for this webinar is open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Starting investigations into binary module support on mobile platforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We're also delighted to announce that we've successfully completed our hiring process; so, in 2 weeks, there will be another Bee in the hive! I'm very excited about the possibilities that this additional team member will afford. Look out for a welcome announcement in the coming weeks.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2022Q3 Roadmap</title><link href="http://beeware.org/es/noticias/zumbido/2022q3-roadmap/" rel="alternate"></link><updated>2022-06-24T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:a63e754a-6c00-3735-9da8-551fb7320075</id><content type="html">&lt;p&gt;One of the benefits of having the support of an organisation like Anaconda is that we are now in a position to make more concrete commitments on project goals, and the likely timeframe when key features will be delivered. To that end, in addition to monthly status updates, we're going to start publishing regular updates on our project roadmap so the community has a better idea what to expect over the coming months.&lt;/p&gt;
&lt;p&gt;Project estimation is difficult at the best of times; and project estimation on a FLOSS project is especially complex. In addition to any work that we are planning internally as a team, we need to manage contributions from the community. If a community member contributes a piece of work that &lt;em&gt;isn't&lt;/em&gt; on our roadmap, we need to review that work. As a result, our ability to deliver on our own roadmap is dependent on how much is contributed by the community - something that is very hard to predict ahead of time.&lt;/p&gt;
&lt;p&gt;In addition, several of the topics listed on this roadmap are complex, foundational tasks, and potentially contain unknown complications. As with any complex work, it can be difficult to predict ahead of time how long that work will take.&lt;/p&gt;
&lt;p&gt;As a result, this roadmap should be read as a guide to what we aim to focus on over the coming quarter, rather than a hard commitment of features that will be made available on a specific deadline.&lt;/p&gt;
&lt;div class="section" id="q3-priorities"&gt;
&lt;h2&gt;Q3 priorities&lt;/h2&gt;
&lt;p&gt;During Q3, we're planning to work on:&lt;/p&gt;
&lt;div class="section" id="linux-packaging"&gt;
&lt;h3&gt;Linux packaging&lt;/h3&gt;
&lt;p&gt;Breifcase's AppImage packaging backend has had &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/718"&gt;a cluster of issues reported&lt;/a&gt; related to inclusion of third party libraries, and the post-processing that needs to be performed on an AppImage. We've already started work on this during Q2; early in Q3, you should expect to see this work wrapped up. This will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding support for linuxdeploy plugins for our existing AppImage backend; and&lt;/li&gt;
&lt;li&gt;Adding a Flatpak backend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="windows-packaging"&gt;
&lt;h3&gt;Windows packaging&lt;/h3&gt;
&lt;p&gt;Briefcase has an MSI packaging backend for Windows; and while this backend works, it doesn't deliver an end-user experience that is as polished as we'd like. We should be starting initial work on Windows packaging in the coming week, with the complete solution completed in early Q3. This will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding a stub binary for Windows apps, so that Briefcase apps present to the task manager with the apps name and icon, rather than &amp;quot;pythonw&amp;quot;;&lt;/li&gt;
&lt;li&gt;Improving log capture on Windows, so that it is easier to diagnose when problems occur; and&lt;/li&gt;
&lt;li&gt;Fixing some issues with the way the &lt;cite&gt;site&lt;/cite&gt; is defined and used. This may also address some issues we've seen with binary modules in some Windows apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="binary-modules"&gt;
&lt;h3&gt;Binary modules&lt;/h3&gt;
&lt;p&gt;The biggest caveat on BeeWare's mobile app story has always been that we don't provide support for binary packages on mobile platforms. In Q3, we're going to start addressing this limitation.&lt;/p&gt;
&lt;p&gt;There are already tools like &lt;a class="reference external" href="https://github.com/benfogle/crossenv"&gt;crossenv&lt;/a&gt; that can simplify this process, and we've got &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/647"&gt;a PR in our review queue&lt;/a&gt; that provides a proof-of-concept implementation of Android binary packaging. We need to take these tools, plus other tools in the Python ecosystem, and extend Briefcase so that we can present a clear development story for mobile developers that want to use modules with binary components.&lt;/p&gt;
&lt;p&gt;On iOS, there is an additional complication - we need to resolve how to manage dynamic loading of modules. BeeWare's iOS support currently relies on static compilation of all binary modules. This was originally done because prior to iOS8, dynamic linking was prohibited on iOS. The days of iOS8 are now long behind us; but the Apple support package has retained this old approach, mostly because it wasn't clear what approach Apple would allow through the App Store review process. We will be making changes to Briefcase's iOS support to accomodate dynamic module loading, and then extending that support to include user-provided binary modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-especially-gui-testing"&gt;
&lt;h3&gt;Testing (especially GUI testing)&lt;/h3&gt;
&lt;p&gt;Without testing, it's very difficult to ensure the stability and reliability of code in the long term. Unfortunately, many of the areas where BeeWare operates are inherently difficult to test. Visual GUI tests are notoriously difficult to perform; packaging tests require the ability to actually install and run finished applications; testing mobile applications requires access to mobile device hardware in a CI setup. As a project, we've avoided writing tests for many of our core features due to these complexities - and we've paid the price for this in regressions. Now that we have more time, we can focus on setting up the frameworks to let us perform this testing.&lt;/p&gt;
&lt;p&gt;This includes adding:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Support package tests&lt;/strong&gt;, ensuring that the packages include valid libraries;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;App template tests&lt;/strong&gt;, ensuring that Briefcase is able to generate valid and installable applications; and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GUI tests&lt;/strong&gt;, ensuring that Toga generates apps that look and behave the way they should.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing is an ongoing process, so it's highly unlikely we'll have &amp;quot;100% test coverage&amp;quot; by the end of the quarter. The goal will be to add the frameworks that allow us to add tests &lt;em&gt;at all&lt;/em&gt;, so that we can retrofit tests onto existing code, and add tests on all new code going forward. Ideally, these tests will be fully automated tests running in CI. However, we may accept semi-automated or manual tests as a short term of interim measure, especially if those tests lay the groundwork for fully automated tests in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conda-integration"&gt;
&lt;h3&gt;Conda integration&lt;/h3&gt;
&lt;p&gt;Briefcase is currently uses PyPI and pip as source of Python packages. However, PyPI and pip isn't the only packaging solution in the Python ecosystem - another commonly used packaging source is Conda.&lt;/p&gt;
&lt;p&gt;At this point, I must recognise the elephant in the room - Anaconda, the company that produced and maintains Conda,  is my employer. However, I must stress that the fact this is on our roadmap is &lt;em&gt;not&lt;/em&gt; as a result of a directive from my employer. The original &lt;a class="reference external" href="https://github.com/beeware/briefcase/issues/596"&gt;proposal for this idea&lt;/a&gt; predates even my earliest hiring discussions with Anaconda. It is being pursued now for three reasons:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The key value of Conda is that it simplifies the process of delivering complex binary packages, and ensuring that the binary dependencies for those packages are isolated from any packages that might be present on the user's computer. This core problem statement shares a lot of similarities with the core problem associated with application packaging. Conda also has much more nuanced representation of hardware platforms, alternatives for binary artefacts, and options for custom repositories. There is a possibility that using Conda as a packaging base may simplify some of the problems we've seen with distributing binary dependencies.&lt;/li&gt;
&lt;li&gt;There is a significant portion of the Python community that have commercial needs that requires the use of the managed repositories provided by Anaconda, or are simply more familiar with Conda tooling than PyPI/pip.&lt;/li&gt;
&lt;li&gt;As a result of having 1 (soon to be 2) full time engineers, we now have the resources to explore complex changes that might not have otherwise been explored. We are exploring this idea because we now have the resources to do so; we were not provided those resources on the condition that we explore this idea.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We don't anticipate dropping support for pip, or for PyPI as a package source. We're looking at extending Briefcase to provide another commonly used and requested option for packaging, rather than replacing PyPI/pip.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="longer-term-goals"&gt;
&lt;h2&gt;Longer term goals&lt;/h2&gt;
&lt;p&gt;Looking beyond Q3, the big items on the horizon are:&lt;/p&gt;
&lt;div class="section" id="upstreaming"&gt;
&lt;h3&gt;Upstreaming&lt;/h3&gt;
&lt;p&gt;The Apple and Android support packages maintained by BeeWare include a number of patches against the core CPython. We want to begin the process of getting these modifications into the CPython codebase.&lt;/p&gt;
&lt;p&gt;There have been two major impediments to this in the past:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Development resources&lt;/strong&gt; When we were a volunteer driven project, we didn't have the resources to engage meaningfully with the CPython core team to shepherd our patches into the CPython codebase.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; Supported platforms in the CPython codebase need to have CI solutions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We now have resources, so we can dedicate the time needed to upstream patches; and once we've completed our testing work in Q3, we'll be in a position to recommend CI configurations to the CPython core team. That means the work of upstreaming patches and making iOS and Android fully supported platforms can begin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="toga-1-0"&gt;
&lt;h3&gt;Toga 1.0&lt;/h3&gt;
&lt;p&gt;The broad goal for &amp;quot;Toga 1.0&amp;quot; could be considered &amp;quot;Tkinter, but with some additional bells to show off&amp;quot;. We want to deliver a core widget set of the &amp;quot;essentials&amp;quot;, plus some nice features to show off, like WebViews and camera or GPS integration. The exact set of features for Toga 1.0 is still a subject for discussion; I'd expect to see a more concrete feature list and plan emerge in Q4.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;As with most of the work that has been done in Q2, the foundational work we're planning for Q3 is not as glamorous as adding high profile GUI widgets, but it's all necessary work if we're going to provide a stable and reliable development story. Once this foundation is established, we'll be in a much better position to rapidly develop new features that &lt;em&gt;are&lt;/em&gt; visible - and to ensure that those features are stable and reliable as BeeWare develops.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>May 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/may-2022-status-update/" rel="alternate"></link><updated>2022-06-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:26a35eae-e73a-3108-939b-9e50b9b06937</id><content type="html">&lt;p&gt;It's been another busy month at the hive! The progress we made in May isn't as obvious as last month - but the changes that have been made are an essential part of ensuring we have a stable foundation for future work on the BeeWare ecosystem.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During May:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/Python-Apple-support/pull/145"&gt;We updated the Apple support packages&lt;/a&gt;. These updates aren't &lt;em&gt;just&lt;/em&gt; a version bump - they also added support that enables the iOS emulator to run natively on M1 devices. This required a major restructure of the way the support packages are bundled, using Apple's new XCframework library packaging format.&lt;/li&gt;
&lt;li&gt;We addressed an issue with the use of ctypes on physical iOS devices. ctypes is a core part of the infrastructure we use to integrate with the iOS system libraries, so resolving this bug was critical for distributing apps. The fix was &lt;a class="reference external" href="https://github.com/libffi/libffi/pull/718"&gt;deep in the core of libFFI&lt;/a&gt;, and has been submitted for integration into the upstream project.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/Python-Android-support/pull/37"&gt;We released an Android support package for Python 3.10&lt;/a&gt;, as well as updated support packages for Python 3.7, 3.8, and 3.9. These support packages dramatically are now dramatically smaller, and result in smaller end-user applications, thanks to some compiler flag optimisations suggested by the community.&lt;/li&gt;
&lt;li&gt;We began the process of adding support for Python 3.11 to the Apple and Android support packages. This is the first time BeeWare has been able to contribute prerelease testing to the CPython project. In the process, we &lt;a class="reference external" href="https://github.com/python/cpython/issues/92913"&gt;discovered a small backwards incompatibility&lt;/a&gt;. Baring major incidents, we should be in a position to release BeeWare's support for Python 3.11 on the same day as the official 3.11.0 is finalised.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/Python-support-testbed"&gt;We developed an acceptance test suite for the Apple and Android support packages&lt;/a&gt;. This test suite tests for features in the Python core that have a history of being broken (such as modules in the standard library that have binary components, but have been incorrectly compiled or inadvertently excluded from the build). This test suite isn't yet formally integrated into the build process, but the hope is that it will be in the near future.&lt;/li&gt;
&lt;li&gt;We modified Briefcase so that it is able to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/719"&gt;run the Android emulator on M1 hardware&lt;/a&gt;. This required a major rebuild of the way the Android SDK tooling is managed.&lt;/li&gt;
&lt;li&gt;We made further improvements to the log capture tools on macOS. This ensures that &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/731"&gt;the first few seconds of application logs are reliably captured&lt;/a&gt;, and the &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/742"&gt;log stream is terminated when the app exits&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/744"&gt;We started the introduction of Black as a part of BeeWare's development tooling&lt;/a&gt;. BeeWare's repositories have always enforced code style guidelines, and those code styles are very closely aligned with Black's choices. With Black formally moving out of Beta status at the start of this year, the time has come to start adopting Black as a formal project requirement. For now, Briefcase is the only project that has formally adopted Black, but you can expect this to continue to roll out over the other projects in BeeWare over the coming months.&lt;/li&gt;
&lt;li&gt;We resolved some minor bugs that were present in the 0.3.0dev33 release of Toga. Most important of these was a bug that &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1492"&gt;prevented the BeeWare tutorial running on iOS devices&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many of these changes either began as, or are entirely the work of community members. There are also plenty of smaller PRs, bug fixes, and bug reports that are just as important, but are too numerous to list. A huge thanks to everyone who has contributed to BeeWare during May.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In June, we'll be focussing on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Publishing our roadmap for Q3 and beyond! Now that we have reliable development resources, we're in a position to make public commitments on the future direction of the project.&lt;/li&gt;
&lt;li&gt;Completing the hiring process for another engineer to work on BeeWare full time. This hiring process is underway, but it's not too late to apply if you're interested. Full details of the position &lt;a class="reference external" href="https://boards.greenhouse.io/anaconda/jobs/4211521"&gt;can be found on Greenhouse&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;App Notarization on macOS. This is becoming an increasingly required part of macOS app publishing, as Apple cranks up their security requirements.&lt;/li&gt;
&lt;li&gt;Improving Windows packaging. This includes improving the way the running app presents to the Task Manager, improving log capture, and app signing.&lt;/li&gt;
&lt;li&gt;Improving Linux packaging. This includes addressing some issues with packaging binary dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content></entry><entry><title>Now Hiring!</title><link href="http://beeware.org/es/noticias/zumbido/now-hiring/" rel="alternate"></link><updated>2022-05-09T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:59cca6f0-2c38-3023-812c-81976b099441</id><content type="html">&lt;p&gt;BeeWare is now hiring!&lt;/p&gt;
&lt;p&gt;The position is a full time, Mid- to Senior position. You will be working full time in the Open Source group at Anaconda, on the BeeWare suite of tools. Full details of the position &lt;a class="reference external" href="https://boards.greenhouse.io/anaconda/jobs/4211521"&gt;can be found on Greenhouse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The position calls for an unusual combination of skills. The ideal candidate would have experience building GUI applications (especially mobile) &lt;em&gt;and&lt;/em&gt; Python skills. However, because of the existing state of the Python ecosystem, most Python developers don't have GUI development experience, and most GUI developers don't have extensive Python experience. For that reason, if the position is interesting to you, but you don't have all the &amp;quot;must have&amp;quot; attributes - &lt;em&gt;I would encourage you to apply anyway&lt;/em&gt;. A candidate with no GUI development experience will still considered, as long as they've got a demonstrated history of doing weird and wonderful things with Python. Similarly, a developer with deep GUI experience, but no Python experience, will also be considered.&lt;/p&gt;
&lt;p&gt;The job location requirements are also unusual. The position is remote; the position requires that your working hours need to be compatible with UTC+8. This means candidates from Australia, South East and South Asia will be a natural fit. European candidates will need to be prepared for early morning starts. US/Canadian candidates will need to be prepared for evening work (&lt;em&gt;very&lt;/em&gt; late evenings if you're in CST or EST timezones). Anaconda has the capacity to hire in the UK, Germany, India, Australia, US, and Canada. If you're &lt;em&gt;not&lt;/em&gt; a resident of one of those countries, it &lt;em&gt;may&lt;/em&gt; be possible to hire you, but it will likely require you to operate as a private contractor rather than a salaried employee.&lt;/p&gt;
&lt;p&gt;I'm incredibly excited for what the future holds for BeeWare - if you'd like to come on this journey with me, &lt;a class="reference external" href="https://boards.greenhouse.io/anaconda/jobs/4211521"&gt;please apply&lt;/a&gt; (and tell them Russell sent you)!&lt;/p&gt;
</content></entry><entry><title>April 2022 Status Update</title><link href="http://beeware.org/es/noticias/zumbido/april-2022-status-update/" rel="alternate"></link><updated>2022-05-02T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:0a8031ce-fb11-382e-81f5-5ee8fc7cb028</id><content type="html">&lt;p&gt;One of the benefits of &lt;a class="reference external" href="../exciting-news-for-the-future-of-beeware"&gt;having the support of an organization like Anaconda&lt;/a&gt; is that we now have the time to perform little housekeeping tasks like publishing community updates. As a result, this is the first (of hopefully many) monthly updates letting you know what progress has been made in the BeeWare suite.&lt;/p&gt;
&lt;div class="section" id="what-we-ve-done"&gt;
&lt;h2&gt;What we've done&lt;/h2&gt;
&lt;p&gt;During April:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We've cleared the backlog of pull requests and issue triage. At this point, the only PRs that are open are ones that require updates or changes from the submitters. A lot of stale or duplicated issues have also been closed or consolidated.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/1448"&gt;Webviews on Windows now use the EdgeChromium renderer, rather than the IE11 renderer&lt;/a&gt;. This massively improves the HTML compatibility of web views on Windows.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/1461"&gt;Toga windows now use a &amp;quot;single source of truth&amp;quot; approach&lt;/a&gt;, using the API calls of the underlying GUI platform to determine the title, position and size of a window. This, in turn, allowed for the implementation of APIs that allow you to set the title, position and size of windows on desktop platforms.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;on_exit&lt;/tt&gt; handlers on an App &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1463"&gt;can now be asynchronous co-routines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Toga dialogs that return a result (such as YesNoDialog) now &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1464"&gt;use an asynchronous API&lt;/a&gt;. This is a backwards incompatible change that was required to support dialogs on Android; it also allows us to remove a nasty hack that was needed on iOS. However, we've been able to implement this in such a way that any existing usage that is incompatible with the new required usage will be flagged with a helpful error.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1470"&gt;GTK web view has been improved&lt;/a&gt;, correcting some odd caching behaviour.&lt;/li&gt;
&lt;li&gt;Following the &lt;a class="reference external" href="https://pyscript.net"&gt;announcement of PyScript at PyCon US 2022&lt;/a&gt;, we've been able to &lt;a class="reference external" href="https://github.com/beeware/toga/pull/1475"&gt;resurrect the Web backend for Toga&lt;/a&gt;. This is still in the very early stages - but it's sufficiently advanced that we can run the first 2 tutorials, in both a &amp;quot;server side rendering&amp;quot; and &amp;quot;single page app&amp;quot; format.&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/690"&gt;improved Briefcase's code signing integration on macOS&lt;/a&gt;. This should prevent some errors we've seen when signing apps that contain third-party binary modules&lt;/li&gt;
&lt;li&gt;We've significantly improved validation and error handling when an app name contains &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/698"&gt;non-Latin characters&lt;/a&gt; , &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/697"&gt;punctuation&lt;/a&gt;, or &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/617"&gt;reserved words&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We've added CI checks to &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/700"&gt;ensure that Briefcase is always able to generate a valid signed app bundles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We've &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/704"&gt;improved the output generated by verbose debug output&lt;/a&gt; to improve full environment details . This should make it easier to identify why a command is failing due to unexpected user environments, and to assist in manually reproducing Briefcase's behaviour outside Briefcase.&lt;/li&gt;
&lt;li&gt;We now ensure that &lt;a class="reference external" href="https://github.com/beeware/briefcase/pull/714"&gt;macOS apps are *always* signed&lt;/a&gt;. This is needed because &lt;em&gt;all&lt;/em&gt; apps required at least ad-hoc signing to execute on M1 hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many of these PRs either began as, or are entirely the work of community members. There are also dozens of smaller PRs, bug fixes, and bug reports that are just as important, but are too numerous to list in a post like this. A huge thanks to everyone who has contributed to BeeWare during April.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;In May, we'll be focussing on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updating the support packages for macOS and iOS apps. Apple's transition to M1 hardware means there are new simulator architectures that require support; this, in turn, requires that we adopt Xcode's new XCFramework for the packaging libraries, which requires some fairly major changes to the way the support packages are built.&lt;/li&gt;
&lt;li&gt;Updating the support packages on Android to support Python 3.10.&lt;/li&gt;
&lt;li&gt;Notarization on M1. This is becoming an increasingly required part of macOS app publishing, as Apple cranks up the security requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We're also expecting to start the hiring process in the coming month. We'll provide more details when we can point a full job description. If you think you'd like to make BeeWare your day job (or you know someone who might), now would be a good time to start polishing your resume.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Exciting news for the future of BeeWare</title><link href="http://beeware.org/es/noticias/zumbido/exciting-news-for-the-future-of-beeware/" rel="alternate"></link><updated>2022-04-06T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:2715c7fa-31e0-3092-a26c-8a0326f23d5e</id><content type="html">&lt;p&gt;The biggest challenge for any Open Source project is finding the resources needed to support development - and the BeeWare project is no exception.&lt;/p&gt;
&lt;p&gt;To date, BeeWare has been primarily driven by the efforts of volunteers. We've been able to achieve amazing things with those volunteer efforts, demonstrating that Python is a viable language for GUI development on macOS, Windows, Linux, iOS and Android, as well as providing a proof-of-concept demonstration on Web. However, there are still lots of features that we'd like to add, and lots of ongoing maintenance that needs to be done as operating systems and hardware platforms evolve.&lt;/p&gt;
&lt;p&gt;Over the years, we've been incredibly fortunate to have the financial support of our members. While I'm incredibly grateful for that support, it falls a long way short of even one full-time salary. We've also received grants (such as the PSF grant), and short-term contracts. These grants and contracts have enabled us to add specific (and much needed) features to BeeWare - but they don't provide resources for ongoing development and maintenance.&lt;/p&gt;
&lt;p&gt;However, the brutal truth is that our rate of progress is severely limited by the volunteered resources at our disposal. As a result, I've spent a lot of time over the last few years thinking about how we can fund the work that needs to be done to make BeeWare the go-to solution for GUI development on desktop, mobile, and more - and do so without compromising the Open Source roots of the project.&lt;/p&gt;
&lt;p&gt;I'm incredibly excited to announce that I've found a solution.&lt;/p&gt;
&lt;p&gt;On March 21, I joined Anaconda as a Principal Engineer and Team Lead - and the team I will be leading will be focused 100% on BeeWare.&lt;/p&gt;
&lt;p&gt;Anaconda is no stranger to Open Source. In addition to indirectly funding a number of community efforts through their Anaconda Dividend program, they directly employ people to work on Numba, Dask, Pyston and more. BeeWare will be joining this stable of projects.&lt;/p&gt;
&lt;p&gt;Anaconda is supporting BeeWare in this way because they see the potential for Python as a language for GUI development - especially on mobile platforms. Python has established itself as an incredibly popular language in education, science, business and more - and in all those markets, there is potential to develop apps. By adding mobile platform support and app development to the list of tasks to which Python is already incredibly capable, Anaconda hopes to ensure the long term prospects of Python as a language, as well as ensuring a healthy market for the products they sell commercially.&lt;/p&gt;
&lt;p&gt;BeeWare will continue to be a 100% Open Source project, with all contributions welcome from the community. The only difference is that Anaconda will be directly employing some of the contributors to the project. The conversations I've had with Anaconda's engineering leadership indicates they are acutely aware of the tension that exists between corporate funding and the technical direction of an Open Source project. They've indicated that they want to ensure that BeeWare's technical direction remains independent in both appearance and substance. This includes financial independence - the financial support provided by our members will remain vitally important, as it provides project-level funding for resources such as hosting and promotional materials.&lt;/p&gt;
&lt;p&gt;The related good news is that part of my job title is &amp;quot;Team Lead&amp;quot; - so in the very near future, we'll be looking for people to join me on my team. I'm already working out the details of the team that I'd like to have, so watch this space for hiring announcements.&lt;/p&gt;
&lt;p&gt;Anaconda has a long history of understanding and contributing to both the Python ecosystem and the Open Source community. Adding BeeWare to their stable of supported projects has enormous potential for BeeWare, and the Python ecosystem as a whole. I'm incredibly excited for what the future holds.&lt;/p&gt;
</content></entry><entry><title>Some new ways to discuss BeeWare</title><link href="http://beeware.org/es/noticias/zumbido/some-new-ways-to-discuss-beeware/" rel="alternate"></link><updated>2021-05-01T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:26e75a1e-7f81-398d-9af2-b7a7038aacb4</id><content type="html">&lt;p&gt;Today, the BeeWare project is making 2 changes to the way we organize our community.&lt;/p&gt;
&lt;p&gt;Firstly, we're going to &lt;strong&gt;move our real-time chat community from Gitter to Discord&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we originally set up Gitter, it was a strong option for a chat community - especially one that was focussed on a software project, due to its tight integration with Github. However, over the years, Gitter has undergone multiple changes of ownership, but has remained essentially unchanged - in some cases, it's gotten appreciably worse (their native iOS and Android clients are effectively deprecated). In the meantime, Discord has emerged as a dominant player for community chat. It has a robust mobile client, and really good tools for community moderation, as well as the option of hosting video and voice chats - something we hope to be able to use for coordinating virtual sprints.&lt;/p&gt;
&lt;p&gt;To join the new BeeWare Discord server, &lt;a class="reference external" href="/bee/chat/"&gt;visit this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, we're going to &lt;strong&gt;start using Github Discussions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For many years, we've tried to use Github Issues as a pseudo-forum. There's a lot of similarity between how a forum works and how Github displays and manages issues. Each &amp;quot;issue&amp;quot; is effectively a forum thread, and each comment is a message in that thread. However, there are also some important differences. Issues get closed when they're resolved; forum threads, however, don't necessarily have a resolution. Most importantly, &amp;quot;closing&amp;quot; an issue can look like someone is trying to kill discussion - when all they're really trying to do is keep the list of issues manageable.&lt;/p&gt;
&lt;p&gt;The good news is that Github has noticed the similarity too, and has launched Github Discussions. Discussions offers a familiar &amp;quot;forum&amp;quot; interface, but with the familiar Github message interface, and tight integration with Github Issues and pull requests.&lt;/p&gt;
&lt;p&gt;We've enabled Discussions on all the key BeeWare projects - &lt;a class="reference external" href="https://github.com/beeware/toga/discussions"&gt;Toga&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/briefcase/discussions"&gt;Briefcase&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/discussions"&gt;Rubicon ObjC&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/rubicon-java/discussions"&gt;Rubicon Java&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/colosseum/discussions"&gt;Colosseum&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/beeware/travertino/discussions"&gt;Travertino&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/podium/discussions"&gt;Podium&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Naturally, all of these new community spaces - along with all existing BeeWare spaces - are subject to the &lt;a class="reference external" href="/community/behavior/"&gt;BeeWare Community Code of Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We hope these two changes will make it easier to participate in the BeeWare community. See you there!&lt;/p&gt;
</content></entry><entry><title>Release the Android Bees!</title><link href="http://beeware.org/es/noticias/zumbido/release-the-android-bees/" rel="alternate"></link><updated>2020-07-06T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:cd296415-3dd2-310c-a6ca-01394bcf6b2e</id><content type="html">&lt;p&gt;9 months ago, we &lt;a class="reference external" href="https://beeware.org/news/buzz/beeware-project-awarded-a-psf-education-grant/"&gt;announced that the BeeWare Project was the recipient of a PSF Education Grant&lt;/a&gt;. In late 2019, we &lt;a class="reference external" href="https://beeware.org/news/buzz/we-have-a-contractor-for-our-android-contract/"&gt;choose Asheesh Laroia to do the work&lt;/a&gt;. Today, we're proud to announce that BeeWare's Android support has reached a point where it is ready for mass consumption.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.beeware.org"&gt;The BeeWare tutorial&lt;/a&gt; has been updated to include an Android track. The tutorial walks you through the process of writing your first app, and deploying it - first as a desktop app, and then on your phone. All you need is a Python install; everything else you need is downloaded automatically by the BeeWare tools as part of the development process.&lt;/p&gt;
&lt;p&gt;And, to prove that it's real - we have uploaded Travel Tips to the &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.keith_magee.traveltips"&gt;Google Play Store&lt;/a&gt;. This is a Python app, in the Google Play Store, deployed from &lt;a class="reference external" href="https://github.com/freakboy3742/traveltips"&gt;the same source code&lt;/a&gt; as the version in the &lt;a class="reference external" href="https://apps.apple.com/au/app/travel-tips/id1336372310#?platform=iphone"&gt;iOS App Store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Huge thanks go to Asheesh for all the work he's put into this project. Delivering Android support in BeeWare has required considerable technical skill, attention to detail, and creative hacks; and Asheesh has consistently delivered. Huge thanks also go to the Education Grants Committee of the &lt;a class="reference external" href="https://www.python.org/psf-landing/"&gt;Python Software Foundation&lt;/a&gt; for the faith they placed in BeeWare when they funded this project. In 6 months (while simultaneously negotiating a world pandemic), we've gone from a nothing to a full Android implementation. Without their financial support, this project would still be a dream.&lt;/p&gt;
&lt;p&gt;There's still plenty of work to be done, though. There are still a lot of widgets that need Android implementations, and new widgets that we want to add. We'd like to add support for device features like cameras, GPS and accelerometers. We'd like to make it easier to use binary Python packages like NumPy, Keras, and more. And we'd like to merge the work that we've done into CPython itself.&lt;/p&gt;
&lt;p&gt;All of those are significant projects in themselves, and will require effort comparable to that required to add Android as a supported platform. And so, we're looking for the financial support to make that happen. We're applying for new grants as opportunities arise, but the most helpful source of funds are the ongoing funds that come from memberships. Ongoing funding means we can focus on improving BeeWare, rather than chasing grants. It means being able to hire &lt;em&gt;permanent&lt;/em&gt; staff, rather than offering short term contracts. And it means being able to make long term plans and promises to the community.&lt;/p&gt;
&lt;p&gt;If this project proves anything, it's that money makes things happen. If you're excited by the prospects of Python on mobile platforms, please consider &lt;a class="reference external" href="https://beeware.org/contributing/membership/"&gt;joining the BeeWare Project as a financial member&lt;/a&gt;. Or, if you've got experience with commercialisation of Open Source projects, or any other ideas for how we could  &lt;a class="reference external" href="mailto:contact&amp;#64;beeware.org"&gt;please get in touch&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Python on Android: Its alive!</title><link href="http://beeware.org/es/noticias/zumbido/python-on-android-its-alive/" rel="alternate"></link><updated>2020-02-29T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:34f0ae8d-7fc5-3334-af99-b851ce3f35ae</id><content type="html">&lt;p&gt;For the last couple of months, we've had a contractor (&lt;a class="reference external" href="https://twitter.com/asheeshlaroia"&gt;Asheesh Laroia&lt;/a&gt;) &lt;a class="reference external" href="https://beeware.org/news/buzz/we-have-a-contractor-for-our-android-contract/"&gt;working on fixing Android support in the BeeWare suite of tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've incredibly happy to announce that we've just hit our first major milestone: a working pure-Python application, running on an Android device!&lt;/p&gt;
&lt;iframe width="710" height="400" src="https://www.youtube.com/embed/g2B2wbgVq7s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;This isn't the end of the project - it's just the beginning. There's still lots of fine tuning to be done (especially on the size of the support libraries), and we need to integrate this support into &lt;a class="reference external" href="https://beeware.org/project/projects/tools/briefcase/"&gt;Briefcase&lt;/a&gt; and &lt;a class="reference external" href="https://beeware.org/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, in the meantime, if you're adventurous, you can take Asheesh's work-in-progress for a spin. His &lt;a class="reference external" href="https://github.com/paulproteus/Python-Android-support"&gt;Python Android Support repository&lt;/a&gt; contains the current state of the work, and includes fairly comprehensive instructions for getting started. You'll need to know at least a little bit about native Android programming to make full use of this repository at the moment; but if you want to replicate the results from the video, that repository (and the other repositories it links to) should have everything you need.&lt;/p&gt;
&lt;p&gt;Huge thanks go once again to the &lt;a class="reference external" href="https://www.python.org/psf-landing/"&gt;Python Software Foundation&lt;/a&gt;. Without their financial support, this work would still be on the drawing board. This project is just one of many ways that the PSF uses donations to improve the Python community and ecosystem. If your company uses Python in any capacity, I &lt;em&gt;strongly&lt;/em&gt; encourage you to contribute financially to the PSF so that they can continue to fund worthwhile projects like this.&lt;/p&gt;
&lt;p&gt;Huge thanks also go to Asheesh. Without his remarkable talents, attention to detail, and delight for obscure compiler errors, we wouldn't have made the incredibly fast progress that we've seen.&lt;/p&gt;
&lt;p&gt;Stay tuned for more announcements soon!&lt;/p&gt;
</content></entry><entry><title>We have a contractor for our Android contract!</title><link href="http://beeware.org/es/noticias/zumbido/we-have-a-contractor-for-our-android-contract/" rel="alternate"></link><updated>2019-11-26T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:03ad60c4-6f42-386f-91bb-6339b95c1f5a</id><content type="html">&lt;p&gt;A couple of months ago, we &lt;a class="reference external" href="https://beeware.org/news/buzz/beeware-project-awarded-a-psf-education-grant/"&gt;announced&lt;/a&gt; that the BeeWare project had received a grant from the PSF to improve our support for Android. At that time, we issued a call for contractors to help us complete this work.&lt;/p&gt;
&lt;p&gt;We're very happy to announce that we've now selected a contractor: &lt;strong&gt;Asheesh Laroia&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Asheesh is a &lt;a class="reference external" href="https://pyvideo.org/speaker/asheesh-laroia.html"&gt;regular speaker at Python events&lt;/a&gt;, where he has delved into a range of detailed and complex topics. He also impressed us with the list of unconventional engineering integration projects he's been involved with in a professional and casual capacity.&lt;/p&gt;
&lt;p&gt;When asked why he applied to work with BeeWare on this contract, Asheesh said: &amp;quot;I use an Android phone every day, and I'm honored to be able to help implement the BeeWare vision of using Python to build first-class, native applications.&amp;quot;&lt;/p&gt;
&lt;p&gt;Asheesh will be starting work in mid December, and if all goes well, we should start seeing significant results by mid to late February. If you'd like to keep track of progress, you can &lt;a class="reference external" href="https://twitter.com/pybeeware"&gt;follow BeeWare on Twitter&lt;/a&gt;; we'll also post larger updates on this blog.&lt;/p&gt;
</content></entry><entry><title>BeeWare Project Awarded a PSF Education Grant</title><link href="http://beeware.org/es/noticias/zumbido/beeware-project-awarded-a-psf-education-grant/" rel="alternate"></link><updated>2019-09-25T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:1f414f86-17e3-3fc4-83f7-a14a4934b7f3</id><content type="html">&lt;p&gt;The BeeWare Project wants to make it possible for all Python developers to write native apps for desktop and mobile platforms. We have solid support for most desktop operating systems and iOS, but we know our Android support is lacking. The BeeWare core team knows what needs to be done to address the problem - what we’ve been missing are time and resources.&lt;/p&gt;
&lt;p&gt;Thanks to the PSF Education Grants group, that’s no longer an issue. We’ve been awarded a US$50,000 grant to bring BeeWare’s Android support to a level comparable with our iOS support. We currently don’t have the time to do the work ourselves, so we’re calling for contractors to help us deliver this support.&lt;/p&gt;
&lt;p&gt;This is a paid contract, which we anticipate lasting 3-6 months (depending on the experience of the winning contractor). You don’t have to be based in the US or Europe, either; the opportunity is open to anyone who can meet the requirements of the contract.&lt;/p&gt;
&lt;p&gt;Unfortunately, the task calls for some sophisticated skills, and we’re not in a position to provide extensive mentoring. A successful bid is likely to require some prior experience, and a history with the technologies involved.&lt;/p&gt;
&lt;p&gt;A full &lt;a class="reference external" href="https://docs.google.com/document/d/18O2MDF49dHXDIKXyntfZUnXweXzR2i3jbHwWfHew-sE/edit?usp=sharing"&gt;role description&lt;/a&gt; and &lt;a class="reference external" href="https://docs.google.com/document/d/1IWhGs9C8V2TWcAsWhYvxmzi8slZ_vxncA5nn8LjR6ao/edit?usp=sharing"&gt;scope of work&lt;/a&gt; for the contract is available. To register your interest, please forward your resume and cover email to &lt;a class="reference external" href="mailto:contracts&amp;#64;beeware.org"&gt;contracts&amp;#64;beeware.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We look forward to being able to announce full Android support in the near future!&lt;/p&gt;
</content></entry><entry><title>2018 Google Summer of Code - VOC Optimization</title><link href="http://beeware.org/es/noticias/zumbido/2018-google-summer-of-code-final-report-patience-shyu/" rel="alternate"></link><updated>2018-08-14T00:00:00Z</updated><author><name>Patience Shyu</name></author><id>urn:uuid:5b1f869d-2249-3c97-89f9-0c8fcf3f1338</id><content type="html">&lt;p&gt;Google Summer of Code is coming to an end. I've spent the summer working on optimizing the
&lt;a class="reference external" href="/project/projects/bridges/voc/"&gt;VOC compiler&lt;/a&gt;, and I’m super excited to share the results.&lt;/p&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;There are a couple of ways to evaluate the performance improvement from my project.&lt;/p&gt;
&lt;div class="section" id="microbenchmarks"&gt;
&lt;h3&gt;Microbenchmarks&lt;/h3&gt;
&lt;p&gt;Firstly, we introduced a &lt;a class="reference external" href="https://github.com/beeware/voc/blob/master/tests/microbenchmarks.py"&gt;microbenchmarking suite&lt;/a&gt;. Each microbenchmark is a small piece
of Python code that tests a single and specific Python construct, or datatype, or control flow.
The benchmarking infrastructure itself is crude (essentially it just tells you the total amount
of processor time it took to run, with no fancy statistics) but it has been extremely useful to
me while working on performance features to verify performance gain.&lt;/p&gt;
&lt;p&gt;The idea is that the benchmarking suite is not to be run as part of the full test suite,
but rather as needed and manually whenever an optimization is implemented. It also provides a way to
check and prevent performance regression, especially on the &amp;quot;optimized&amp;quot; parts of VOC. While it
doesn't really make sense to record specific numbers, as they will always vary from machine to machine,
it should be reasonably easy to compare two versions of VOC. Benchmark numbers are included on each
optimization-related PR I've worked on this summer (see PR log below), and I hope that more benchmarks
will be added as more performance efforts are carried out in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pystone"&gt;
&lt;h3&gt;Pystone&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/blob/master/tests/benchmarks/pystone.py"&gt;Pystone&lt;/a&gt; is a Python &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dhrystone"&gt;Dhrystone&lt;/a&gt;, a standard benchmark for testing the performance of Python on a machine.
Here are the before and after results on my machine:&lt;/p&gt;
&lt;p&gt;May 10th, 2018:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ python setup.py test -s tests.test_pystone
test_pystone (tests.test_pystone.PystoneTest) ...
Pystone(1.2) time for 50000 passes = 101.833
This machine benchmarks at 490.998 pystones/second&lt;/p&gt;
&lt;p&gt;$ python setup.py test -s tests.test_pystone
test_pystone (tests.test_pystone.PystoneTest) ...
Pystone(1.2) time for 50000 passes = 101.298
This machine benchmarks at 493.595 pystones/second&lt;/p&gt;
&lt;p&gt;$ python setup.py test -s tests.test_pystone
test_pystone (tests.test_pystone.PystoneTest) ...
Pystone(1.2) time for 50000 passes = 102.247
This machine benchmarks at 489.014 pystones/second&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On current master (Aug 14th, 2018):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ python setup.py test -s tests.test_pystone
test_pystone (tests.test_pystone.PystoneTest) ...
Pystone(1.2) time for 50000 passes = 11.2300
This machine benchmarks at 4452.37 pystones/second&lt;/p&gt;
&lt;p&gt;$ python setup.py test -s tests.test_pystone
test_pystone (tests.test_pystone.PystoneTest) ...
Pystone(1.2) time for 50000 passes = 10.9833
This machine benchmarks at 4552.36 pystones/second&lt;/p&gt;
&lt;p&gt;$ python setup.py test -s tests.test_pystone
pystone (tests.test_pystone.PystoneTest) ...
Pystone(1.2) time for 50000 passes = 10.9498
This machine benchmarks at 4566.29 pystones/second&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Some things that I learned about VOC while working on this project:&lt;/p&gt;
&lt;p&gt;1. Object creation in the JVM is expensive. This definitely does not mean that the VOC user
writing Python should think about minimizing the number of objects that she creates, but rather
that any time we can non-trivially reduce the number of objects created during bytecode
transpilation or in VOC-defined function calls, we can expect to see a huge performance boost.
&lt;a class="reference external" href="https://github.com/beeware/voc/pull/825"&gt;Integer&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/beeware/voc/pull/830"&gt;boolean preallocation&lt;/a&gt;, which is about reusing objects that have already been created,
was one of the most significant improvements we made this summer.&lt;/p&gt;
&lt;p&gt;2. Method calls in VOC are expensive. This is essentially due to the process of invoking a callable:
you have to check that the method is defined on the object, then construct it (read: object creation!),
and check the arguments, before it can actually be called. (This is done using reflection, which is super
interesting and confusing in itself.) And this is the reason why &lt;a class="reference external" href="https://github.com/beeware/voc/pull/875"&gt;refactoring the Python comparison functions&lt;/a&gt;
made such a big performance impact, because we were able to circumvent this process.&lt;/p&gt;
&lt;p&gt;3. Exception-heavy code is expensive. Again, this is not to say that the programmer is on the hook for being
frugal when throwing exceptions, but that VOC benefits greatly by avoiding the use of exceptions internally
except when strictly necessary. For instance, Python uses StopIteration exceptions to signal the end of a for loop,
and they quickly rack up when you have nested loops (everything is ultimately related to object creation!). That was
the motivation for the &lt;a class="reference external" href="https://github.com/beeware/voc/pull/881"&gt;nested loops optimization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If I may be a bit more reflective here, one of the a-ha! moments I had this summer was realizing that to really
optimize something, you have to understand where its biggest problems are first. I remember pitching to Russ at
the start of the summer things like loop unrolling, constant folding, even converting to SSA-form (you know, stuff I
heard about optimzation in my compilers class) and he was saying to me, think simpler. While working on my project,
I used a &lt;a class="reference external" href="https://www.ej-technologies.com/products/jprofiler/overview.html"&gt;profiler&lt;/a&gt; to understand exactly which parts of VOC were slow, and that information drove the changes we
implemented. I think it worked out pretty well!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-work"&gt;
&lt;h2&gt;Future Work&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Minimize boxing of primitive types like String and Int. As VOC is written half in Python, half in Java, a single integer can be found in various representations on its way through the compiler -- as a Python object, unboxed to a primitive Java int, then packaged back up to a Python object. This problem was (somewhat incoherently) addressed in my proposal, but ultimately we couldn't come up with a good abstraction to support it.&lt;/li&gt;
&lt;li&gt;Build a peephole optimizer. &lt;a class="reference external" href="https://github.com/python/cpython/blob/master/Python/peephole.c"&gt;CPython's peephole optimizer&lt;/a&gt; scans generated bytecode to identify sequences of bytecode that can be optimized, VOC could benefit from this too.&lt;/li&gt;
&lt;li&gt;Hook up more benchmarks, which serve as both proof of the kinds of programs VOC can currently compile and areas ripe for performance improvement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you&lt;/h2&gt;
&lt;p&gt;I will wrap this up by giving big thanks to &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russ&lt;/a&gt;, my mentor. The time you spent helping
me form my ideas, patiently answering my questions and reviewing my work was invaluable
to me. It couldn't have been easy keeping up with what I was doing especially since I
started improvising halfway through the summer. I am so grateful for your help, thank you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pr-log-in-chronological-order"&gt;
&lt;h2&gt;PR Log (in chronological order)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/772"&gt;Original Proposal (with weekly status updates)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="optimization-related-features"&gt;
&lt;h3&gt;Optimization-related Features&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/824"&gt;Introduce Performance Benchmarking Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/825"&gt;Small Integer Preallocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/830"&gt;Boolean Preallocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/839"&gt;Module Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/851"&gt;Hook up Pystone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/864"&gt;Optimize Zero Argument Function Calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/869"&gt;Remove Code Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/875"&gt;Comparisons Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/881"&gt;Loop optimization by reusing StopIterations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/893"&gt;String cleanup/optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/899"&gt;Dictionary access optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/902"&gt;Create functions only when needed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bug-fixes-and-miscellaneous"&gt;
&lt;h3&gt;Bug Fixes and Miscellaneous&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/837"&gt;Fix Method repr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/846"&gt;Fix custom substitutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/852"&gt;Fix List Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/865"&gt;Remove Unnecessary Instruction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/884"&gt;Fix __setitem__ error messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/877"&gt;Fix contains/not contains bugs and refactor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/883"&gt;Add tests for problematic exception raising&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/887"&gt;Add test for with + exception combo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/889"&gt;Add test for wrong iter error message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/891"&gt;Add tests for globals bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/894"&gt;Remove unnecessary type casts and clean up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/904"&gt;Add test for problematic builtin function call&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/905"&gt;Introduce org/python/Object type tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>2018 Google Summer of Code - Implement asyncio support in VOC</title><link href="http://beeware.org/es/noticias/zumbido/2018-google-summer-of-code-final-report-yap-boon-peng/" rel="alternate"></link><updated>2018-08-11T00:00:00Z</updated><author><name>Yap Boon Peng</name></author><id>urn:uuid:a73e0638-7c71-3d69-accd-857dc8412f96</id><content type="html">&lt;p&gt;In the blink of an eye, Google Summer of Code (GSoC) 2018 has come to an end. During the three months long coding period, I have contributed several patches in VOC repository of BeeWare, all working towards the ultimate end goal of running &lt;cite&gt;asyncio&lt;/cite&gt; module in VOC. In this blog post (which is my first actual blog post by the way 😄), I will document what I have done so far, why I couldn't make it to the end goal (yea, unfortunately I couldn't get &lt;cite&gt;asyncio&lt;/cite&gt; to work at the end of GSoC 2018), and what's left that needs to be done in order to achieve the end goal (or at least make part of &lt;cite&gt;asyncio&lt;/cite&gt; work).&lt;/p&gt;
&lt;div class="section" id="building-foundation"&gt;
&lt;h2&gt;Building Foundation&lt;/h2&gt;
&lt;p&gt;The first error that the transpiler throws when attempting to compile &lt;cite&gt;asyncio&lt;/cite&gt; module was &amp;quot;No handler for &lt;cite&gt;YieldFrom&lt;/cite&gt;&amp;quot;, so it makes sense to start from this issue first.&lt;/p&gt;
&lt;p&gt;Another feature related to generator was &lt;cite&gt;Yield&lt;/cite&gt; expression. Before GSoC 2018, &lt;cite&gt;Yield&lt;/cite&gt; statement in VOC was just a statement, meaning &lt;cite&gt;yield&lt;/cite&gt; could not be used as expression. Generator methods such as &lt;cite&gt;generator.send&lt;/cite&gt;, &lt;cite&gt;generator.throw&lt;/cite&gt; and &lt;cite&gt;generator.close&lt;/cite&gt; were not supported as well. Those features are what make asynchronous programming with generator possible, so I spent a few weeks to extend generator functionality in VOC, laying down the path to &lt;cite&gt;asyncio&lt;/cite&gt; module.&lt;/p&gt;
&lt;p&gt;PRs related to generator are listed below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/821"&gt;PR #821&lt;/a&gt; : Added support for Yield from statement (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/823"&gt;PR #823&lt;/a&gt; : Added generator send method (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/831"&gt;PR #831&lt;/a&gt; : Support exceptions handling in generator (merged)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="nonlocal-statement"&gt;
&lt;h2&gt;Nonlocal Statement&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;Nonlocal&lt;/cite&gt; statement was another syntax not supported by VOC. After completion of generator's features, implementing this is the next step towards compiling &lt;cite&gt;asyncio&lt;/cite&gt; module.&lt;/p&gt;
&lt;p&gt;Implementing this feature took about 3 ~ 4 weeks as this is not as trivial as it seems. I took several approaches on this, while some of them do work, the code is not pretty and &lt;cite&gt;hacky&lt;/cite&gt;, which could come back to bite me/other contributors in the long run. After many discussions with Russell, I refactored the closure mechanism in VOC and took a much cleaner approach in &lt;cite&gt;nonlocal&lt;/cite&gt; implementations. I must admit that I took some short-cuts for the sake of &amp;quot;making nonlocal works&amp;quot; in the process of implementing &lt;cite&gt;nonlocal&lt;/cite&gt; statement, resulting in poor design and messy codes. Many thanks to Russell, who helped me to improve my coding style and told me not to be discouraged when I'm stuck. 😄&lt;/p&gt;
&lt;p&gt;Related PRs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/854"&gt;PR #854&lt;/a&gt; : Nonlocal statement support (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/873"&gt;PR #873&lt;/a&gt; : Added closure related test cases (merged)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-collections-module"&gt;
&lt;h2&gt;The Collections Module&lt;/h2&gt;
&lt;p&gt;Next item on my hit list was pure Java implementations of the &lt;cite&gt;collections&lt;/cite&gt; module. &lt;cite&gt;asyncio&lt;/cite&gt; module depends on 3 data structures from &lt;cite&gt;collections&lt;/cite&gt;, namely &lt;cite&gt;defauldict&lt;/cite&gt;, &lt;cite&gt;Deque&lt;/cite&gt; and &lt;cite&gt;OrderedDict&lt;/cite&gt;. Two of them (&lt;cite&gt;defaultdict&lt;/cite&gt; and &lt;cite&gt;Deque&lt;/cite&gt;) are implemented in C in CPython, plus they have good analog in Java, so it makes senses to implement the module in Java. Porting &lt;cite&gt;defauldict&lt;/cite&gt;, &lt;cite&gt;Deque&lt;/cite&gt; and &lt;cite&gt;OrderedDict&lt;/cite&gt; to Java in VOC is relatively straight-forward, taking about 1.5 weeks to complete.&lt;/p&gt;
&lt;p&gt;Related PRs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/874"&gt;PR #874&lt;/a&gt; : Implement collections.defauldict (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/896"&gt;PR #896&lt;/a&gt; : Implements collections.Deque (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/897"&gt;PR #897&lt;/a&gt; : Implements collections.OrderedDict` (merged)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="other-prs-submitted-during-gsoc-2018"&gt;
&lt;h2&gt;Other PRs submitted during GSoC 2018&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/817"&gt;PR #817&lt;/a&gt; : Added coroutine related exception class [WIP] (closed due to not needed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/836"&gt;PR #836&lt;/a&gt; : Changed Bool construction to use getBool instead (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/847"&gt;PR #847&lt;/a&gt; : Add custom exceptions test cases (closed due to more comprehensive handling in &lt;a class="reference external" href="https://github.com/beeware/voc/pull/844"&gt;PR #844&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/849"&gt;PR #849&lt;/a&gt; : Fixed Unknown constant type &amp;lt;class 'frozenset'&amp;gt; in function definition (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/858"&gt;PR #858&lt;/a&gt; : Added test case for &lt;a class="reference external" href="https://github.com/beeware/voc/issues/857"&gt;Issue #857&lt;/a&gt; (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/860"&gt;PR #860&lt;/a&gt; : Added test case for &lt;a class="reference external" href="https://github.com/beeware/voc/issues/859"&gt;Issue #859&lt;/a&gt; (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/862"&gt;PR #862&lt;/a&gt; : Added test case for &lt;a class="reference external" href="https://github.com/beeware/voc/issues/861"&gt;Issue #861&lt;/a&gt; (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/867"&gt;PR #867&lt;/a&gt; : Fixed &lt;a class="reference external" href="https://github.com/beeware/voc/issues/866"&gt;Issue #866&lt;/a&gt; RunTimeError when generator is nested in more than 1 level of function definition (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/868"&gt;PR #868&lt;/a&gt; : Fixed &lt;a class="reference external" href="https://github.com/beeware/voc/issues/861"&gt;Issue #861&lt;/a&gt; Redefining nested function from other function overrides original nested function (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/879"&gt;PR #879&lt;/a&gt; : Fixed Incompatible Stack Height caused by expression statement (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/901"&gt;PR #901&lt;/a&gt; : Added test case for &lt;a class="reference external" href="https://github.com/beeware/voc/issues/900"&gt;Issue #900&lt;/a&gt; (merged)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/pull/788"&gt;PR #788&lt;/a&gt; : Implements asyncio.coroutines [WIP] (open, the dream 😎)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="issues-submitted-during-gsoc-2018"&gt;
&lt;h2&gt;Issues submitted during GSoC 2018&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/861"&gt;Issue #861&lt;/a&gt; : Redefining nested function from other function overrides original nested function (fixed in &lt;a class="reference external" href="https://github.com/beeware/voc/pull/868"&gt;PR #868&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/866"&gt;Issue #866&lt;/a&gt; : RunTimeError when generator is nested in more than 1 level of function definition (fixed in &lt;a class="reference external" href="https://github.com/beeware/voc/pull/867"&gt;PR #867&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/828"&gt;Issue #828&lt;/a&gt; : Finally block of generator is not executed during garbage collection (open)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/857"&gt;Issue #857&lt;/a&gt; : Complex datatype in set cause java.lang.StackOverflowError (open)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/859"&gt;Issue #859&lt;/a&gt; : Duplicated values of equivalent but different data types in set (open)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/900"&gt;Issue #900&lt;/a&gt; : Exception in nested try-catch suite is 'leaked' to another enclosing try-catch suite (open)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/voc/issues/827"&gt;Issue #827&lt;/a&gt; : Maps reserved Java keywords to Python built-in function/method call (closed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="towards-the-ultimate-end-goal"&gt;
&lt;h2&gt;Towards The Ultimate End Goal&lt;/h2&gt;
&lt;p&gt;Unfortunately, three months of GSoC coding period was not enough for me to bring &lt;cite&gt;asyncio&lt;/cite&gt; module to VOC. The nonlocal statement implementation was the biggest blocker for me mainly because I didn't think thoroughly before writing code. If I were to plan carefully and lay out a general coding direction, I would've completed it in much shorter time and have time for other implementations. An advice for the aspiring and upcoming GSoC-er, don't rush your code, make sure you know 100% about what you're doing before diving into the codes.&lt;/p&gt;
&lt;p&gt;With that said, following are the list of modules to be implemented/ported to Java before &lt;cite&gt;asyncio&lt;/cite&gt; will work in VOC:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;socket&lt;/cite&gt; module (a bit tricky since Java doesn't support Unix domain socket natively)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;selectors&lt;/cite&gt; module (high level I/O operations)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;threading&lt;/cite&gt; module (might be easier to implement this first since threading in Python is an emulation of Java's Thread)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;time&lt;/cite&gt; module (partially implemented in VOC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Huge thanks to my mentor, Russell Keith-Magee for accepting my proposal, providing guidance and encouraging me when things didn't go as intended. It is truly an honor to be a part of the BeeWare community. I had a blast contributing to BeeWare project, and I'm sure I will stick around as a regular contributor.
Also shout out to the BeeWare community for answering my queries and reviewing my pull requests. 😄&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Proyecto destacado: Colosseum</title><link href="http://beeware.org/es/noticias/zumbido/proyecto-destacado-colosseum/" rel="alternate"></link><updated>2017-10-06T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:f22e59e5-ed97-3801-bee3-01bfa5768bb5</id><content type="html">&lt;p&gt;&lt;em&gt;Este artículo fue publicado originalmente en la lista de correo de Entusiastas BeeWare. Si deseas recibir actualizaciones periódicas sobre el proyecto BeeWare, ¿Por qué no&lt;/em&gt; &lt;a class="reference external" href="/community/keep-informed/"&gt;suscribirse&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Cuando diseñas una aplicación de interfaz gráfica, ya sea para escritorio, dispositivos móviles o navegador, una de las tareas más fundamentales es describir cómo colocar widgets en la pantalla. La mayoría de los kits de herramientas de widgets usarán un modelo de empaquetamiento de cuadrícula o caja de algún tipo para resolver este problema. Estos modelos tienden a ser relativamente fáciles al comienzo, pero se desmoronan rápidamente cuando tienes necesidades complejas de diseño o cuando tienes diseños que necesitan adaptarse a diferentes tamaños de pantalla.&lt;/p&gt;
&lt;p&gt;En lugar de inventar un nuevo modelo de cuadrícula o de caja, el kit de herramientas del widget &lt;a class="reference external" href="https://toga.readthedocs.io"&gt;Toga&lt;/a&gt; widget toolkit adopta un enfoque diferente, utilizando un esquema conocido para diseñar contenido: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets"&gt;Cascading Style Sheets&lt;/a&gt;, o CSS. Aunque CSS es más conocido por especificar el diseño en las páginas web, no hay nada intrínsecamente específico de la web al respecto. Al final del día, es un sistema para describir el diseño de una colección jerárquica de nodos de contenido. Sin embargo, hasta la fecha, cada implementación de CSS está vinculada a un navegador, por lo que la percepción es que CSS es un estándar específico del navegador.&lt;/p&gt;
&lt;p&gt;Ahí es donde entra &lt;a class="reference external" href="https://github.com/beeware/colosseum"&gt;Colosseum&lt;/a&gt;. Colosseum es una implementación independiente del navegador de un motor de renderizado CSS. Toma un árbol de &amp;quot;nodos&amp;quot; de contenido, como un DOM de un documento HTML y aplica instrucciones de diseño CSS para diseñar esos nodos como cuadros en la pantalla. En el caso de Toga, en lugar de diseñar los elementos &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; y &lt;tt class="docutils literal"&gt;&amp;lt;span&amp;gt;&lt;/tt&gt;, diseñas objetos Box y Button. Esto le permite especificar diseños adaptativos increíblemente complejos para aplicaciones Toga.&lt;/p&gt;
&lt;p&gt;Pero Colosseum como proyecto tiene muchos otros posibles usos. Se puede usar en cualquier lugar donde exista la necesidad de describir el diseño &lt;em&gt;fuera&lt;/em&gt; del contexto de un navegador. Por ejemplo, Colosseum podría ser la piedra angular de un renderizador de HTML a PDF &lt;em&gt;que no requiere&lt;/em&gt; el uso de un navegador. También podría usarse como una librería de pruebas e implementación de referencia para la especificación CSS en sí misma, proporcionando una forma ligera de codificar y probar los cambios propuestos a la especificación.&lt;/p&gt;
&lt;p&gt;La implementación actual se basa en el proyecto de Facebook &lt;a class="reference external" href="https://github.com/facebook/yoga"&gt;yoga&lt;/a&gt;: originalmente era un código portado de JavaScript a Python línea a línea. Sin embargo, yoga solo implementa la sección de Flexbox de la especificación CSS3.&lt;/p&gt;
&lt;p&gt;Esta semana, comenzamos un gran proyecto: reescribir Colosseum para que sea un motor de CSS totalmente compatible. El trabajo hasta ahora se puede encontrar en la rama globo del repositorio Colosseum en Github. El primer objetivo es el cumplimiento de CSS2.1, con una implementación del modelo de caja de CSS tradicional y el diseño de flujo. Una vez que tengamos una implementación razonable de eso, buscaremos agregar diseños Grid y FlexBox desde el conjunto de especificaciones CSS3.&lt;/p&gt;
&lt;p&gt;Esto es obviamente un trabajo grande. &lt;a class="reference external" href="https://www.w3.org/TR/CSS/#css-levels"&gt;CSS es una gran especificación&lt;/a&gt;, por lo que hay mucho trabajo por hacer, ¡pero eso también significa que hay muchos lugares para contribuir! Elije un párrafo de la especificación CSS, construye algunos casos de prueba que demuestren los casos descritos en ese párrafo y envía un parche que implemente ese comportamiento!&lt;/p&gt;
&lt;p&gt;Esto resalta por que tu apoyo financiero es muy importante. Si bien &lt;em&gt;podríamos&lt;/em&gt;  hacer esto completamente con un esfuerzo voluntario, vamos a progresar mucho más rápido si un pequeño grupo de personas pudiera enfocarse en este proyecto de tiempo completo. El apoyo financiero permitiría aumentar significativamente la velocidad de desarrollo de Colosseum y el resto de la suite BeeWare.&lt;/p&gt;
&lt;p&gt;Si deseas que Colosseum y el resto de BeeWare se desarrollen hasta el punto en que puedan utilizarse para aplicaciones comerciales, considera apoyar a BeeWare financieramente. Y si tienes alguna idea para fuentes de financiación potenciales más grandes, por favor &lt;a class="reference external" href="mailto:russell&amp;#64;keith-magee.com"&gt;ponte en contacto&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>2017 Google Summer of Code - Portar Cricket a Toga, en lugar de Tkinter</title><link href="http://beeware.org/es/noticias/zumbido/2017-google-summer-of-code-informe-final-dayanne-fernandes/" rel="alternate"></link><updated>2017-08-25T00:00:00Z</updated><author><name>Dayanne Fernandes</name></author><id>urn:uuid:0ff8a1e8-e78b-37d7-a7aa-c4aae3da494a</id><content type="html">&lt;p&gt;Después de casi 4 meses de trabajo en &lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt; 2017, finalmente estoy completando mi propuesta. Cada migración de widget y cada commit / PR / Issues / discusión con mis mentores sobre &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt;, &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; y &lt;a class="reference external" href="/project/projects/bridges/rubicon/"&gt;rubicon-objc&lt;/a&gt; fueron detallados en el &lt;a class="reference external" href="https://github.com/beeware/cricket/issues/58"&gt;Issue 58&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="comer-su-propia-comida-para-perros"&gt;
&lt;h2&gt;&amp;quot;Comer su propia comida para perros&amp;quot;&lt;/h2&gt;
&lt;p&gt;La mejor manera de demostrar que un producto es confiable para los clientes es usarlo. Por lo tanto, la forma de demostrar que &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; es una herramienta eficaz para construir una interfaz gráfica de usuario es construir una aplicación completa que la utilice.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt; es una herramienta gráfica que le ayuda a ejecutar sus suites de prueba. Su versión actual se implementa utilizando &lt;a class="reference external" href="https://docs.python.org/2/library/tkinter.html"&gt;Tkinter&lt;/a&gt; como el marco de la interfaz gráfica principal. Entonces, ¿por qué no probar &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; dentro de otro producto de &lt;a class="reference external" href="/es/"&gt;BeeWare&lt;/a&gt;? Eso es lo que he logrado durante mi trabajo de GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resultados"&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;La propuesta se centra no sólo en el puerto de &lt;a class="reference external" href="https://docs.python.org/2/library/tkinter.html"&gt;Tkinter&lt;/a&gt; a &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;, sino en la asignación de los widgets necesarios para una aplicación real utilizando &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;. Para ayudarme a mapear esto he estudiado más sobre &lt;a class="reference external" href="https://docs.python.org/2/library/tkinter.html"&gt;Tkinter&lt;/a&gt;, &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;, &lt;a class="reference external" href="/es/proyecto/proyectos/librerias/colosseum/"&gt;Colosseum&lt;/a&gt;, &lt;a class="reference external" href="/project/projects/bridges/rubicon/"&gt;rubicon-objc&lt;/a&gt;, &lt;a class="reference external" href="https://developer.apple.com/documentation/objectivec"&gt;Objective-C&lt;/a&gt;, &lt;a class="reference external" href="http://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Cocoa.html"&gt;Cocoa&lt;/a&gt; y &lt;a class="reference external" href="https://www.w3.org/Style/CSS/"&gt;CSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;El trabajo que hice durante GSoC se envió a través del &lt;a class="reference external" href="https://github.com/beeware/cricket/pull/65"&gt;PR 65&lt;/a&gt;, el informe en el &lt;a class="reference external" href="https://github.com/beeware/cricket/issues/58"&gt;Issue 58&lt;/a&gt; y la demostración final se puede ver en este &lt;a class="reference external" href="https://youtu.be/5kz_CmQYFYE"&gt;link&lt;/a&gt;. Había widgets utilizados en &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt; que no estaban listos todavía en &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;, por lo que era necesario hacer algunas mejoras en &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; para que pudiera usarlas en &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt;. En resumen, aquí hay algunos PR que contribuí para hacer mi trabajo en &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;PR abierto enviado a &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/201"&gt;PR 201&lt;/a&gt; : [Core][Cocoa] Refactoring of the Tree widget&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PRs emergidos enviados &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/112"&gt;PR 112&lt;/a&gt; : [Core][Cocoa] Enable/disable state for buttons, solved &lt;a class="reference external" href="https://github.com/beeware/toga/issues/91"&gt;Issue 91&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/170"&gt;PR 170&lt;/a&gt; : [Cocoa] Content and retry status for stack trace dialog&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/172"&gt;PR 172&lt;/a&gt; : [Cocoa] Window resize&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/173"&gt;PR 173&lt;/a&gt; : [Core][Cocoa] Button color&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/174"&gt;PR 174&lt;/a&gt; : [Doc] Examples folder and button features example&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/178"&gt;PR 178&lt;/a&gt; : [Doc] Fix tutorial 2 setup&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/180"&gt;PR 180&lt;/a&gt; : [Doc] Update &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; widgets roadmap&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/182"&gt;PR 182&lt;/a&gt; : [Cocoa] Update the label of the Stack trace button for critical dialog&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/184"&gt;PR 184&lt;/a&gt; : [Core][Cocoa] Hide/show boxes widget&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/188"&gt;PR 188&lt;/a&gt; : [Cocoa] Fix error on MultilineTextInput widget, solved &lt;a class="reference external" href="https://github.com/beeware/toga/issues/187"&gt;Issue 187&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/204"&gt;PR 204&lt;/a&gt; : [Core][Cocoa] Clear method to MultilineTextInput widget, solved &lt;a class="reference external" href="https://github.com/beeware/toga/issues/203"&gt;Issue 203&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/206"&gt;PR 206&lt;/a&gt; : [Core][Cocoa] Readonly and placeholder for MultilineTextInput widget&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/pull/208"&gt;PR 208&lt;/a&gt; : [Cocoa] Fix apply style to a SplitContainer widget, solved &lt;a class="reference external" href="https://github.com/beeware/toga/issues/207"&gt;Issue 207&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PRs emergidos enviados &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/cricket/pull/60"&gt;PR 60&lt;/a&gt; : Fix test coverage, solved &lt;a class="reference external" href="https://github.com/beeware/cricket/issues/59"&gt;Issue 59&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PRs emergidos enviados &lt;a class="reference external" href="/project/projects/bridges/rubicon/"&gt;rubicon-objc&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/rubicon-objc/pull/34"&gt;PR 34&lt;/a&gt; : [Doc] Add reference to NSObject&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiquetes abiertos enviados a &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/175"&gt;Issue 175&lt;/a&gt; : [Core] Add more properties for Label and Font widgets&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/176"&gt;Issue 176&lt;/a&gt; : [Core] Add &amp;quot;rehint()&amp;quot; on the background of the widget after changing font size&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/186"&gt;Issue 186&lt;/a&gt; : [Core] Set initial position of the divisor of a SplitContainer&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/197"&gt;Issue 197&lt;/a&gt; : [Core] Get the id of the selected Tab View on the OptionContainer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiquetes cerrados en &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/167"&gt;Issue 167&lt;/a&gt; : [Cocoa] Addition of a SplitContainer on a Box doesn't show the SplitContainer, was fixed by &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/168"&gt;Issue 168&lt;/a&gt; : [Cocoa] Addition of 2 boxes on an OptionContainer emits Rubicon's error, was fixed by &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/169"&gt;Issue 169&lt;/a&gt; : [Cocoa] Addition of 2 empty boxes on an OptionContainer emits error from &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; Cocoa platform, was fixed by &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/181"&gt;Issue 181&lt;/a&gt; : [Core][Cocoa] &amp;quot;Hide&amp;quot; option for widgets, was solved by me&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/187"&gt;Issue 187&lt;/a&gt; : [Cocoa] Errors on MultilineTextInput, was fixed by me&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/189"&gt;Issue 189&lt;/a&gt; : [Cocoa] ProgressBar doesn't appears in a Box, was fixed by &lt;a class="reference external" href="https://github.com/Ocupe"&gt;Jonas Schell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/194"&gt;Issue 194&lt;/a&gt; : [Cocoa] The frame of the MultilineTextInput doesn't appear, was fixed by &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/195"&gt;Issue 195&lt;/a&gt; : [Cocoa] ProgressBar doesn't appear inside of a Box oriented by row, was fixed by &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/196"&gt;Issue 196&lt;/a&gt; : [Cocoa] Set max value and value on a ProgressBar doesn't make any effect on the layout, was fixed by &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/203"&gt;Issue 203&lt;/a&gt; : [Core][Cocoa] Clear text on MultilineTextInput widget, was solved by me&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/207"&gt;Issue 207&lt;/a&gt; : [Cocoa] Set SplitContainer height doesn't update its size, was solved by me&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiquetes cerrados que no reporté pero que resolví en &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/91"&gt;Issue 91&lt;/a&gt; : API to disable buttons?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/toga/issues/205"&gt;Issue 205&lt;/a&gt; : adding MultiviewTextInput results in TypeError&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiquete cerrado que reporté a &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/cricket/issues/59"&gt;Issue 59&lt;/a&gt; : Run selected doesn't count/ runs every test selected in a test module, was fixed by me&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiquete abierto que reporté a &lt;a class="reference external" href="/project/projects/bridges/rubicon/"&gt;rubicon-objc&lt;/a&gt; &lt;a class="reference external" href="https://github.com/ojii"&gt;Jonas Obrist&lt;/a&gt; repository:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ojii/rubicon-objc/issues/1"&gt;Issue 1&lt;/a&gt; : Seg Fault when iterate through a NSIndexSet using block notation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="planes-futuros"&gt;
&lt;h2&gt;Planes futuros&lt;/h2&gt;
&lt;p&gt;Hay algunas características en &lt;a class="reference external" href="/project/projects/tools/cricket/"&gt;Cricket&lt;/a&gt; que quiero ayudar a desarrollar en un futuro próximo, por ejemplo:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Un botón para actualizar todo el árbol de pruebas&lt;/li&gt;
&lt;li&gt;Configuración de Cricket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además, hay algunos problemas que quedaron después de la migración a &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;. Estos problemas se arreglarán en &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; en un futuro próximo, por ejemplo:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Una brecha entre la salida y los cuadros de error cuando no hay mensaje de salida&lt;/li&gt;
&lt;li&gt;Ejecutar una prueba si el usuario haga clic en ella&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Realmente creo que &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt; será el framework oficial en Python para construir GUI para aplicaciones multi-plataforma, así que seguiré contribuyendo a este proyecto porque quiero usar en todas las aplicaciones que necesitaría una GUI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consideraciones-finales"&gt;
&lt;h2&gt;Consideraciones finales&lt;/h2&gt;
&lt;p&gt;Me gustaría agradecer a mis mentores &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt; y &lt;a class="reference external" href="https://github.com/eliasdorneles"&gt;Elias Dorneles&lt;/a&gt; por guíarme y ayudarme tanto durante este período. La oportunidad de ser parte de esta comunidad fue un gran honor para mí, muchas gracias por aceptarme en este programa &lt;a class="reference external" href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;. Además, quiero agradecer a &lt;a class="reference external" href="https://github.com/phildini"&gt;Philip James&lt;/a&gt; que hizo algunas reseñas en mis PRs y &lt;a class="reference external" href="https://github.com/Ocupe"&gt;Jonas Schell&lt;/a&gt; quienes arreglaron un tema que envié a &lt;a class="reference external" href="/project/projects/libraries/toga/"&gt;Toga&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>2017 Google Summer of Code - Mejoras en Batavia</title><link href="http://beeware.org/es/noticias/zumbido/2017-google-summer-of-code-informe-final-adam-boniecki/" rel="alternate"></link><updated>2017-08-23T00:00:00Z</updated><author><name>Adam Boniecki</name></author><id>urn:uuid:a9102556-6aab-35af-bc78-d67e8cf4beae</id><content type="html">&lt;p&gt;Con el programa Google Summer of Code 2017 llegando a su fin, es hora de resumir lo que hice durante el verano trabajando en Batavia.&lt;/p&gt;
&lt;p&gt;Batavia es una parte de la colección de proyectos de BeeWare. Como todavía está en su primera etapa de desarrollo, por mi parte me ofreció implementar una serie de características que faltaban en Batavia, que van desde tipos de datos elementales, a través de la manipulación JSON y construcciones de lenguaje como generadores. Publiqué mi propuesta en &lt;a class="reference external" href="https://github.com/beeware/batavia/issues/483"&gt;este hilo de GitHub&lt;/a&gt; y lo mantuve actualizado con mi progreso semanalmente.&lt;/p&gt;
&lt;p&gt;Ten en cuenta que al final de GSoC, hemos decidido divergir de la propuesta inicial y renunciar a la aplicación de &lt;cite&gt;contextlib&lt;/cite&gt; en favor de la compatibilidad con Python 3.6, que usa op-codes de 2 bytes.&lt;/p&gt;
&lt;p&gt;En general, fue una gran experiencia de aprendizaje y diversión. Muchas gracias a mis mentores Russell Keith-Magee y Katie McLaughlin, y a toda la comunidad de BeeWare.&lt;/p&gt;
&lt;div class="section" id="pull-requests"&gt;
&lt;h2&gt;Pull Requests&lt;/h2&gt;
&lt;div class="section" id="listas-y-diccionarios"&gt;
&lt;h3&gt;Listas y diccionarios&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/518"&gt;Pop, remove and insert methods for lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/560"&gt;Pop, popitem, fromkeys and setdefault for dicts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="modulo-json"&gt;
&lt;h3&gt;Modulo JSON&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/577"&gt;Encoding JSON (JSONEncoder, dump and dumps)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/586"&gt;Decoding JSON (JSONDecoder, parse)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/589"&gt;Bug fix regarding cricket and test generation for JSONEncoder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="generadores"&gt;
&lt;h3&gt;Generadores&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/590"&gt;Fix numerous existing bugs in Batavia's generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/592"&gt;yield from implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/599"&gt;Support for yield from in Python 3.5+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/646"&gt;Bug fix for yield from and Python 3.6+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="manejadores-de-contexto-with"&gt;
&lt;h3&gt;Manejadores de contexto (&lt;cite&gt;with&lt;/cite&gt;)&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/594"&gt;SETUP_WITH and WITH_CLEANUP opcodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/620"&gt;WITH_CLEANUP_START and WITH_CLEANUP_FINISH for Python 3.5+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="compatibilidad-con-python-3-6"&gt;
&lt;h3&gt;Compatibilidad con Python 3.6&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/621"&gt;Support for 2-byte wide opcodes (Python 3.6+)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/643"&gt;Fix discrepancies in numerous error messages across Python versions&lt;/a&gt; (open PR)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="algunas-otras-correcciones-de-errores-realizadas"&gt;
&lt;h3&gt;Algunas otras correcciones de errores realizadas&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/566"&gt;https://github.com/beeware/batavia/pull/566&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/597"&gt;https://github.com/beeware/batavia/pull/597&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/623"&gt;https://github.com/beeware/batavia/pull/623&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/batavia/pull/565"&gt;https://github.com/beeware/batavia/pull/565&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>2017 Google Summer of Code - Probando Toga / API de configuración</title><link href="http://beeware.org/es/noticias/zumbido/2017-google-verano-de-codigo-final-informe-jonas-schell/" rel="alternate"></link><updated>2017-08-22T00:00:00Z</updated><author><name>Jonas Schell</name></author><id>urn:uuid:e11bcac5-8aa6-3bd5-951b-eda1096c67f6</id><content type="html">&lt;p&gt;Google Summer of Code 2017 está llegando a su fin. Después de tres meses de trabajo en el proyecto BeeWare, quisiera resumir mi trabajo y compartir mis experiencias.&lt;/p&gt;
&lt;div class="section" id="ningun-plan-de-batalla-sobrevive-al-primer-contacto"&gt;
&lt;h2&gt;&amp;quot;Ningún plan de batalla sobrevive al primer contacto&amp;quot;.&lt;/h2&gt;
&lt;p&gt;Esta fue una de las primeras cosas que Russell me dijo después de que decidimos fundamentalmente reestructurar mi &lt;a class="reference external" href="https://github.com/beeware/toga/issues/118"&gt;calendario y metas de GSoC propuestos&lt;/a&gt;. Durante el período inicial con la comunidad descubrimos que Toga era aún más difícil de probar como esperábamos. El estrecho acoplamiento entre el código independiente de la plataforma en  Toga-Core y las implementaciones dependientes de la plataforma para (Windows, MacOS, iOS, Linux, Android, Django, ...) nos estaba dando problemas para escribir pruebas significativas.&lt;/p&gt;
&lt;p&gt;Esperamos que Toga se convierta en un proyecto de tamaño decente, por lo tanto queremos que tenga una base sólida y bien probada. Por esta razón, decidimos que pasaría la mayor parte de GSoC para reestructurar Toga para que ejecutar pruebas resultara más fácil de hacer. Además de eso, también añadiría pruebas de implementación para comprobar si un backend dado se implementa de la manera correcta. Si terminara antes del final del verano, empezaría con mi propuesta de proyecto original.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="la-gran-reestructuracion-de-toga"&gt;
&lt;h2&gt;La gran reestructuración de Toga&lt;/h2&gt;
&lt;p&gt;Con los nuevos objetivos y una nueva rama comencé el viaje para reestructurar el proyecto Toga para hacerlo más fácil de probar.&lt;/p&gt;
&lt;p&gt;Después de hackear y probar diferentes cosas en una &lt;a class="reference external" href="https://github.com/Ocupe/restruc_toga"&gt;rama separada&lt;/a&gt;. Identifiqué que las dependencias entrelazadas de la plataforma son el problema principal. Para separar el módulo Toga-Core de sus implementaciones de backend decidimos usar el patrón de fábrica en lugar del modelo de herencia que teníamos antes. Ahora cada backend tiene su propia fábrica que produce los widgets adecuados para la plataforma en la que se está ejecutando. De esta manera tenemos una clara separación entre Toga-Core y el nivel de implementación. Las dependencias de la plataforma ahora están incluidas en el nivel de implementación.&lt;/p&gt;
&lt;p&gt;Después de que la nueva estructura fuera clara porté Toga-Core así como los backends para el Cocoa, iOS y GTK. Hice esto en la rama de Toga &lt;a class="reference external" href="https://github.com/beeware/toga/pull/185"&gt;(La gran reestructuración de Toga [WIP] # 185)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En la práctica, esto significaba que tenía que tocar manualmente casi todos los widgets de todos los backends para conectarlos al nuevo patrón de fábrica.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="desafios"&gt;
&lt;h2&gt;Desafíos&lt;/h2&gt;
&lt;p&gt;Toga habla con los frameworks nativos GUI, por lo tanto tuve que tener un buen entendimiento acerca de los principios y conceptos detrás de cada uno de estos marcos. A veces me sentía abrumado por la complejidad combinada de todas las partes que componen Toga. La siguiente es la lista:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cada backend de Toga se envuelve alrededor de un marco existente y único. Para envolver el marco que tiene que entender el marco.&lt;/li&gt;
&lt;li&gt;&amp;quot;Me encanta Python, ¿por qué tengo que entender Objetive C&amp;quot;? Para trabajar eficazmente en los backends de iOS y macOS, tenía que aprender los conceptos básicos del Objetivo C, aunque sólo fuera para leer los documentos de Apple.&lt;/li&gt;
&lt;li&gt;Toga tiene un montón de partes móviles. Hay backends, marcos, librerías para hablar con backends, librerías para realizar el diseño de la interfaz de usuario y más. Me tomó una buena cantidad de tiempo para entender todas estas partes. Lo siguiente es sólo una visión general de los conocimientos recién adquiridos durante GSoC:&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/beeware/rubicon-objc"&gt;Rubicon-ObjC&lt;/a&gt; para hablar con los backends de iOS y macOS.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/project/projects/libraries/colosseum/"&gt;Colosseum&lt;/a&gt; para entender y solucionar problemas de diseño.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/ast.html"&gt;Módulo AST&lt;/a&gt; para realizar las pruebas de implementación.&lt;/li&gt;
&lt;li&gt;El uso de patrones de diseño&lt;/li&gt;
&lt;li&gt;Cómo estructurar grandes proyectos.&lt;/li&gt;
&lt;li&gt;Leer y entender grandes y complejos pedazos de código.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="otro-trabajo-que-realice"&gt;
&lt;h2&gt;Otro trabajo que realicé&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PR: Translated part of the beeware.org webpage into german. &lt;a class="reference external" href="https://github.com/beeware/beeware.github.io/pull/173"&gt;(PR #173)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Helped newcomers on Gitter and GitHub.&lt;/li&gt;
&lt;li&gt;Tested if Toga would profit from static typing &lt;a class="reference external" href="https://github.com/Ocupe/toga/tree/static_typing"&gt;(toga/static_typing)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Created an implementation test suite based on the AST module.&lt;/li&gt;
&lt;li&gt;Added test for Toga-Core.&lt;/li&gt;
&lt;li&gt;Updated and extended documentation on Toga-Core as well as the macOS and iOS Backend.&lt;/li&gt;
&lt;li&gt;Created a toga-dummy backend.&lt;/li&gt;
&lt;li&gt;First draft of the Settings API and working backend implementation for macOS.&lt;/li&gt;
&lt;li&gt;Many small and big fixes on Toga-Core, cocoa, iOS, and GTK backends. All in the main PR &lt;a class="reference external" href="https://github.com/beeware/toga/pull/185"&gt;beeware/toga The Big Restructure of Toga [WIP]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a class="reference external" href="https://github.com/beeware/toga/pull/171"&gt;beeware/toga fix for getting the length of the filenames array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a class="reference external" href="https://github.com/beeware/toga/pull/193"&gt;beeware/toga Fixed #189 cocoa.progressbar with rehint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a class="reference external" href="https://github.com/beeware/briefcase-template/pull/3"&gt;beeware/briefcase-template Fix for spaces in app name. Issue #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a class="reference external" href="https://github.com/beeware/toga/pull/222"&gt;beeware/toga Toga Settings API [WIP]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="futuro-trabajo-por-hacer"&gt;
&lt;h2&gt;Futuro trabajo por hacer&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Todo mi trabajo se encuentra en el PR &lt;a class="reference external" href="https://github.com/beeware/toga/pull/185"&gt;&amp;quot;La gran reestructuración de Toga [WIP]&amp;quot;&lt;/a&gt;. Después de que los backends que faltan, a saber, Windows y Android, se incluyan, todo se puede emerger con la rama master. Tenemos que esperar a los backends que faltan, porque el nuevo esquema es incompatible con las versiones antiguas y no pueden coexistir.&lt;/li&gt;
&lt;li&gt;La API de configuración de mi propuesta original no se ha terminado debido a las razones mencionadas anteriormente. Tengo un primer borrador de trabajo y seguiré trabajando en él después de GSoC en &lt;a class="reference external" href="https://github.com/beeware/toga/pull/222"&gt;este Pull Request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="shout-out"&gt;
&lt;h2&gt;&amp;quot;Shout out&amp;quot;&lt;/h2&gt;
&lt;p&gt;Me gustaría dar las gracias a Russell Keith-Magee por ser un Mentor impresionante y por todo el tiempo que invirtió en mí durante GSoC. También quiero agradecer a la comunidad BeeWare por ayudarme cuando alguna vez tuve un problema. ¡Gracias!&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Un nuevo yak para el rebaño: BeeKeeper</title><link href="http://beeware.org/es/noticias/zumbido/un-nuevo-yak-para-la-manada-beekeper/" rel="alternate"></link><updated>2017-07-31T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:74d3d740-e1eb-3445-864c-50b95681e109</id><content type="html">&lt;p&gt;Escribir suites de pruebas es una habilidad que es una parte vital del entrenamiento de los programadores. Aprender a escribir buenas pruebas le ayuda a escribir un código más robusto y asegura que cuando haya escrito un código que funcione, siga trabajando durante mucho tiempo en el futuro. También puede ayudarle a escribir mejor código en primer lugar. Resulta que el código bien diseñado, con alta cohesión y bajo acoplamiento, también es fácil de probar - por lo que escribir código que sea fácil de probar casi siempre dará como resultado una mejor calidad total del código.&lt;/p&gt;
&lt;p&gt;Un paso importante en la &amp;quot;nivelación&amp;quot; de su experiencia de pruebas es comenzar a usar un servicio de integración continua o CI. Un servicio de CI es una herramienta que ejecuta automáticamente su suite de pruebas cada vez que alguien realiza un cambio o cada vez que alguien propone un cambio en forma de una solicitud de PR. El uso de un servicio de CI garantiza que su código &lt;em&gt;siempre&lt;/em&gt; pase su suite de pruebas - no puede introducirse accidentalmente en un cambio que rompe una prueba, porque obtendrá una notificación de advertencia roja grande.&lt;/p&gt;
&lt;p&gt;Un CI es un servicio tan importante que muchas empresas sólo existen para proporcionar CI-as-a-service. El proyecto BeeWare ha utilizado, para diversos proyectos, &lt;a class="reference external" href="https://travis-ci.com"&gt;TravisCI&lt;/a&gt; y &lt;a class="reference external" href="https://circleci.com"&gt;CircleCI&lt;/a&gt;. Ambas herramientas proporcionan niveles gratuitos para proyectos de código abierto y han patrocinado generosamente BeeWare con actualizaciones de capacidad en varias ocasiones.&lt;/p&gt;
&lt;p&gt;Sin embargo, BeeWare ha tenido una relación interesante con los servicios comerciales de CI. Esto es por dos razones.&lt;/p&gt;
&lt;p&gt;En primer lugar, nuestros conjuntos de pruebas, especialmente para &lt;a class="reference external" href="/es/proyecto/proyectos/puentes/voc"&gt;VOC&lt;/a&gt; y &lt;a class="reference external" href="/es/proyecto/proyectos/puentes/batavia"&gt;Batavia&lt;/a&gt; - toman mucho tiempo para ejecutarse. Estos dos proyectos requieren pruebas que inician y cierran repetidamente las máquinas virtuales (para Java y JavaScript, respectivamente), y no importa cuánto se optimice el código que se está probando, el tiempo de inicio y apagado de una máquina virtual eventualmente se acumula. También necesitamos ejecutar nuestras suites de prueba en múltiples versiones de Python - en la actualidad, soportamos Python 3.4, 3.5 y 3.6, con 3.7 en el horizonte. También hay cambios sutiles en versiones micro que pueden requerir pruebas.&lt;/p&gt;
&lt;p&gt;Hemos sido capaces de acelerar las prueba, dividiendo la suite de pruebas y ejecutando partes de la suite en paralelo, pero eso nos obliga a enfrentarnos al segundo problema. Los servicios comerciales de CI suelen operar en un modelo de suscripción; mayores suscripciones que proporcionan más recursos simultáneos. Sin embargo, nuestro patrón de uso es muy inusual. La mayor parte del año, recibimos un goteo lento de solicitudes de PRs que requieren pruebas. Sin embargo, un par de veces al año, tenemos un gran sprint, y tenemos una avalancha de contribuciones durante un corto período de tiempo. En PyCon EE.UU., hemos tenido grupos de 40 personas presentando parches - y todos ellos necesitan sus PRs probados por CI. Y el tiempo es un factor - los sprints sólo duran un par de días, por lo que un rápido cambio en las pruebas es esencial.&lt;/p&gt;
&lt;p&gt;Si tuviéramos que suscribir a los niveles de suscripción de nivel superior de CircleCi y TravisCI, todavía no tendríamos suficientes recursos para soportar un sprint - pero estaríamos &lt;em&gt;masivamente&lt;/em&gt; sobre abastecidos en recursos durante el resto del año. También tendríamos que pagar $ 750 o más por mes por este servicio, que es un presupuesto que no podemos permitirnos.&lt;/p&gt;
&lt;p&gt;Así que tuvimos un problema. Para ejecutar nuestra suite de pruebas de manera eficaz, necesitábamos recursos paralelizados masivamente para ejecutar una suite de pruebas rápidamente; y en ciertas épocas del año, necesitamos un número extremadamente grande de estos recursos.&lt;/p&gt;
&lt;p&gt;También teníamos otras tareas automatizadas que queríamos realizar. Queríamos hacer linting del código (comprobación automatizada de estilo de código) antes de que se probara un PR. Queríamos verificar la ortografía de la documentación. Y queríamos que estas tareas se retroalimentaran en GitHub como comentarios automatizados y marcadores de estado de revisión de código específicos, informando a los colaboradores no sólo de que se había producido un problema, sino de qué problema y dónde estaban en su código.&lt;/p&gt;
&lt;p&gt;También queríamos administrar las compilaciones de pipeline - no tiene sentido hacer una prueba completa de varias versiones de Python una vez que haya establecido que las pruebas están fallando en una versión. Y no hay punto en hacer pruebas &lt;em&gt;en absoluto&lt;/em&gt; si hay problemas de estilo de código.&lt;/p&gt;
&lt;p&gt;También queríamos hacer cosas que no eran sólo pruebas. Queríamos verificar que se firmaron acuerdos de contribución. Queríamos automatizar el despliegue de sitios web y documentación.&lt;/p&gt;
&lt;p&gt;Lo que teníamos no era sólo un problema de CI. Era un problema donde queríamos ejecutar automáticamente código arbitrario, de manera segura, en respuesta a un evento GitHub.&lt;/p&gt;
&lt;p&gt;He estado tratando de encontrar un servicio de CI que pueda satisfacer nuestras necesidades durante más de un año. Pero durante el último año, algunos pensamientos comenzaron a congelarse en mi cabeza.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Amazon proporciona una API (EC2) que le permite arrancar máquinas de complejidad variable (hasta 64 CPUs, con casi 500 GB de RAM) y pagar por minuto para ese uso.&lt;/li&gt;
&lt;li&gt;Docker proporciona las herramientas para configurar, lanzar y ejecutar código de manera aislada&lt;/li&gt;
&lt;li&gt;Amazon también proporciona una API (ECS) para controlar la ejecución de los contenedores Docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No hay nada específico acerca de AWS EC2 o ECS tampoco - se podría utilizar Linode y Kubernetes, o Docker Swarm o Microsoft Azure ... simplemente se necesita tener la capacidad de filtrar fácilmente las máquinas y ejecutar un contenedor Docker. Después de todo: un conjunto de pruebas es sólo un contenedor Docker que ejecuta un script que inicia su suite de pruebas. Una revisión de linting es un contenedor de Docker que ejecuta un script que lints su código. Una verificación de acuerdo de contribuyente es un contenedor de Docker que comprueba los metadatos asociados con una solicitud de extracción.&lt;/p&gt;
&lt;p&gt;Todo lo que necesita es un sitio web que puede recibir las notificaciones de eventos de GitHub e iniciar los contenedores de Docker en respuesta.&lt;/p&gt;
&lt;p&gt;A principios de julio, me encontré entre trabajos, y pronuncié la fatídica pregunta: &amp;quot;¿Cuán difícil podría ser?&amp;quot; Y así, hoy, estoy anunciando &lt;a class="reference external" href="/es/proyecto/proyectos/herramientas/beekeeper"&gt;BeeKeeper&lt;/a&gt; - el propio servicio de CI de BeeWare.&lt;/p&gt;
&lt;p&gt;BeeKeeper se despliega como un sitio web de Heroku, escrito con Django. Después de configurarlo con las credenciales de Github y AWS, escucha los webhooks de Github. Cuando se detecta una solicitud de pull o Push, BeeKeeper crea una solicitud de generación; que la solicitud de construcción inspecciona el código en el repositorio en busca de un archivo de configuración &lt;tt class="docutils literal"&gt;beekeeper.yml&lt;/tt&gt;. Ese archivo de configuración describe el pipeline de tareas que se van a realizar, y para cada tarea, el tipo de máquina que se debe usar, las variables de entorno que se requieran y la imagen de Docker que se utilizará.&lt;/p&gt;
&lt;p&gt;BeeKeeper también permite al administrador del sitio describir qué recursos se utilizarán para satisfacer las compilaciones. Una tarea puede decir que necesita una instancia de &amp;quot;Alta CPU&amp;quot;; pero la instancia BeeKeeper puede determinar lo que significa &amp;quot;alta CPU&amp;quot; - ¿es 4 CPUs o 32? ¿Cuándo esas máquinas son coladas hacia arriba, cuánto tiempo se les permitirá sentarse inactivo antes de ser apagado de nuevo? ¿Cuántas máquinas deben estar permanentemente en el grupo de trabajo? ¿Y cuál es el límite superior de las máquinas que se iniciará?&lt;/p&gt;
&lt;p&gt;Una herramienta complementaria para BeeKeeper es &lt;a class="reference external" href="/es/proyecto/proyectos/atico/waggle"&gt;Waggle&lt;/a&gt;. Waggle es una herramienta que prepara una definición local de una tarea para que pueda ser utilizada por BeeKeeper - compila la imagen de Docker y la carga en ECS para que pueda ser referenciada por tareas. (Se llama &amp;quot;Waggle&amp;quot; porque cuando las abejas obreras descubren una buena fuente de néctar, regresan a la colmena y hacen una 'danza' que le dice a otras abejas cómo hacer para encontrar esa fuente).&lt;/p&gt;
&lt;p&gt;También hemos proporcionado un repositorio llamado &lt;a class="reference external" href="https://github.com/beeware/comb"&gt;Comb&lt;/a&gt; (nombrado después del peine de miel, las abejas del lugar almacenan todo el néctar que encuentran) que define las configuraciones de la tarea que una instancia de BeeKeeper puedo usar. Hemos proporcionado algunas definiciones simples como parte del repositorio base de Comb; cada implementación de BeeKeeper debe tener uno de estos repositorios propios.&lt;/p&gt;
&lt;p&gt;Todavía hay mucho trabajo por hacer, pero ya estamos usando BeeKeeper con Batavia y VOC, y la próxima PyCon AU sprints será nuestra primera en condiciones de alta carga. Algunos cálculos de respaldo prevén que por alrededor de $50, podremos proporcionar suficientes recursos de CPU para cada ejecución de prueba para completar su ejecución en 10 minutos o menos, soportando un sprint de decenas de personas.&lt;/p&gt;
&lt;p&gt;Aunque BeeKeeper fue escrito para satisfacer las necesidades del proyecto BeeWare, es una herramienta de código abierto disponible para cualquier persona. Si desea tomar BeeKeeper para darle una prueba, vaya a los sprints, o &lt;a class="reference external" href="https://github.com/beeware/beekeeper"&gt;revise el código en GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BeeKeeper también es un ejemplo del tipo de producto que vería más si el desarrollo de BeeWare se financiara a tiempo completo. Fui capaz de construir BeeKeeper porque tenía un par de semanas de descanso entre los trabajos. No hay fin para las herramientas y bibliotecas como BeeKeeper y Waggle que podrían ser construidas para soportar el proceso de desarrollo de software - todo lo que falta son los recursos necesarios para desarrollar esas herramientas. Si desea ver más herramientas como BeeKeeper en el mundo, considere la posibilidad de unirse al proyecto BeeWare como &lt;a class="reference external" href="/es/contribuir/membresia/"&gt;miembro financiero&lt;/a&gt;. Cada pedacito ayuda, y si podemos alcanzar a una masa crítica de patrocinadores, podré comenzar a trabajar en BeeWare a tiempo completo.&lt;/p&gt;
</content></entry><entry><title>Una solicitud de ayuda</title><link href="http://beeware.org/es/noticias/zumbido/una-solicitud-de-ayuda/" rel="alternate"></link><updated>2017-04-05T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:977d485d-7829-3407-a020-c63603922d35</id><content type="html">&lt;p&gt;Hace unos 4 años, hice el primer &lt;em&gt;commit&lt;/em&gt; con &lt;a class="reference external" href="/es/proyecto/proyectos/herramientas/cricket/"&gt;Cricket&lt;/a&gt; - la primera herramienta que eventualmente se convertiría en parte de la suite BeeWare. Desde entonces, el proyecto BeeWare ha crecido para abarcar soporte para plataformas móviles, dos implementaciones alternativas de Python y un conjunto de widgets multi-plataforma, así como las herramientas de desarrollo que iniciaron el proyecto originalmente.&lt;/p&gt;
&lt;p&gt;Durante la mayor parte de este tiempo, BeeWare ha sido un esfuerzo voluntario. Inicialmente, fue un proyecto en solitario; sin embargo, en el último año en particular, el número de personas que han contribuido a BeeWare ha crecido rápidamente. Más de 300 personas han hecho contribuciones a las diversas herramientas y librerías de BeeWare, debido, al menos en parte, a las &lt;a class="reference external" href="/es/contribuir/monedas-de-desafio/"&gt;Monedas de Desafío&lt;/a&gt; que hemos estado ofreciendo en los sprints.&lt;/p&gt;
&lt;p&gt;Cabe destacar el &lt;a class="reference external" href="/es/comunidad/equipo/"&gt;equipo de 7 personas&lt;/a&gt; que se han unido al proyecto como apicultores, ayudando a compartir la carga de mantenimiento del proyecto. No puedo agradecer a estas personas lo suficiente - sin su ayuda, no se habría logrado tanto progreso durante el último año.&lt;/p&gt;
&lt;p&gt;Tu debes haber notado que en los últimos meses, el progreso ha sido especialmente rápido. Esto se debe a que, durante los últimos seis meses, el desarrollo de BeeWare ha sido parcialmente financiado por empleadores muy complacientes en &lt;a class="reference external" href="https://www.jambonsw.com"&gt;Jambon Software&lt;/a&gt;. Mi contrato con Jambon me permitió pasar largos periodos de tiempo pagados para trabajar en BeeWare - y, no es sorprendente, es posible hacer un enorme progreso como resultado. Los últimos 6 meses han visto:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Amplias mejoras a Batavia y VOC;&lt;/li&gt;
&lt;li&gt;Un backend Android para Toga;&lt;/li&gt;
&lt;li&gt;Un backend de Django para Toga, permitiendo que las aplicaciones de Toga se implementen como aplicaciones web;&lt;/li&gt;
&lt;li&gt;Un backend de Winforms para Toga, permitiendo que las aplicaciones de Toga funcionen en Windows con un aspecto moderno;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Desafortunadamente, mi contrato con Jambon está llegando a su fin - lo que significa que mis contribuciones a BeeWare volverán a ser lo que mi tiempo libre permite.&lt;/p&gt;
&lt;p&gt;Esto también significa que la tasa de progreso también se ralentizará. Todavía hay mucho por hacer: hay un montón de la librería estándar de Python para portar a Batavia y VOC; Toga necesita un mucho más amplio soporte de widgets; Colosseum necesita ser extendido para que sea compatible con el modelo de caja CSS completo, no sólo CSS3 Flexbox; y las herramientas que lo iniciaron todo - Cricket, Bugjar, Duvet, y otros - todos necesitan ser portados a Toga.&lt;/p&gt;
&lt;p&gt;Me &lt;em&gt;gustaría&lt;/em&gt; poder trabajar en BeeWare a tiempo completo. Sin embargo, la simple realidad es que a menos que pueda encontrar una manera de pagar por este trabajo, sólo será capaz de contribuir en mi tiempo libre.&lt;/p&gt;
&lt;p&gt;Así que - esto es un llamado para ti - la comunidad de Python. Si estás entusiasmado con la perspectiva de tener acceso a Python en plataformas móviles, o te gustaría escribir aplicaciones en Python que tengan interfaces de usuario completamente nativas - &lt;strong&gt;Necesito tu ayuda&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Por sólo &lt;strong&gt;US $ 10 al mes&lt;/strong&gt;, puedes &lt;a class="reference external" href="/es/contribuir/membresia/"&gt;unirte al proyecto BeeWare como miembro&lt;/a&gt; y ayudar a que este sueño se convierta en realidad. Si puedo encontrar 1000 personas en la comunidad de Python que quieran estas herramientas y estén dispuestos a apoyar financieramente su desarrollo, puedo comenzar a trabajar en BeeWare a tiempo completo. Por supuesto, este objetivo es aún más fácil si las empresas se involucran y patrocinan en los niveles más altos.&lt;/p&gt;
&lt;p&gt;Si puedo encontrar a &lt;em&gt;más&lt;/em&gt; de 1000 personas, entonces mucho más es posible. La opción obvia sería contratar a otros desarrolladores con experiencia para ayudar con el trabajo. La idea de tener a otros para compartir ideas durante el proceso de desarrollo es muy atractiva. Sin embargo, también podemos usar esto como una oportunidad para hacer un bien social.&lt;/p&gt;
&lt;p&gt;Durante algún tiempo, he tenido una &lt;a class="reference external" href="https://twitter.com/PyBeeWare/status/784545607402852352"&gt;oferta abierta para ser mentor&lt;/a&gt; a cualquiera que quiera involucrarse con la contribución de Coódigo Abierto usando el proyecto BeeWare. Sin embargo, no mucha gente ha podido tomar seriamente esta oferta, porque el tiempo requerido para tomar seriamente la oferta es prohibitivo. Me gustaría poder extender mi oferta a algo más que una relación casual de tutoría. Me gustaría poder contratar - y pagar - uno o más desarrolladores junior para el proyecto BeeWare, y enfocarme en dar esa oportunidad a personas de demografía subrepresentada.&lt;/p&gt;
&lt;p&gt;Aún son los primeros días para BeeWare. El apoyo financiero significa un progreso más rápido. Más widgets. Mejor documentación. Más de todo lo que has visto hasta ahora de BeeWare. Si puedo encontrar financiación a tiempo completo para mí -o mejor aún, para mí y para un equipo pequeño-, no tengo dudas de que la suite BeeWare se convertirá en una alternativa viable para proyectos comerciales en muy poco tiempo. Lo mejor de todo, seremos capaces de hacer esto sin tener que renunciar a los ideales del movimiento de código abierto.&lt;/p&gt;
&lt;p&gt;Estoy emocionado por lo que le depara el futuro a BeeWare. Espero que nos acompañes en este viaje.&lt;/p&gt;
&lt;p&gt;(Y si tu estás pensando en registrarte, y vienes a PyCon US en Portland este mes de mayo, déjame dejar una pista suave ... inscríbete ahora. Vale la pena #cryptic)&lt;/p&gt;
</content></entry><entry><title>Ven al sprint con nosotros en PyCon US 2017</title><link href="http://beeware.org/es/noticias/zumbido/ven-al-sprint-con-nosotros-en-pycon-us-2017/" rel="alternate"></link><updated>2017-02-01T00:00:00Z</updated><author><name>Katie McLaughlin</name></author><id>urn:uuid:76dd3fba-dda2-350e-a0b0-3468ceced7c1</id><content type="html">&lt;p&gt;&lt;strong&gt;Los boletos para PyCon US 2017 han sido regalados. ¡Esperamos ver a todos los que lleguen a la conferencia en el stand 103!&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;¿Quieres ir al &amp;#64;PyCon, no puede permitírselo? &amp;#64;PyBeeWare tiene 2 entradas para regalar. Envía un correo electrónico a contact&amp;#64;beeware.org y cuéntanos por qué quiere estar allí!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;— PyBee (&amp;#64;PyBeeWare) 30 e Enero, 2017&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://us.pycon.org/2017/"&gt;PyCon US 2017&lt;/a&gt; se está llevando cabo en Portland, Oregon del 17 al 25 de mayo, y está destinado a ser otra increíble conferencia.&lt;/p&gt;
&lt;p&gt;Por segundo año consecutivo, el equipo &lt;a class="reference external" href="https://beeware.org"&gt;BeeWare&lt;/a&gt; estará en el sitio con un &lt;a class="reference external" href="https://twitter.com/PyBeeWare/status/737043373953978368"&gt;stand en el salón de exhibiciones&lt;/a&gt;, junto con otros proyectos de Código Abierto del mundo Python.&lt;/p&gt;
&lt;p&gt;Con este stand, tenemos dos entradas para la conferencia. Esto incluye:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;acceso a la recepción de apertura&lt;/li&gt;
&lt;li&gt;3 días de conferencias, salón de exposiciones/feria de trabajo&lt;/li&gt;
&lt;li&gt;desayunos, pausas, almuerzos y bolsa de &lt;em&gt;swag&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La cosa es que tanto &lt;a class="reference external" href="https://twitter.com/freakboy3742"&gt;Russell&lt;/a&gt; como yo, ya nos hemos registrado.&lt;/p&gt;
&lt;p&gt;Por lo tanto, queremos darte un boleto.&lt;/p&gt;
&lt;p&gt;Sí &lt;strong&gt;a ti.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Si tu puedes llegar a Portland en los días de la conferencia, queremos darte nuestro boleto gratis.&lt;/p&gt;
&lt;p&gt;¿Qué queremos a cambio?&lt;/p&gt;
&lt;p&gt;Sólo un poco de tu tiempo.&lt;/p&gt;
&lt;p&gt;El  &lt;a class="reference external" href="/es/comunidad/equipo/"&gt;equipo Bee&lt;/a&gt; estará ayudando al personal de nuestro stand, pero también nos gustaría ver (y dar!) charlas, así que ayudarnos mientras estamos corriendo fuera del puesto sería encantador. (Además, y estoy segura de que Russell estaría de acuerdo, sólo ayudando en la cabina te ganas una &lt;a class="reference external" href="/es/contribuir/monedas-de-desafio"&gt;moneda&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Además, nos encantaría que te quedaras a los famosos Sprints de código. Estos se celebran en los cuatro días posteriores al evento, mientras las personas se encuentran aun en la ciudad. Tomaremos café, almorzaremos y tendremos acceso a una habitación llena de mesas, sillas y cantidad copiosa de tomas de corriente, y escribiremos código para los diferente proyectos. Estaremos haciendo un &lt;a class="reference external" href="https://twitter.com/PyBeeWare/status/738400648614449152"&gt;sprint de BeeWare&lt;/a&gt; donde estaremos asesorando y ayudando a los colaboradores principiantes  a ganar su primera &lt;a class="reference external" href="https://twitter.com/PyBeeWare/status/738425474754314240"&gt;moneda brillante de desafío&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¿Esto suena como algo que te interesa?&lt;/p&gt;
&lt;p&gt;Por favor, &lt;a class="reference external" href="mailto:contact&amp;#64;beeware.org"&gt;envíanos un correo electrónico!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¡Cuéntanos acerca de tí! Quién eres, qué haces, por qué quieres ir a PyCon y lo que te interesa de Python.&lt;/p&gt;
&lt;p&gt;Necesitamos asignar nuestras entradas con anticipación, así que envíanos un correo electrónico &lt;strong&gt;antes del 12 deFebrero, 2017&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Si tiene alguna pregunta solo pregunta &lt;a class="reference external" href="https://twitter.com/glasnt"&gt;a mi&lt;/a&gt; o a &lt;a class="reference external" href="https://twitter.com/freakboy3742"&gt;Russell&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;¡Nos encantaría verte allí! ✨&lt;/p&gt;
&lt;p&gt;[Este artículo ha sido publicado en
&lt;a class="reference external" href="http://glasnt.com/blog/2017/02/01/come-sprint-with-beeware.html"&gt;glasnt.com/blog&lt;/a&gt;]&lt;/p&gt;
</content></entry><entry><title>Dinero, dinero, dinero</title><link href="http://beeware.org/es/noticias/zumbido/dinero-dinero-dinero/" rel="alternate"></link><updated>2016-12-10T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:583dbd7e-b3a5-3c9f-854e-50c690ef3dd5</id><content type="html">&lt;p&gt;En PyCon AU 2015, y de nuevo en DjangoCon US 2015, di una charla titulada &amp;quot;Dinero, dinero, dinero: Escribiendo software, en un mundo de hombres ricos&amp;quot;. La charla fue un resumen de los problemas relacionados con uno de los mayores problemas que veo frente a la comunidad de código abierto: cómo proporcionar los recursos que se necesitan para desarrollar y mantener el software del que nosotros, como comunidad, dependemos. Esto significa proporcionar mantenimiento y apoyo a proyectos establecidos, grandes y pequeños; sino que también proporciona un ecosistema donde las nuevas ideas pueden ser incubadas, desarrolladas y maduradas hasta que presenten alternativas atractivas o beneficios significativos sobre las ofertas de fuentes cerradas.&lt;/p&gt;
&lt;p&gt;Han pasado casi 18 meses desde que presenté esta charla, pero el problema persiste. No he estado solo al notar y llamar la atención sobre este asunto, tampoco. &lt;a class="reference external" href="https://twitter.com/nayafia"&gt;Nadia Eghbal&lt;/a&gt; fue encargada de redactar un libro para la Fundación Ford titulado &lt;a class="reference external" href="http://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure"&gt;Caminos y puentes&lt;/a&gt; resaltando las necesidades crónicas en infraestructura que subyacen a gran parte de la economía moderna. Eric Holscher (mantenedor de &lt;a class="reference external" href="https://readthedocs.com"&gt;Read the Docs&lt;/a&gt;) &lt;a class="reference external" href="http://ericholscher.com/blog/2016/aug/31/funding-oss-marketing-money/"&gt;escribió sobre los problemas que tuvo para recaudar fondos&lt;/a&gt;, a pesar de que el servicio que él ofrece corresponde a una parte ampliamente utilizada - posiblemente indispensable - del ecosistema Python.&lt;/p&gt;
&lt;p&gt;Sin embargo, a pesar de esta atención, todavía no llega a estar tan cerca de la atención que debería tener. Y es una cuestión que es de gran importancia para mí, ya que el proyecto BeeWare está buscando formas de financiar el desarrollo necesario para pasar de una &amp;quot;interesante demostración técnica&amp;quot; a una &amp;quot;solución técnica convincente&amp;quot;.&lt;/p&gt;
&lt;p&gt;Hace unos meses, se sugirió que publicara una entrada en el blog para acompañar la presentación del video. Me arrastré los pies al hacer esto, hasta que el trabajador colaborador de BeeWare y simpático chico 'Elias Dorneles' se ofreció a tomar mis notas y convertirla en una transcripción.&lt;/p&gt;
&lt;p&gt;Así que aquí está. Dinero, Dinero, Dinero: Escribiendo software, en un mundo de hombres ricos. Si tienes alguna pregunta, desacuerdo, peticiones para presentar esto en tu conferencia, o simplemente una oferta genérica de una bolsa de dinero en efectivo, puedes contactarme en: &lt;a class="reference external" href="mailto:russell&amp;#64;keith-magee.com"&gt;russell&amp;#64;keith-magee.com&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Jw6wnIopVVg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;div class="section" id="transcripcion"&gt;
&lt;h2&gt;Transcripción&lt;/h2&gt;
&lt;p&gt;Hola, soy Russell Keith-Magee, si ya has oído hablar de mí, probablemente sea por mi trabajo en el proyecto Django; He sido un miembro del equipo central durante casi 10 años, y presidente de la Fundación de Software Django desde 2011.&lt;/p&gt;
&lt;p&gt;Uno de los grandes retos del proyecto Django - y cualquier gran proyecto para el caso - ha sido asegurar la seguridad de su desarrollo futuro.&lt;/p&gt;
&lt;p&gt;Mi trabajo diario es como CTO y co-fundador de TradesCloud. Somos un software como servicio para los comerciantes - plomeros, electricistas, carpinteros y similares. TradesCloud depende de una serie de proyectos de código abierto - Django, Apache, memcache, muchos otros. Así que tengo un interés comercial en la continuidad de estos proyectos de código abierto - pero ciertamente no tengo los recursos para financiarlos a &lt;em&gt;todos&lt;/em&gt; por mí mismo.&lt;/p&gt;
&lt;p&gt;También tengo un interés declarado en los problemas de interfaces gráficas, especialmente en lo que se refiere a las herramientas de desarrollo. Tengo grandes visiones de lo que &lt;em&gt;me gustaría&lt;/em&gt; hacer con este proyecto, y he recibido algunas grandes contribuciones de la comunidad, pero todavía es en gran medida mi propio trabajo. Mi start-up  sería capaz de hacer un gran uso de estas herramientas si estuvieran maduras.&lt;/p&gt;
&lt;p&gt;También soy un mantenedor de algunos proyectos más pequeños, como el envoltorio Python para la API Xero. Comencé el proyecto porque tenía una picazón. Pero ahora he abierto el proyecto, lo que significa que he heredado una tarea de mantenimiento. He aceptado la ayuda de un par de personas - sobre todo Matthew Schinkel y Aidan Lister, que han hecho un gran trabajo. Pero si soy honesto, la carga de mantenimiento de PyXero excede el tiempo que puedo dedicarle razonablemente.&lt;/p&gt;
&lt;p&gt;Entonces, tengo intereses creados en el software libre. Tengo un interés como productor de un proyecto exitoso con un alto perfil; como productor de un pequeño proyecto con muchos usuarios pero poco incentivo personal; y como productor de proyectos más pequeños con casi ningún perfil pero grandes planes. Todos estos proyectos tienen diferentes necesidades de recursos, reflejando su madurez como proyectos.&lt;/p&gt;
&lt;p&gt;También tengo intereses como consumidor de software libre, tanto en términos de software en el que confío para desarrollar mis propios proyectos, como en términos de mi interés comercial en el mantenimiento a largo plazo de herramientas y plataformas. Necesito estos proyectos para seguir desarrollándose, sobrevivir y prosperar.&lt;/p&gt;
&lt;p&gt;Sobre la base de mi experiencia, me gustaría hacer una audaz afirmación:&lt;/p&gt;
&lt;blockquote class="pull-quote"&gt;
A falta de otras limitaciones, dados recursos equivalentes, el enfoque de software libre produce resultados de ingeniería mucho mayores que el enfoque de código cerrado.&lt;/blockquote&gt;
&lt;p&gt;La frase clave es &amp;quot;dado recursos equivalentes&amp;quot;. La mayoría de los proyectos de software libre no se desarrollan usando nada cercano a recursos &amp;quot;equivalentes&amp;quot;.&lt;/p&gt;
&lt;p&gt;En algunos casos, esto es una bendición disfrazada - sin importar el proyecto, tener escasos recursos es un excelente crisol para quemar lo innecesario y dejar sólo el metal base. Pero no siempre es una bendición.&lt;/p&gt;
&lt;div class="section" id="el-camino-moral-alto-esta-lleno-de-cadaveres-de-nuestros-aliados"&gt;
&lt;h3&gt;El camino moral alto está lleno de cadáveres de nuestros aliados&lt;/h3&gt;
&lt;p&gt;Hable con cualquier desarrollador de software libre prominente, y entre las historias de éxito, también escuchará algunos problemas consistentes - que tienen grandes ideas y grandes planes, pero no hay tiempo para ejecutarlas; que están a punto de quemarse debido a las presiones de mantener su proyecto; o que han tenido otra discusión de lista de correo con alguien que no entiende por qué no dejo todo para ayudarles a solucionar su problema. Y hay muchos ejemplos.&lt;/p&gt;
&lt;p&gt;OpenSSL es el software que maneja prácticamente todas las conexiones &amp;quot;seguras&amp;quot; en Internet, y sin embargo, solo hasta el descubrimiento de Heartbleed -una vulnerabilidad crítica que envió a Internet en un remolino - pudo  encontrar financiación para pagar a los mantenedores.&lt;/p&gt;
&lt;p&gt;Otro ejemplo - GnuPG - Werner Koch casi se declaró en bancarrota tratando de apoyar a GPG - un proyecto que muchos otros dependen de la confianza en su proceso de lanzamiento. Fue rescatado, en la puerta de las muerte, por la iniciativa Infraestructura principal de la fundación linux.&lt;/p&gt;
&lt;p&gt;Estos son ejemplos que terminaron con fondos; pero no todos los finales felices.&lt;/p&gt;
&lt;p&gt;Tomemos el ejemplo de Capistrano. Herramienta de gestión de configuración muy popular alrededor de 2007-8, mantenido por Jamis Buck. En 2008, citando el agotamiento y el mantenimiento general, él renunció a apoyar a Windows, diciendo que &amp;quot;Windows puede ser el gorila de 800 libras en la habitación, pero no es mi gorila, y no está en mi habitación&amp;quot;. Este fue un movimiento increíblemente impopular; pero incluso con esa reducción, Jamis se quemó en 2009, abandonando Capistrano, y una serie de otros proyectos, sin mantenedores.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;Hi I&amp;#39;m an engineer at a well-funded company and we need this feature can someone implement it for free?&amp;quot; -- Every FOSS mailing list.&lt;/p&gt;&amp;mdash; Christophe (@Xof) &lt;a href="https://twitter.com/Xof/status/622113231218192384"&gt;July 17, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;La cosa es - que esta es una comunidad que tiene un montón de dinero en efectivo. En el gran esquema de cosas, el desarrollo de software es una industria bien financiada. Si las empresas pueden encontrar dinero para mesas de futbolín y bolas de bolas meditativas, deben ser capaces de encontrar recursos para ayudar a mantener el software en el que han basado su éxito. Y si estás en el extremo receptor del problema - un desarrollador de software libre -  puede ser realmente frustrante.&lt;/p&gt;
&lt;p&gt;Para mí, esta es la gran pregunta sin respuesta del movimiento del software libre: cómo reconciliar la discrepancia entre la clara demanda de un producto de software y la capacidad de convertir esa demanda en el tiempo y los recursos necesarios para atender esa demanda.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-libre-sueno-vs-realidad"&gt;
&lt;h3&gt;Software libre: Sueño vs Realidad&lt;/h3&gt;
&lt;p&gt;Aunque la teoría dice que cualquier persona puede contribuir a un proyecto de software libre, en realidad, cada proyecto de cualquier significado tiene líderes. En el nivel más básico, es quien tiene el &amp;quot;bit de commit&amp;quot;. Y usted necesita ese liderazgo, especialmente cuando se trata de algo relacionado con el diseño. La mordaza corriente es que un camello es un caballo diseñado por comité. Las peores API que tratamos diariamente son las que fueron diseñadas por comité. Necesitas a alguien con gusto corriendo el espectáculo.&lt;/p&gt;
&lt;p&gt;Pero hay un problema más grande - la extensión del compromiso que los usuarios tienen con un proyecto. Aquí hay un experimento para probar mi punto. Estamos en una habitación llena de usuarios de Python. Django es un proyecto de software libre.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;¿Quién en esta sala ha encontrado un error en Django, o tiene una pequeña cosa que les gustaría ver arreglada en la API de Django?&lt;/li&gt;
&lt;li&gt;¿Quién ha convertido esa pequeña cosa  un informe de error de Django?&lt;/li&gt;
&lt;li&gt;¿Quién ha enviado un parche a Django para esa arreglo?&lt;/li&gt;
&lt;li&gt;De aquellos, quienes han tenido ese parche emergido?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Cuando esto se hace delante de una audiencia en vivo, en cada pregunta, hay menos gente levantando sus manos&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="productos-vs-proyectos"&gt;
&lt;h3&gt;Productos vs Proyectos&lt;/h3&gt;
&lt;p&gt;Entonces, ¿qué está pasando aquí? Bueno, refleja 2 maneras diferentes de mirar un pedazo de software - proyectos y productos. Y es una cuestión de perspectiva personal - mi proyecto puede ser su producto, y viceversa.&lt;/p&gt;
&lt;p&gt;Cuando veo algún código como un proyecto, es un cuerpo de código en el que estoy contribuyendo a un objetivo mayor. Estoy dispuesto a gastar recursos enfocados en las necesidades de otras personas con la esperanza de que sus necesidades ayudarán a mejorar el proyecto como un todo. Estoy dispuesto a hacer esto porque obtengo ganancias personales, como un perfil público mejorado; o si la herramienta está muy cerca de mi trabajo; o donde sé que puedo hacer una contribución sustantiva.&lt;/p&gt;
&lt;p&gt;Pero cuanto más lejos me alejo de mi &amp;quot;trabajo&amp;quot;, y cuanto más difícil es hacer una contribución, menos inclinado estoy a &lt;em&gt;querer&lt;/em&gt; contribuir al proyecto. La mayoría de las veces, es un producto que estoy usando, con las verrugas y todo. Si un producto tiene errores, trabajaré alrededor de ellos, o encontraré una alternativa, en vez de navegar por el proceso de contribución y contribuir con un parche.&lt;/p&gt;
&lt;p&gt;En el caso de un producto, las libertades proporcionadas por el software libre son un poco como la libertad de expresión - es una libertad que definitivamente quiero, es reconfortante saber que está ahí, pero no paso todos los días asegurándome de explotar plenamente esas libertades. Hay personas que lo hacen - manifestantes, defensores de posiciones sociales controvertidas - y un día, dadas las circunstancias adecuadas, podría unirme y ayudarles. Pero la mayoría de las veces, sólo quiero ser pragmático, y seguir con la vida.&lt;/p&gt;
&lt;p&gt;Esta dicotomía entre la teoría y la práctica es también la razón por la que comentarios como &amp;quot;Parches bienvenidos&amp;quot; se hacen en las listas de correo de software libre. Por un lado, es completamente correcto. Cualquiera &lt;em&gt;puede&lt;/em&gt; contribuir, y en la mayoría de los proyectos los &lt;em&gt;parches&lt;/em&gt; son bienvenidos. Pero la mayoría de la gente no mira un nuevo proyecto de código abierto como una oportunidad para participar y contribuir. La mayoría de la gente sólo quiere usar el maldito software.&lt;/p&gt;
&lt;p&gt;Y se puede argumentar que es porque la gente se está centrando en la interpretación equivocada de &amp;quot;libre&amp;quot;, y no han &amp;quot;capturado el espíritu del software libre&amp;quot;. Lo cual es 100% cierto, pero totalmente contraproducente como una posición. Cualquier persona que ha hecho cualquier trabajo de diseño UX sabe que si los usuarios están cometiendo un error consistentemente, culpar al usuario no te lleva a ninguna parte. Usted estaba a cargo de lo que el usuario experimentó, y cometieron el &amp;quot;error&amp;quot; debido a una desconexión cognitiva fundamental.&lt;/p&gt;
&lt;p&gt;E incluso si todo el mundo &lt;em&gt;obtuvo&lt;/em&gt; el mensaje correcto - vamos a ser realistas - no funcionaría de todos modos. &lt;a class="reference external" href="https://es.wikipedia.org/wiki/El_M%C3%ADtico_Hombre-Mes"&gt;El mítico hombre-mes&lt;/a&gt; nos mostró que no podemos entregar un proyecto más rápidamente o mejor, arrojando más personas en él. 9 mujeres no pueden hacer un bebé en 1 mes - un proyecto no sólo necesita recursos - que necesita los recursos &lt;em&gt;adecuados&lt;/em&gt;, en las cantidades adecuadas. Y en última instancia, eso significa que los proyectos deben encontrar una manera de obtener los recursos que necesitan para ser autosostenibles.&lt;/p&gt;
&lt;p&gt;Por lo tanto, eso significa que si queremos que el software libre se mantenga y mantenga bien, necesitamos encontrar una manera de financiar su mantenimiento.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="valor-de-uso-vs-valor-de-venta"&gt;
&lt;h3&gt;Valor de uso vs Valor de venta&lt;/h3&gt;
&lt;p&gt;Hace 18 años, Eric S Raymond publicó un ensayo titulado &amp;quot;La Catedral y el Bazar&amp;quot;. Este ensayo catalizó el inicio del movimiento de código abierto - una redefinición del &amp;quot;software libre&amp;quot; para dejar claro que la apertura, no el precio, era la propiedad importante. Lo que no es tan bien recordado es que &amp;quot;La Catedral y el Bazar&amp;quot; no es el único ensayo escrito por Raymond en ese momento. Publicó otros 2 ensayos poco después - &amp;quot;Homesteading the Noosphere&amp;quot;, sobre la organización social y las motivaciones detrás de los proyectos de software libre, y &amp;quot;The Magic Cauldron&amp;quot;, sobre la &lt;em&gt;economía&lt;/em&gt; del software libre.&lt;/p&gt;
&lt;p&gt;Una de las distinciones clave que Raymond destaca en ese ensayo es la diferencia entre el valor de uso y el valor de venta.&lt;/p&gt;
&lt;p&gt;El valor de venta de un producto es su valor como un producto vendible - literalmente, por lo que usted lo vende.&lt;/p&gt;
&lt;p&gt;El valor de uso de un producto es su valor económico como herramienta, como multiplicador de productividad. Este es el beneficio económico que el usuario obtendrá del producto.&lt;/p&gt;
&lt;p&gt;Lo importante es que los dos no están necesariamente conectados. En un entorno de fabricación tradicional, el foco está en el valor de venta, ya que por lo general está vinculado al costo de fabricación - el costo de las piezas y los materiales.&lt;/p&gt;
&lt;p&gt;Pero la mayoría del software no se produce para el valor de la venta - es en casa el software producido para el valor de uso. En el caso del software libre, el valor de &amp;quot;venta&amp;quot; para el software libre es 0. Pero eso no significa que no hay valor de uso, y el problema es averiguar cómo explotar el valor de uso que existe dentro de una organización como un canal de monetización.&lt;/p&gt;
&lt;p&gt;¿Entonces cuales son tus opciones?&lt;/p&gt;
&lt;p&gt;Bueno, puedes vender mercancía. Y aunque esto es relativamente fácil de hacer, seamos honestos - no vas a financiar un imperio de software vendiendo camisetas.&lt;/p&gt;
&lt;p&gt;Puede hacer que los usuarios paguen por la documentación. Escribe un libro, y haz que los usuarios lo paguen.&lt;/p&gt;
&lt;p&gt;Desafortunadamente, el pequeño secreto sucio de la escena de la escritura de la tecnología es que nadie se vuelve rico escribiendo libros de tecnología. Son recursos increíblemente valiosos para la comunidad, son ideales para rellenar tu currículum, pero no son grandes como flujo de ingresos.&lt;/p&gt;
&lt;p&gt;Un área que &lt;em&gt;si&lt;/em&gt; paga bien es la de entrenamiento. Los empleadores están dispuestos a pagar mucho dinero por los cursos de capacitación; si usted puede juntar un taller intensivo de 3 días, usted puede venderlo una y otra vez.&lt;/p&gt;
&lt;p&gt;Puede producir su oferta. El código fuente sigue siendo gratuito, pero un instalador simple y fácil de usar cuesta dinero. Esto funciona muy bien cuando cuando lo que tienes es un producto claramente identificable - como una interfaz gráfica de desarrollo - IDE.&lt;/p&gt;
&lt;p&gt;Un modelo específico de generar un producto es Software como servicio - SaaS - dar el código de forma gratuita, pero pagar por la conveniencia de tener a alguien más para administrarlo por usted. Cualquier software de código abierto de la web es un buen ejemplo de esto - puede instalar el software en sus propios servidores, pero honestamente, a menos que tenga una razón, usted utiliza la solución alojada de alguien más y deja que ellos cuiden sus servidores por usted.&lt;/p&gt;
&lt;p&gt;Pero, SaaS sólo es viable si se puede ofrecer &lt;em&gt;como un servicio&lt;/em&gt; - lo que significa que es realmente sólo viable para la web. Y, como las tecnologías como docker comercializan el despliegue, es posible que incluso este flujo de ingresos se evapore.&lt;/p&gt;
&lt;p&gt;Entonces, ¿qué más se puede vender?&lt;/p&gt;
&lt;p&gt;Usted puede vender el acceso a los desarrolladores. Si eres el mantenedor de un proyecto, estás en la mejor posición para brindarle soporte o depurar problemas complejos, lo que significa que estás en una posición privilegiada para vender soporte y consultoría. &lt;cite&gt;Honza Král &amp;lt;https://twitter.com/honzakral&amp;gt;&lt;/cite&gt; de ElasticSearch llama a esto el modelo de negocio &amp;quot;Ghostbusters&amp;quot; - &amp;quot;¿A quién vas a llamar?&amp;quot;&lt;/p&gt;
&lt;p&gt;Puede vender el acceso al software. Trolltech hizo esto con Qt; Riverbank todavía hace con los enlaces de PyQt. La biblioteca en sí es GPL - pero si quieres usarla en un proyecto de código cerrado, puedes hacerlo, por un alto cargo. Esto tiene la ventaja de que obliga a los intereses comerciales a pagar por lo que están utilizando; pero también desincentiva el uso comercial a pequeña escala - si estoy escribiendo una nueva herramienta, y me veo obligado a elegir entre el código abierto de mi herramienta o un precio de $ 1000, probablemente elija un juego de herramientas diferente.&lt;/p&gt;
&lt;p&gt;También puede entrar en el negocio de proporcionar certificaciones y garantías - código de auditoría para garantizar la calidad o compatibilidad, proporcionando garantías sobre el arreglo de errores, y certificar que las personas son expertos en el uso del producto. Esta es una parte importante de los modelos de negocio de RedHat, los paquetes de auditoría, asegurándose de que todos interactúan como se esperaba, asegurando que las actualizaciones de seguridad están disponibles y cumplen con los mismos estándares y certificando a los administradores del sistema.&lt;/p&gt;
&lt;p&gt;Este es un conjunto de productos que atrae a la &amp;quot;empresa&amp;quot; de gama alta de la ciudad - y es un segmento lucrativo  del mercado. Pero esos clientes tienden a sólo necesitar estas garantías para ciertos tipos de software - en términos generales,  software &amp;quot;aburrido&amp;quot;. Su sistema operativo, sus base de datos - son piezas de software que necesitan ser sólidas en una empresa. Su barra de herramientas de depuración - no tanto, a menos que tal vez sean ofrecidas como parte de un conjunto/paquete de herramientas.&lt;/p&gt;
&lt;div class="section" id="socavar-tu-propuesta-de-valor"&gt;
&lt;h4&gt;Socavar tu propuesta de valor&lt;/h4&gt;
&lt;p&gt;Otro problema con muchas de estas fuentes de ingresos es que si se ejecuta bien su proyecto, muchos de ellos se descartan - o por lo menos se ven severamente reducidas.&lt;/p&gt;
&lt;p&gt;Si haces algo realmente fácil de usar, acabas de eliminar la necesidad de libros y cursos de formación, o, por lo menos, movido el terreno a cursos &amp;quot;avanzados&amp;quot;, que son más difíciles de escribir y tienen un público más pequeño.&lt;/p&gt;
&lt;p&gt;Django vio esto de primera mano - la documentación de Django era reconocida por lo buena desde una  temprana etapa, y como resultado, era muy difícil conseguir que los editores aceptaran proyectos de libros de Django - porque la documentación era demasiado buena y estaba socavando el mercado para libros. Se ha tardado mucho tiempo, y sobre todo la auto-publicación, para obtener buenos libros Django disponibles para la venta.&lt;/p&gt;
&lt;p&gt;Si usted tiene una lista de correo del proyecto, donde la comunidad responde a las preguntas de forma gratuita, y es una lista de correo saludable y sensible ... ¿por qué pagaría por el apoyo?&lt;/p&gt;
&lt;p&gt;Si su software está bien diseñado, es modular, y esas interfaces están bien documentadas, y necesito una modificación - ¿por qué no acabo de escribir el modulo yo mismo?&lt;/p&gt;
&lt;p&gt;Ahora, Ok - estoy exagerando. Hay razones legítimas para pagar por el apoyo o para traer un consultor incluso si las interfaces están limpias y bien documentadas. Pero mi punto es que cuanto mejor haces un trabajo como ingeniero de software libre, se hace más difícil hacer el caso de negocio para tu flujo de ingresos, porque la propuesta de valor se vuelve menos obvia.&lt;/p&gt;
&lt;p&gt;Y si no está socavando directamente su propuesta de valor, todavía puede socavarle indirectamente, porque cuanto más tiempo gasta dinero, menos gasta haciendo lo que el dinero paga. Administrar un programa de certificación lleva tiempo. Escribir y ofrecer cursos de capacitación toma tiempo. La consultoría puede ser lucrativa, pero desarrollar un pipeline de ventas lleva tiempo. Y si usted está consultando, usted necesita cerciorarse de que el pipeline de las ventas esté lleno, que significa que usted va a errar en el lado de tomar más trabajo que menos ... que significa que usted acaba de cerrar la puerta en el el tiempo que tiene disponible para trabajar en código abierto.&lt;/p&gt;
&lt;p&gt;También debe tener cuidado de que en la venta de su caso de negocio, no socave su proyecto principal. Si cada pregunta difícil en la lista de correo se responde con &amp;quot;Podemos responder por una tarifa&amp;quot;, va a sonar como un &lt;em&gt;shill&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si un proyecto dice que necesita dinero para asegurarse de que nos mantenemos al tanto de los problemas de seguridad ... usted tiene que ser muy cuidadoso cómo lo dice, porque la interpretación fácil es &amp;quot;bueno, el proyecto debe ser inseguro, porque no están en la parte superior de la seguridad ahora &amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="una-cuestion-de-escala"&gt;
&lt;h3&gt;Una cuestión de escala&lt;/h3&gt;
&lt;p&gt;También hay una cuestión de escala. Python, Django - estos son grandes proyectos con grandes comunidades. Hacer un caso de negocio para Python o Django no es demasiado difícil. No trivial, pero posible. Pero ser el mantenedor de un proyecto más pequeño - como, digamos, Django Debug Toolbar - se espera seriamente que escriban y vendan un libro sobre Debug Toolbar? ¿O capacitación y certificación en su uso?&lt;/p&gt;
&lt;p&gt;Los proyectos más pequeños no son menos importantes para la vitalidad del ecosistema general de Django, pero estos proyectos no tienen las mismas oportunidades para la recaudación de fondos que los proyectos más grandes.&lt;/p&gt;
&lt;p&gt;También es importante darse cuenta de que no todos los productos tienen todas estas oportunidades de ingresos. Un IDE puede volverse un producto más fácil de mercadear; una librería de desarrollado probablemente no puede. Diferentes proyectos necesitarán diferentes mezclas de flujos de ingresos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tienes-que-vender-algo"&gt;
&lt;h3&gt;¿Tienes que vender algo?&lt;/h3&gt;
&lt;p&gt;Ok - pero podemos hacer esto sin vender nada en absoluto?&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;&amp;quot;How to make money from open source&amp;quot; is like &amp;quot;How to make money from clean water&amp;quot; or public education or science.&lt;/p&gt;&amp;mdash; Pieter Hintjens (@hintjens) &lt;a href="https://twitter.com/hintjens/status/603446810183610368"&gt;May 27, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;El software libre se deriva de un imperativo moral - así que podemos financiar el desarrollo a través del altruismo y el patrocinio? Bueno, es más difícil, pero hay pruebas de que se puede hacer.&lt;/p&gt;
&lt;div class="section" id="crowdfunding-y-recompensas"&gt;
&lt;h4&gt;Crowdfunding y recompensas&lt;/h4&gt;
&lt;p&gt;Una opción que ha visto mucha actividad recientemente es crowdfunding. Plataformas como Kickstarter e Indiegogo proporcionan un camino a un grupo de personas para lanzar y contribuir a un objetivo.&lt;/p&gt;
&lt;p&gt;La comunidad de Django tiene un par de ejemplos de proyectos de crowdfunding muy exitosos, cada uno levantando decenas de miles de dólares (Django Migrations, Multiple Template engines, django.contrib.postgres, Django Rest Framework). Pero - si le preguntas a las personas que hicieron estos proyectos, no hicieron dinero en estos proyectos. La cantidad de tiempo de ingeniería que se invirtió en estos proyectos superó (con creces) el dinero recaudado.&lt;/p&gt;
&lt;p&gt;Otra idea que se escucha regularmente es la idea de recompensas de la resolución de problemas (Bug Bounties) - la asignación de un precio para resolver un error específico. Esto es realmente sólo otra forma de crowdfunding - ¿Quieres arreglar un error específico o implementar una nueva característica? Contribuye con el dinero. Si tu &lt;em&gt;realmente&lt;/em&gt; lo deseas - contribuye más. Y eventualmente alguien tomará el cebo y arreglará el error o implementará la característica.&lt;/p&gt;
&lt;p&gt;Es un modelo atractivo - pero también tiene problemas - más notablemente, quién recibe el pago. ¿Pagas por líneas de código escrito? Esto ignora la contribución de los revisores del código. ¿Qué tan importante es escribir código comparado con revisar código o con encontrar un error?&lt;/p&gt;
&lt;p&gt;Pero el mayor problema que veo con los enfoques de crowdfunding es que están en conflicto con el establecimiento de un ingreso laboral. Si te estás contratando a ti mismo, cuanto más corto sea el compromiso, mayor será tu tarifa por hora. Esta es una cobertura contra el desempleo al final del contrato. Si estás organizando un Kickstarter, es mejor tener un objetivo pequeño, claramente definido y claramente alcanzable. Así que lo puedes hacer en un mes o dos de trabajo.&lt;/p&gt;
&lt;p&gt;Esto significa que necesitas para cobrar tu tasa de corto plazo con el fin de garantizar los ingresos a largo plazo. Pero también es de tu interés tener un objetivo de recaudación de fondos bajo, para que la campaña sea realmente exitosa. Si es demasiado alto, podría asustar a posibles patrocinadores. También significa que la comunidad paga una prima por cualquier característica nueva, que no es el mejor uso de los ya escasos recursos comunitarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="becas-patreon"&gt;
&lt;h4&gt;Becas, Patreon&lt;/h4&gt;
&lt;p&gt;Ok - si deseas ingresos a largo plazo, es necesario mirar a compromisos a más largo plazo. Eso significa que deja de buscar fondos para proyectos específicos y empiezas a buscar financiación para la persona, con becas.&lt;/p&gt;
&lt;p&gt;Estoy incluyendo a Patreon en esa lista porque es efectivamente &amp;quot;crowdsourced patronage&amp;quot;. No estás pagando por una cosa específica - estás pagando para que &amp;quot;sigas haciendo lo que estás haciendo&amp;quot;.&lt;/p&gt;
&lt;p&gt;En los últimos 10 meses, Django ha estado utilizando este modelo. Contratamos a un desarrollador a finales del año pasado. El desarrollador - cuyo nombre es Tim Graham - es responsable de mantener las ruedas del proyecto engrasadas.&lt;/p&gt;
&lt;p&gt;Desde un punto de vista técnico, este ha sido un éxito rotundo. Tim ha hecho un gran trabajo con el manejador de tiquetes (Issue Tracker), y los tiempos de respuesta en las revisiones de Pull Requests son más bajos.&lt;/p&gt;
&lt;p&gt;La parte difícil ha sido recaudar el dinero para pagarle.&lt;/p&gt;
&lt;p&gt;Hicimos una recaudación de fondos al principio del año específicamente para financiar al becario; esa campaña ha recaudado algo más de $ 50.000. Eso no es un cantidad pequeño de dinero - pero no es tampoco mucho cuando estás hablando de un empleado de tiempo completo. Vamos a necesitar hacer otra recaudación de fondos muy pronto si queremos que la beca continue.&lt;/p&gt;
&lt;p&gt;Casi todos están de acuerdo en que ha sido dinero bien gastado, pero convertirlo en donaciones ha sido un trabajo duro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="patrocinio-corporativo"&gt;
&lt;h4&gt;Patrocinio corporativo&lt;/h4&gt;
&lt;p&gt;Otro otro enfoque para recaudar dinero es abrazar al diablo, e ir a los proveedores comerciales. Los intereses comerciales tienen dinero, así que ¿por qué no deberían pagar por ello? Esto puede ser muy exitoso bajo ciertas circunstancias - pero tienes que ser capaz de hacer un caso de negocio para el propietario corporativo.&lt;/p&gt;
&lt;p&gt;OpenStack es un gran ejemplo de esto. ¿Por qué Rackspace, HP, Redhat, Ubuntu están interesados en OpenStack? Porque venden productos que se benefician de la mercantilización del entorno de alojamiento. Al hacer que sea barato y fácil de controlar las implementaciones en la nube, aumentan el tamaño del mercado para el alojamiento en la nube, lo que significa más dinero para su negocio principal - ya sea directamente (como Rackspace), o indirectamente (como RedHat, porque los servidores en la nube todavía necesitan sistemas operativos).&lt;/p&gt;
&lt;p&gt;Node.js es financiado por Joyent por razones similares - Joyent está haciendo una apuesta a largo plazo, en la que si es más fácil desarrollar el software para la web, más gente escribirá dicho software , aumentando el mercado para los servicios de Joyent.&lt;/p&gt;
&lt;p&gt;Sin embargo, Node.js es también un recordatorio sobre los problemas asociados a los intereses corporativos - ¿qué sucede cuando la comunidad y el patrocinador corporativo no están de acuerdo con la dirección del proyecto? Bueno, obtienes divisiones del proyecto, como la división io.js. El dinero corporativo puede corromper. Debemos tener cuidado de que la gobernanza del proyecto sea independiente de la fuente de financiamiento.&lt;/p&gt;
&lt;p&gt;Tener un solo &amp;quot;jefe&amp;quot; corporativo también pone el proyecto en riesgo si ese &amp;quot;jefe&amp;quot; corporativo pierde interés. Django estaba originalmente bajo el ala de la World Company. Eventualmente, ese interés disminuyó, y el apoyo corporativo se acabó.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="venture-funding"&gt;
&lt;h4&gt;Venture funding&lt;/h4&gt;
&lt;p&gt;La otra respuesta corporativa que se escucha es ir a buscar dinero/capital de riesgo/inversión. Y hay algunos ejemplos de gente haciendo esto. Meteor, por ejemplo, está financiando su desarrollo con dinero de un fondo de riesgo. Tienen mucho dinero para contratar a ingenieros, diseñadores - lo que necesiten.&lt;/p&gt;
&lt;p&gt;¿Qué me pone nervioso sobre este modelo? Hemos estado aquí antes. ¿Quién recuerda aquí a Eazel? Para aquellos que no recuerdan, a finales de los 90, Eazel fue una empresa dot-com fundada para desarrollar el gestor de archivos Nautilus. Y, tenemos 2 años de código abierto. Y entonces estalló la burbuja, y la compañía se estropeó. Ahora, lo bueno es que todavía tenemos el código. Pero sería mejor tener el código en desarrollo activo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="desarrollo-de-una-cultura-de-patrocinadores"&gt;
&lt;h3&gt;Desarrollo de una cultura de patrocinadores&lt;/h3&gt;
&lt;p&gt;Y otra vez, toda esta discusión está sucediendo en una industria donde las valuaciones del mil millones de dólares están dando vueltas alrededor.&lt;/p&gt;
&lt;p&gt;Grandes partes de nuestra industria, se basan en software libre - pero los que tienen más capacidad para contribuir, en muchos casos, no están contribuyendo.&lt;/p&gt;
&lt;p&gt;Algunos lo están haciendo - hay algunas empresas que dan grandes cantidades de nuevo a las comunidades de código abierto. Pero también hay un montón de empresas que no retribuyen.&lt;/p&gt;
&lt;p&gt;E incluso muchos aquellos que &lt;em&gt;si&lt;/em&gt; retribuyen dan la ayuda que son capaces de dar, que no es necesariamente la ayuda que se necesita. La Django Software Foundation recibe regularmente ofertas de alojamiento gratuito o subvencionado de proveedores de alojamiento. Y no me malinterpreten - esto es genial, e increíblemente útil.&lt;/p&gt;
&lt;p&gt;Pero lo que realmente necesitamos es alguien en la nómina para revisar los errores. Anteriormente en el ciclo de vida de Django, necesitábamos que la gente escribiera nuevas grandes características. Estamos en una constante necesidad de diseñadores gráficos, artistas, escritores de tecnología. Necesitamos personas que sepan cómo hacer administración de sistemas, y el alcance comunitario. Y no necesitamos 400 personas donando 1 hora; necesitamos 10 personas muy específicas donando 40 horas.&lt;/p&gt;
&lt;p&gt;Cuando ocurre un desastre, organizaciones como la Cruz Roja piden donaciones. Y por lo general dicen &amp;quot;por favor darnos dinero, no latas de comida o mantas&amp;quot;. ¿La razón? El dinero puede comprar lo que se necesita. No puedes controlar lo que la gente dona, e incluso si la gente dona exactamente lo que se necesita, hay una enorme tarea logística de inventariar lo que se ha donado, y llevarlo donde se necesita.&lt;/p&gt;
&lt;p&gt;Los proyectos de software libre son iguales - requieren recursos. Algunas empresas donan en especie, y eso es genial, pero rara vez es lo que se necesita, y es fácil distraerse averiguando qué hacer con todos los recursos que se han donado, pero no tienen un uso inmediato.&lt;/p&gt;
&lt;p&gt;Y tristemente, al igual que con las organizaciones benéficas - muchas empresas no donan en absoluto. Y no estoy diciendo que estas compañías están siendo deliberadamente maliciosas en no financiar el código abierto - si algo, nosotros como comunidad les hemos fallado porque no les hemos ayudado a ayudarnos.&lt;/p&gt;
&lt;p&gt;Lo más importante, no tenemos un mecanismo para que sea fácil gastar dinero, y sea fácil recibir dinero. El estado actual de las cosas demuestra claramente que no es suficiente que haya mucho dinero en una comunidad - hay que crear el mecanismo para que donar ese dinero sea tan obvio y sin fisuras como sea posible, y hay que tener a alguien para direccionar ese dinero donde se necesita.&lt;/p&gt;
&lt;p&gt;Una comunidad modelo que creo que hace esto realmente bien es la comunidad de Wordpress. Wordpress es software GPL. Hay libros, videos, blogs sobre cómo escribir plugins y temas de Wordpress, lo mismo que para cualquier comunidad de software de código abierto. Pero  también hay libros, videos y blogs sobre cómo hacer un &lt;em&gt;negocio&lt;/em&gt; escribiendo plugins y temas de Wordpress. Wordpress es GPL. Y por lo tanto, también lo son todos los complementos. Tienen una tienda donde puedes comprar complementos (y obtener los gratuitos), e instalarlos fácilmente en tu instancia de Wordpress.&lt;/p&gt;
&lt;p&gt;El ecosistema de Wordpress ha aceptado fundamentalmente el hecho de que el dinero necesita ser parte de la ecuación, y al hacerlo han creado una industria que se autofinancia, y esto, diría yo, es una de las razones principales del éxito de Wordpress como una plataforma.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="una-propuesta-polemica"&gt;
&lt;h3&gt;Una propuesta polémica&lt;/h3&gt;
&lt;p&gt;En ese sentido, me gustaría hacer una propuesta polémica.&lt;/p&gt;
&lt;p&gt;¿Qué pasaría si &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; fuese una fuente de ingresos? ¿Qué sucedería si, al registrar una aplicación con &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;, pudieras especificar un precio: por instalación, o por versión, o por aplicación o por mes. Cuando hago &amp;quot;pip install&amp;quot;, el coste se agrega a mi cuenta PyPI, y recibo un cargo mensual en mi tarjeta de crédito; y que se pasa de nuevo a los proyectos de desarrollo.&lt;/p&gt;
&lt;p&gt;Si hemos de creer en las estadísticas de PyPI, Django se descarga de PyPI más de 1 millón de veces al mes. Si hubiese un peaje de 10 centavos de dólar en cada descarga, eso recaudarían $ 100,000 por mes - suficiente para pagar 10 desarrolladores a tiempo completo bien pagos, o una cantidad considerable de diversidad, alcance, DjangoGirls y apoyo de la comunidad.&lt;/p&gt;
&lt;p&gt;También podrías aprovechar la información de la dependencias de PyPi para pagar un porcentaje hacia estos proyectos. Si está escribiendo un proyecto que depende de otro, podría optar por pasar parte de sus ingresos hacia este proyecto. O bien, solicitar que los flujos proporcionen un &amp;quot;peaje&amp;quot;.&lt;/p&gt;
&lt;p&gt;Y luego están las mayores dependencias de todos: PyPI y Python. Si PyPI tomara un pequeño recorte de los ingresos recaudados, eso podría ayudar a pagar por el desarrollo y mantenimiento de PyPI - y potencialmente Python también.&lt;/p&gt;
&lt;p&gt;También puede tomar parte del dinero recaudado y ponerlo en un grupo de desarrollo, por lo que si hay un nuevo proyecto que necesita un poco de efectivo de arranque para empezar, o un proyecto establecido que necesita alguna ayuda para una gran tarea (como una actualización de Python 3 ), la comunidad en su conjunto puede fácilmente canalizar dinero hacia ese proyecto.&lt;/p&gt;
&lt;p&gt;¿Qué pasa con las personas que no tienen dinero? Bueno, podemos ofrecer pases gratis. ¿Estás en un evento de DjangoGirls? Utilice este código promocional para obtener acceso gratuito.&lt;/p&gt;
&lt;p&gt;Todavía puede regalar su software sin costo alguno. Y todavía es software libre - todavía estás entregando Python, así que todavía vas a obtener la fuente. Probablemente podrías incluso hacer que el proceso de inscripción sea completamente opcional. Todo lo que estaríamos haciendo es pavimentar el mecanismo - lo que facilita recaudar un peaje en la forma fácil en que utilizas un software.&lt;/p&gt;
&lt;p&gt;No estoy diciendo que nada de esto sea fácil de implementar. Completamente aparte de cualquier reto técnico y solucionando los detalles, es un cambio filosófico grande para la comunidad, y ése es un asunto mucho más grande. Pero esta pregunta filosófica sobre el dinero es una discusión que nosotros, como comunidad necesitamos tener.&lt;/p&gt;
&lt;p&gt;Lo que tenemos aquí es una &lt;a class="reference external" href="https://es.wikipedia.org/wiki/Tragedia_de_los_comunes"&gt;tragedia de los comunes&lt;/a&gt;. Todo el mundo está de acuerdo en que este software es bueno. Todo el mundo sabe que el software debe mantenerse. Pero, ¿por qué una empresa individual debería asumir la carga económica de financiar el mantenimiento cuando sus competidores obtienen el beneficio de forma gratuita?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aprende-de-la-mpaa-y-riaa-haz-que-sea-facil-hacer-lo-correcto"&gt;
&lt;h3&gt;Aprende de la MPAA y RIAA: Haz que sea fácil hacer lo correcto&lt;/h3&gt;
&lt;p&gt;Para mí, la lección clave de la industria de la música y el cine de los últimos 20 años es que si usted hace más fácil hacer lo correcto, la gente hará lo correcto. Si tu puedes hacer simple y sin problemas para una gran empresa  deslizar tu tarjeta de crédito y que te cobren $ 100 al mes por usar todo este software de código abierto que se ha desarrollado, lo harán. Sí, la gente hará trampa. No te preocupes por ello, siempre y cuando la trampa no sea más fácil que hacer lo correcto.&lt;/p&gt;
&lt;p&gt;La mayor razón por la cual esto no está sucediendo ahora es que no es obvio lo que es lo &amp;quot;correcto&amp;quot;. Podrías donar a la DSF o PSF ... pero es un poco complicado de organizar, y no está claro a dónde va el dinero ... Podrías inscribirte para soportar a algunos Patreons, o inscribirte para un programa de la recompensas ... pero no todo el mundo está allí, y los que están no ganan realmente lo suficiente para ganarse la vida, y no quiero sólo aportar dinero para cerveza.&lt;/p&gt;
&lt;p&gt;Entonces, ¿qué vamos a hacer? La respuesta corta es &amp;quot;No sé&amp;quot;. Probablemente no existe una solución mágica. Me gustaría pensar que un canal de monetización en PyPI funcionaría, pero seré el primero en admitir que podría no ser la respuesta, o que puede haber problemas que no he previsto.&lt;/p&gt;
&lt;p&gt;Pero creo firmemente que esta conversación sobre el dinero es una conversación que tenemos que tener. El software libre como movimiento tiene más de 30 años de antigüedad. El código abierto casi 20. Hemos superado los obstáculos técnicos. Incluso estamos conquistados los obstáculos políticos. Ahora es el momento de abordar la forma en que hacemos de esta una industria sostenible a largo plazo, no sólo los intereses comerciales que se aprovechan de la ingenuidad de una corriente de voluntarios de ojos azules.&lt;/p&gt;
&lt;p&gt;En realidad voy a tomar otra posición ligeramente controversial, y &lt;em&gt;no&lt;/em&gt; voy a tomar preguntas en este punto, por dos razones - en primer lugar, porque este tipo de charla son un imán para &amp;quot;Tengo un comentario, no una pregunta&amp;quot;; y también porque este no es un tema donde yo tenga las respuestas.&lt;/p&gt;
&lt;p&gt;Esta es una discusión que necesitamos tener como comunidad - y estoy ansioso por tener esa discusión - no sólo en esta etapa.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="mailto:russell&amp;#64;keith-magee.com"&gt;russell&amp;#64;keith-magee.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://twitter.com/freakboy3742"&gt;&amp;#64;freakboy3742&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://cecinestpasun.com"&gt;cecinestpasun.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Hola sitio web</title><link href="http://beeware.org/es/noticias/zumbido/hola-sitio-web/" rel="alternate"></link><updated>2016-07-04T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:d82f6a77-b110-3a4b-a058-1a3cd18cd77f</id><content type="html">&lt;p&gt;¡Bienvenido al nuevo sitio web del proyecto BeeWare!&lt;/p&gt;
&lt;p&gt;El sitio web original BeeWare fue escrito hace un par de años, cuando BeeWare era todavía un proyecto altamente experimental. El viejo sitio web era un asunto de una sola página, con proyectos individuales que mantenían su propia identidad web. Con el tiempo, el número de colaboradores ha crecido, el número de subproyectos ha crecido y el número de miembros del equipo central se ha triplicado.&lt;/p&gt;
&lt;p&gt;A medida que el proyecto BeeWare crecía en complejidad, el antiguo sitio web ya no estaba a la altura de las necesidades del proyecto, por lo que el equipo central se tomó un tiempo fuera de trabajar en BeeWare, y reescribió el sitio.&lt;/p&gt;
&lt;p&gt;El nuevo sitio web utiliza &lt;a class="reference external" href="https://www.getlektor.com"&gt;Lektor&lt;/a&gt;, una herramienta generadora de sitios web estáticos escrita por el conocido Pythonista`Armin Ronacher`_. Esto nos permite seguir hospedando el sitio web con Github Pages, pero nos da la flexibilidad para definir una base de datos clara para los muchos tipos de contenido que necesitamos administrar.&lt;/p&gt;
&lt;p&gt;Aunque estamos lanzando el sitio hoy, no está completo. Todavía hay contenido que necesita ser escrito, y el estilo que necesita ser arreglado. Sin embargo, creemos que el nuevo sitio es mejor que el anterior, y por lo tanto no vale la pena retrasar el lanzamiento por más tiempo.&lt;/p&gt;
&lt;p&gt;Esto también le da a la comunidad BeeWare una gran oportunidad de contribuir. Si encuentras algo que falta en el sitio, o algo que crees que podría ser mejor expresado o diseñado mejor, todo el sitio está &lt;a class="reference external" href="https://github.com/beeware/beeware.github.io/tree/lektor"&gt;disponible en GitHub&lt;/a&gt;. Haz un Fork (Bifurca) el repositorio, realiza el cambio que piensas que se necesita y envía un &lt;em&gt;Pull Request&lt;/em&gt; (contra la rama &lt;cite&gt;Lektor&lt;/cite&gt; - no &lt;cite&gt;master&lt;/cite&gt;). Todas las contribuciones son bienvenidas, y al igual que con todas las contribuciones de BeeWare, las contribuciones del sitio web hacen que el solicitante sea elegible para recibir una exclusiva &lt;a class="reference external" href="/es/contribuir/monedas-de-desafio/"&gt;Modena de Desafío de BeeWare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Esperamos que disfrutes del nuevo sitio; si tienes algún comentario, nos lo puedes hacer saber &lt;a class="reference external" href="https://github.com/beeware/beeware.github.io/issues/"&gt;con un ticket&lt;/a&gt; o &lt;a class="reference external" href="/beeware/chat"&gt;en nuestro servidor Discord&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Consejos para convertirse en un colaborador principal</title><link href="http://beeware.org/es/noticias/zumbido/consejos-para-convertirse-en-colaborador-principal/" rel="alternate"></link><updated>2016-06-05T00:00:00Z</updated><author><name>Russell Keith-Magee</name></author><id>urn:uuid:940a526d-d2d9-3cd1-8778-f4453963b04c</id><content type="html">&lt;p&gt;En PyCon EE.UU. 2016, Philip James se convirtió en un colaborador principal de BeeWare!&lt;/p&gt;
&lt;p&gt;Escribió algunos de sus pensamientos sobre el proceso en su artículo &lt;a class="reference external" href="https://www.wordfugue.com/tips-becoming-core-contributor/"&gt;Consejos para convertirse en un colaborador principal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Katie McLaughlin, consiguió su compromiso en DjangoCon Europa 2016, seguido con una publicación propia, describiendo su camino a &lt;a class="reference external" href="http://glasnt.com/blog/2016/06/08/on-becoming-a-core-contributor.html"&gt;convertirse en una colaboradora principal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para aquellos que aspiran a convertirse en colaboradores de proyectos de código abierto, es útil escuchar cómo otros llegaron allí.&lt;/p&gt;
</content></entry></feed>